using System.Text;

using Microsoft.Win32.SafeHandles;

namespace LaquaiLib.DependencyInjection.Wasm.FileSystemProxy;

/// <summary>
/// Implements the <see cref="IFile"/> interface for use in the <see cref="IFileSystemProxy"/>.
/// </summary>
public class File : IFile
{
    /// <inheritdoc cref="System.IO.File.AppendAllLines(string, IEnumerable{string})" />
    public void AppendAllLines(string path, IEnumerable<string> contents) => System.IO.File.AppendAllLines(path, contents);
    /// <inheritdoc cref="System.IO.File.AppendAllLines(string, IEnumerable{string}, Encoding)" />
    public void AppendAllLines(string path, IEnumerable<string> contents, Encoding encoding) => System.IO.File.AppendAllLines(path, contents, encoding);
    /// <inheritdoc cref="System.IO.File.AppendAllLinesAsync(string, IEnumerable{string}, CancellationToken)" />
    public Task AppendAllLinesAsync(string path, IEnumerable<string> contents, CancellationToken cancellationToken) => System.IO.File.AppendAllLinesAsync(path, contents, cancellationToken);
    /// <inheritdoc cref="System.IO.File.AppendAllLinesAsync(string, IEnumerable{string}, Encoding, CancellationToken)" />
    public Task AppendAllLinesAsync(string path, IEnumerable<string> contents, Encoding encoding, CancellationToken cancellationToken) => System.IO.File.AppendAllLinesAsync(path, contents, encoding, cancellationToken);
    /// <inheritdoc cref="System.IO.File.AppendAllText(string, string)" />
    public void AppendAllText(string path, string contents) => System.IO.File.AppendAllText(path, contents);
    /// <inheritdoc cref="System.IO.File.AppendAllText(string, string, Encoding)" />
    public void AppendAllText(string path, string contents, Encoding encoding) => System.IO.File.AppendAllText(path, contents, encoding);
    /// <inheritdoc cref="System.IO.File.AppendAllTextAsync(string, string, CancellationToken)" />
    public Task AppendAllTextAsync(string path, string contents, CancellationToken cancellationToken) => System.IO.File.AppendAllTextAsync(path, contents, cancellationToken);
    /// <inheritdoc cref="System.IO.File.AppendAllTextAsync(string, string, Encoding, CancellationToken)" />
    public Task AppendAllTextAsync(string path, string contents, Encoding encoding, CancellationToken cancellationToken) => System.IO.File.AppendAllTextAsync(path, contents, encoding, cancellationToken);
    /// <inheritdoc cref="System.IO.File.AppendText(string)" />
    public StreamWriter AppendText(string path) => System.IO.File.AppendText(path);
    /// <inheritdoc cref="System.IO.File.Copy(string, string)" />
    public void Copy(string sourceFileName, string destFileName) => System.IO.File.Copy(sourceFileName, destFileName);
    /// <inheritdoc cref="System.IO.File.Copy(string, string, bool)" />
    public void Copy(string sourceFileName, string destFileName, bool overwrite) => System.IO.File.Copy(sourceFileName, destFileName, overwrite);
    /// <inheritdoc cref="System.IO.File.Create(string)" />
    public FileStream Create(string path) => System.IO.File.Create(path);
    /// <inheritdoc cref="System.IO.File.Create(string, int)" />
    public FileStream Create(string path, int bufferSize) => System.IO.File.Create(path, bufferSize);
    /// <inheritdoc cref="System.IO.File.Create(string, int, FileOptions)" />
    public FileStream Create(string path, int bufferSize, FileOptions options) => System.IO.File.Create(path, bufferSize, options);
    /// <inheritdoc cref="System.IO.File.CreateSymbolicLink(string, string)" />
    public FileSystemInfo CreateSymbolicLink(string path, string pathToTarget) => System.IO.File.CreateSymbolicLink(path, pathToTarget);
    /// <inheritdoc cref="System.IO.File.CreateText(string)" />
    public StreamWriter CreateText(string path) => System.IO.File.CreateText(path);
    /// <inheritdoc cref="System.IO.File.Decrypt(string)" />
    public void Decrypt(string path) => System.IO.File.Decrypt(path);
    /// <inheritdoc cref="System.IO.File.Delete(string)" />
    public void Delete(string path) => System.IO.File.Delete(path);
    /// <inheritdoc cref="System.IO.File.Encrypt(string)" />
    public void Encrypt(string path) => System.IO.File.Encrypt(path);
    /// <inheritdoc cref="System.IO.File.Exists(string)" />
    public bool Exists(string path) => System.IO.File.Exists(path);
    /// <inheritdoc cref="System.IO.File.GetAttributes(string)" />
    public FileAttributes GetAttributes(string path) => System.IO.File.GetAttributes(path);
    /// <inheritdoc cref="System.IO.File.GetCreationTime(string)" />
    public DateTime GetCreationTime(string path) => System.IO.File.GetCreationTime(path);
    /// <inheritdoc cref="System.IO.File.GetCreationTimeUtc(string)" />
    public DateTime GetCreationTimeUtc(string path) => System.IO.File.GetCreationTimeUtc(path);
    /// <inheritdoc cref="System.IO.File.GetLastAccessTime(string)" />
    public DateTime GetLastAccessTime(string path) => System.IO.File.GetLastAccessTime(path);
    /// <inheritdoc cref="System.IO.File.GetLastAccessTimeUtc(string)" />
    public DateTime GetLastAccessTimeUtc(string path) => System.IO.File.GetLastAccessTimeUtc(path);
    /// <inheritdoc cref="System.IO.File.GetLastWriteTime(string)" />
    public DateTime GetLastWriteTime(string path) => System.IO.File.GetLastWriteTime(path);
    /// <inheritdoc cref="System.IO.File.GetLastWriteTimeUtc(string)" />
    public DateTime GetLastWriteTimeUtc(string path) => System.IO.File.GetLastWriteTimeUtc(path);
    /// <inheritdoc cref="System.IO.File.Move(string, string)" />
    public void Move(string sourceFileName, string destFileName) => System.IO.File.Move(sourceFileName, destFileName);
    /// <inheritdoc cref="System.IO.File.Move(string, string, bool)" />
    public void Move(string sourceFileName, string destFileName, bool overwrite) => System.IO.File.Move(sourceFileName, destFileName, overwrite);
    /// <inheritdoc cref="System.IO.File.Open(string, FileMode)" />
    public FileStream Open(string path, FileMode mode) => System.IO.File.Open(path, mode);
    /// <inheritdoc cref="System.IO.File.Open(string, FileMode, FileAccess)" />
    public FileStream Open(string path, FileMode mode, FileAccess access) => System.IO.File.Open(path, mode, access);
    /// <inheritdoc cref="System.IO.File.Open(string, FileMode, FileAccess, FileShare)" />
    public FileStream Open(string path, FileMode mode, FileAccess access, FileShare share) => System.IO.File.Open(path, mode, access, share);
    /// <inheritdoc cref="System.IO.File.Open(string, FileStreamOptions)" />
    public FileStream Open(string path, FileStreamOptions options) => System.IO.File.Open(path, options);
    /// <inheritdoc cref="System.IO.File.OpenHandle(string, FileMode, FileAccess, FileShare, FileOptions, long)" />
    public SafeFileHandle OpenHandle(string path, FileMode mode, FileAccess access, FileShare share, FileOptions options, long preallocationSize) => System.IO.File.OpenHandle(path, mode, access, share, options, preallocationSize);
    /// <inheritdoc cref="System.IO.File.OpenRead(string)" />
    public FileStream OpenRead(string path) => System.IO.File.OpenRead(path);
    /// <inheritdoc cref="System.IO.File.OpenText(string)" />
    public StreamReader OpenText(string path) => System.IO.File.OpenText(path);
    /// <inheritdoc cref="System.IO.File.OpenWrite(string)" />
    public FileStream OpenWrite(string path) => System.IO.File.OpenWrite(path);
    /// <inheritdoc cref="System.IO.File.ReadAllBytes(string)" />
    public byte[] ReadAllBytes(string path) => System.IO.File.ReadAllBytes(path);
    /// <inheritdoc cref="System.IO.File.ReadAllBytesAsync(string, CancellationToken)" />
    public Task<byte[]> ReadAllBytesAsync(string path, CancellationToken cancellationToken) => System.IO.File.ReadAllBytesAsync(path, cancellationToken);
    /// <inheritdoc cref="System.IO.File.ReadAllLines(string)" />
    public string[] ReadAllLines(string path) => System.IO.File.ReadAllLines(path);
    /// <inheritdoc cref="System.IO.File.ReadAllLines(string, Encoding)" />
    public string[] ReadAllLines(string path, Encoding encoding) => System.IO.File.ReadAllLines(path, encoding);
    /// <inheritdoc cref="System.IO.File.ReadAllLinesAsync(string, CancellationToken)" />
    public Task<string[]> ReadAllLinesAsync(string path, CancellationToken cancellationToken) => System.IO.File.ReadAllLinesAsync(path, cancellationToken);
    /// <inheritdoc cref="System.IO.File.ReadAllLinesAsync(string, Encoding, CancellationToken)" />
    public Task<string[]> ReadAllLinesAsync(string path, Encoding encoding, CancellationToken cancellationToken) => System.IO.File.ReadAllLinesAsync(path, encoding, cancellationToken);
    /// <inheritdoc cref="System.IO.File.ReadAllText(string)" />
    public string ReadAllText(string path) => System.IO.File.ReadAllText(path);
    /// <inheritdoc cref="System.IO.File.ReadAllText(string, Encoding)" />
    public string ReadAllText(string path, Encoding encoding) => System.IO.File.ReadAllText(path, encoding);
    /// <inheritdoc cref="System.IO.File.ReadAllTextAsync(string, CancellationToken)" />
    public Task<string> ReadAllTextAsync(string path, CancellationToken cancellationToken) => System.IO.File.ReadAllTextAsync(path, cancellationToken);
    /// <inheritdoc cref="System.IO.File.ReadAllTextAsync(string, Encoding, CancellationToken)" />
    public Task<string> ReadAllTextAsync(string path, Encoding encoding, CancellationToken cancellationToken) => System.IO.File.ReadAllTextAsync(path, encoding, cancellationToken);
    /// <inheritdoc cref="System.IO.File.ReadLines(string)" />
    public IEnumerable<string> ReadLines(string path) => System.IO.File.ReadLines(path);
    /// <inheritdoc cref="System.IO.File.ReadLines(string, Encoding)" />
    public IEnumerable<string> ReadLines(string path, Encoding encoding) => System.IO.File.ReadLines(path, encoding);
    /// <inheritdoc cref="System.IO.File.Replace(string, string, string)" />
    public void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName) => System.IO.File.Replace(sourceFileName, destinationFileName, destinationBackupFileName);
    /// <inheritdoc cref="System.IO.File.Replace(string, string, string, bool)" />
    public void Replace(string sourceFileName, string destinationFileName, string destinationBackupFileName, bool ignoreMetadataErrors) => System.IO.File.Replace(sourceFileName, destinationFileName, destinationBackupFileName, ignoreMetadataErrors);
    /// <inheritdoc cref="System.IO.File.ResolveLinkTarget(string, bool)" />
    public FileSystemInfo ResolveLinkTarget(string linkPath, bool returnFinalTarget) => System.IO.File.ResolveLinkTarget(linkPath, returnFinalTarget);
    /// <inheritdoc cref="System.IO.File.SetAttributes(string, FileAttributes)" />
    public void SetAttributes(string path, FileAttributes fileAttributes) => System.IO.File.SetAttributes(path, fileAttributes);
    /// <inheritdoc cref="System.IO.File.SetCreationTime(string, DateTime)" />
    public void SetCreationTime(string path, DateTime creationTime) => System.IO.File.SetCreationTime(path, creationTime);
    /// <inheritdoc cref="System.IO.File.SetCreationTimeUtc(string, DateTime)" />
    public void SetCreationTimeUtc(string path, DateTime creationTimeUtc) => System.IO.File.SetCreationTimeUtc(path, creationTimeUtc);
    /// <inheritdoc cref="System.IO.File.SetLastAccessTime(string, DateTime)" />
    public void SetLastAccessTime(string path, DateTime lastAccessTime) => System.IO.File.SetLastAccessTime(path, lastAccessTime);
    /// <inheritdoc cref="System.IO.File.SetLastAccessTimeUtc(string, DateTime)" />
    public void SetLastAccessTimeUtc(string path, DateTime lastAccessTimeUtc) => System.IO.File.SetLastAccessTimeUtc(path, lastAccessTimeUtc);
    /// <inheritdoc cref="System.IO.File.SetLastWriteTime(string, DateTime)" />
    public void SetLastWriteTime(string path, DateTime lastWriteTime) => System.IO.File.SetLastWriteTime(path, lastWriteTime);
    /// <inheritdoc cref="System.IO.File.SetLastWriteTimeUtc(string, DateTime)" />
    public void SetLastWriteTimeUtc(string path, DateTime lastWriteTimeUtc) => System.IO.File.SetLastWriteTimeUtc(path, lastWriteTimeUtc);
    /// <inheritdoc cref="System.IO.File.WriteAllBytes(string, byte[])" />
    public void WriteAllBytes(string path, byte[] bytes) => System.IO.File.WriteAllBytes(path, bytes);
    /// <inheritdoc cref="System.IO.File.WriteAllBytesAsync(string, byte[], CancellationToken)" />
    public Task WriteAllBytesAsync(string path, byte[] bytes, CancellationToken cancellationToken) => System.IO.File.WriteAllBytesAsync(path, bytes, cancellationToken);
    /// <inheritdoc cref="System.IO.File.WriteAllLines(string, string[])" />
    public void WriteAllLines(string path, string[] contents) => System.IO.File.WriteAllLines(path, contents);
    /// <inheritdoc cref="System.IO.File.WriteAllLines(string, IEnumerable{string})" />
    public void WriteAllLines(string path, IEnumerable<string> contents) => System.IO.File.WriteAllLines(path, contents);
    /// <inheritdoc cref="System.IO.File.WriteAllLines(string, string[], Encoding)" />
    public void WriteAllLines(string path, string[] contents, Encoding encoding) => System.IO.File.WriteAllLines(path, contents, encoding);
    /// <inheritdoc cref="System.IO.File.WriteAllLines(string, IEnumerable{string}, Encoding)" />
    public void WriteAllLines(string path, IEnumerable<string> contents, Encoding encoding) => System.IO.File.WriteAllLines(path, contents, encoding);
    /// <inheritdoc cref="System.IO.File.WriteAllLinesAsync(string, IEnumerable{string}, CancellationToken)" />
    public Task WriteAllLinesAsync(string path, IEnumerable<string> contents, CancellationToken cancellationToken) => System.IO.File.WriteAllLinesAsync(path, contents, cancellationToken);
    /// <inheritdoc cref="System.IO.File.WriteAllLinesAsync(string, IEnumerable{string}, Encoding, CancellationToken)" />
    public Task WriteAllLinesAsync(string path, IEnumerable<string> contents, Encoding encoding, CancellationToken cancellationToken) => System.IO.File.WriteAllLinesAsync(path, contents, encoding, cancellationToken);
    /// <inheritdoc cref="System.IO.File.WriteAllText(string, string)" />
    public void WriteAllText(string path, string contents) => System.IO.File.WriteAllText(path, contents);
    /// <inheritdoc cref="System.IO.File.WriteAllText(string, string, Encoding)" />
    public void WriteAllText(string path, string contents, Encoding encoding) => System.IO.File.WriteAllText(path, contents, encoding);
    /// <inheritdoc cref="System.IO.File.WriteAllTextAsync(string, string, CancellationToken)" />
    public Task WriteAllTextAsync(string path, string contents, CancellationToken cancellationToken) => System.IO.File.WriteAllTextAsync(path, contents, cancellationToken);
    /// <inheritdoc cref="System.IO.File.WriteAllTextAsync(string, string, Encoding, CancellationToken)" />
    public Task WriteAllTextAsync(string path, string contents, Encoding encoding, CancellationToken cancellationToken) => System.IO.File.WriteAllTextAsync(path, contents, encoding, cancellationToken);
}
