<?xml version="1.0"?>
<doc>
    <assembly>
        <name>LaquaiLib</name>
    </assembly>
    <members>
        <member name="T:LaquaiLib.Collections.ConcurrentTwoWayLookup`2">
            <summary>
            Implements a concurrent (thread-safe) version of <see cref="T:LaquaiLib.Collections.TwoWayLookup`2"/>.
            </summary>
            <remarks>
            This type is thread-safe.
            </remarks>
        </member>
        <member name="P:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.Count">
            <summary>
            Gets the number of key-value pairs in the lookup table.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.AddForward(`0,`1)">
            <summary>
            Adds a new entry to the lookup table by the first type parameter <typeparamref name="T1"/>. An exception is thrown if either the key or the value already exists.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.AddReverse(`1,`0)">
            <summary>
            Adds a new entry to the lookup table by the second type parameter <typeparamref name="T2"/>. An exception is thrown if either the key or the value already exists.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.TryAddForward(`0,`1)">
            <summary>
            Attempts to add a new entry to the lookup table by the first type parameter <typeparamref name="T1"/>.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns><see langword="true"/> if the key-value pair could be added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.TryAddReverse(`1,`0)">
            <summary>
            Attempts to add a new entry to the lookup table by the second type parameter <typeparamref name="T2"/>.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns><see langword="true"/> if the key-value pair could be added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.Add(`0,`1)">
            <summary>
            Adds a new entry to the lookup table.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.Add(`1,`0)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.TryAdd(`0,`1)">
            <summary>
            Attempts to add a new entry to the lookup table.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.TryAdd(`1,`0)">
            <inheritdoc cref="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.TryAdd(`0,`1)"/>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.GetForward(`0)">
            <summary>
            Retrieves an entry from the lookup table by its key. An exception is thrown if there is no entry with the given key.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>The value associated with the given key.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.GetReverse(`1)">
            <summary>
            Retrieves an entry from the lookup table by its value. An exception is thrown if there is no entry with the given value.
            </summary>
            <param name="value">The value of the entry.</param>
            <returns>The key associated with the given value.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.SetForward(`0,`1)">
            <summary>
            Sets a key-value pair in the lookup table and returns <paramref name="value"/>.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns>A reference to <paramref name="value"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.SetReverse(`1,`0)">
            <summary>
            Sets a key-value pair in the lookup table and returns <paramref name="value"/>.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns>A reference to <paramref name="value"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.Item(`0)">
            <summary>
            Gets or sets an entry in the lookup table.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>The value associated with the given key.</returns>
        </member>
        <member name="P:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.Item(`1)">
            <summary>
            Gets or sets an entry in the lookup table.
            </summary>
            <param name="key">The value of the entry.</param>
            <returns>The key associated with the given value.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.TryGetForward(`0,`1@)">
            <summary>
            Attempts to retrieve an entry from the lookup table by its key.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">An <c>out</c> <typeparamref name="T2"/> variable that receives the retrieved value.</param>
            <returns><see langword="true"/> if there was a value associated with the key, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.TryGetReverse(`1,`0@)">
            <summary>
            Attempts to retrieve an entry from the lookup table by its value.
            </summary>
            <param name="value">The value of the entry.</param>
            <param name="key">An <c>out</c> <typeparamref name="T1"/> variable that receives the retrieved key.</param>
            <returns><see langword="true"/> if there was a key associated with the value, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.RemoveForward(`0)">
            <summary>
            Removes an entry from the lookup table by its key. An exception is thrown if there is no entry with the given key.
            </summary>
            <param name="key">The key of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.RemoveReverse(`1)">
            <summary>
            Removes an entry from the lookup table by its value. An exception is thrown if there is no entry with the given value.
            </summary>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.TryRemoveForward(`0)">
            <summary>
            Attempts to remove an entry from the lookup table by its key.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns><see langword="true"/> if there was a value associated with the key that could be removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.TryRemoveReverse(`1)">
            <summary>
            Attempts to remove an entry from the lookup table by its value.
            </summary>
            <param name="value">The value of the entry.</param>
            <returns><see langword="true"/> if there was a key associated with the value that could be removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.Clear">
            <summary>
            Removes all entries from the lookup table.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.GetEnumerator">
            <summary>
            Gets an enumerator that, by default, iterates through the forward collection as <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.
            </summary>
            <returns>An enumerator that can be used to iterate through the forward collection.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{T1,T2}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the forward collection as <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.
            </summary>
            <returns>An enumerator that can be used to iterate through the forward collection.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.GetReverseEnumerator">
            <summary>
            Returns an enumerator that iterates through the reverse collection as <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.
            </summary>
            <returns>An enumerator that can be used to iterate through the reverse collection.</returns>
        </member>
        <member name="T:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.ReadLockedEnumerator`2">
            <summary>
            Implements an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that holds a reader lock for the entire duration it is alive.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.ConcurrentTwoWayLookup`2.ReadLockedEnumerator`2.#ctor(System.Threading.ReaderWriterLockSlim,System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{`2,`3}})">
            <summary>
            Implements an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that holds a reader lock for the entire duration it is alive.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.Deque`1">
            <summary>
            Represents a "deque" (or "double-ended queue") data structure.
            This is essentially just a <see cref="T:System.Collections.Generic.LinkedList`1"/> with the last element pointing to the first element and vice versa.
            </summary>
            <typeparam name="T">The type of elements in the deque.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.Deque`1.Head">
            <summary>
            Gets the first element of the deque.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Deque`1.Tail">
            <summary>
            Gets the "last" element of the deque.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Deque`1.Count">
            <summary>
            Gets the number of nodes in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Deque`1.IsEmpty">
            <summary>
            Gets a value indicating whether the <see cref="T:LaquaiLib.Collections.Deque`1"/> is empty.
            </summary>
            <remarks>
            Do not use <see cref="P:LaquaiLib.Collections.Deque`1.Count"/> to perform an empty check under any circumstances. With sufficiently large deques, the performance penalty is significant.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.#ctor">
            <summary>
            Initializes a new, empty <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.Deque`1"/> with nodes containing the specified values.
            </summary>
            <param name="values">The values to insert into the deque.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.Deque`1"/> with the specified number of nodes that contain the default value of <typeparamref name="T"/>.
            </summary>
            <param name="nodes">The number of nodes to insert into the deque.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.#ctor(System.Collections.Generic.LinkedList{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.Deque`1"/> by creating copies of the nodes in the specified <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            This copy operation is shallow; if <typeparamref name="T"/> is a reference type, only the references are copied.
            </summary>
            <param name="linkedList">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to copy nodes from.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.FindFirst(`0)">
            <summary>
            Finds the first node in the deque that contains the specified value.
            </summary>
            <param name="value">The value to find.</param>
            <returns>A reference to the first node that contains the specified value, or <see langword="null"/> if no such node was found.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.FindLast(`0)">
            <summary>
            Finds the last node in the deque that contains the specified value.
            </summary>
            <param name="value">The value to find.</param>
            <returns>A reference to the last node that contains the specified value, or <see langword="null"/> if no such node was found.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.FindAll(`0)">
            <summary>
            Finds all nodes in the deque that contain the specified value.
            </summary>
            <param name="value">The value to find.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> that enumerates all nodes that contain the specified value.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddAfter(LaquaiLib.Collections.DequeNode{`0},`0)">
            <summary>
            Inserts a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> containing the specified value after the specified node.
            </summary>
            <param name="node">The node to insert the new node after.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddAfter(LaquaiLib.Collections.DequeNode{`0},LaquaiLib.Collections.DequeNode{`0})">
            <summary>
            Inserts the specified <see cref="T:LaquaiLib.Collections.DequeNode`1"/> after the specified node.
            </summary>
            <param name="node">The node to insert the new node after.</param>
            <param name="newNode">The node to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="newNode"/> already belongs to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddBefore(LaquaiLib.Collections.DequeNode{`0},`0)">
            <summary>
            Inserts a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> containing the specified value before the specified node.
            </summary>
            <param name="node">The node to insert the new node before.</param>
            <param name="value">The value to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddBefore(LaquaiLib.Collections.DequeNode{`0},LaquaiLib.Collections.DequeNode{`0})">
            <summary>
            Inserts the specified <see cref="T:LaquaiLib.Collections.DequeNode`1"/> before the specified node.
            </summary>
            <param name="node">The node to insert the new node before.</param>
            <param name="newNode">The node to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="newNode"/> already belongs to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddFirst(`0)">
            <summary>
            Adds a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> containing the specified value to the beginning of the deque (that is, the specified node becomes the <see cref="P:LaquaiLib.Collections.Deque`1.Head"/>).
            </summary>
            <param name="value">The value to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddFirst(LaquaiLib.Collections.DequeNode{`0})">
            <summary>
            Adds the specified <see cref="T:LaquaiLib.Collections.DequeNode`1"/> to the beginning of the deque (that is, the specified node becomes the <see cref="P:LaquaiLib.Collections.Deque`1.Head"/>).
            </summary>
            <param name="node">The node to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="node"/> already belongs to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddLast(`0)">
            <summary>
            Adds a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> containing the specified value to the end of the deque (that is, the specified node becomes the <see cref="P:LaquaiLib.Collections.Deque`1.Tail"/>).
            </summary>
            <param name="value">The value to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.AddLast(LaquaiLib.Collections.DequeNode{`0})">
            <summary>
            Adds the specified <see cref="T:LaquaiLib.Collections.DequeNode`1"/> to the end of the deque (that is, the specified node becomes the <see cref="P:LaquaiLib.Collections.Deque`1.Tail"/>).
            </summary>
            <param name="node">The node to insert.</param>
            <returns>A reference to the newly inserted node.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="node"/> already belongs to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.Clear">
            <summary>
            Clears the reference to <see cref="P:LaquaiLib.Collections.Deque`1.Head"/>, which in turn clears the reference to all other nodes.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.Contains(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether the <see cref="T:LaquaiLib.Collections.Deque`1"/> contains at least one node that contains the specified value.
            </summary>
            <param name="value">The value to find.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values.</param>
            <returns><see langword="true"/> if the <see cref="T:LaquaiLib.Collections.Deque`1"/> contains at least one node that contains the specified value, otherwise <see langword="false"/>.</returns>
            <remarks>
            If the <see cref="T:LaquaiLib.Collections.Deque`1"/> is empty (that is, <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> is <see langword="null"/>), this method always returns <see langword="false"/>.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the values of the <see cref="T:LaquaiLib.Collections.Deque`1"/> to the specified array, starting at the specified index.
            </summary>
            <param name="array">The array to copy the values to.</param>
            <param name="index">The index in <paramref name="array"/> at which to begin inserting values.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.EnsureIntegrity">
            <summary>
            Enumerates the <see cref="T:LaquaiLib.Collections.Deque`1"/> and ensures that all contained nodes have references to neighboring nodes and to this <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.Rotate(System.Int32)">
            <summary>
            Rotates the <see cref="T:LaquaiLib.Collections.Deque`1"/> by the specified number of nodes (that is, the node <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> references is shifted by the specified number of nodes).
            </summary>
            <param name="n">The number of nodes to rotate by. For example, if <paramref name="n"/> is 1, the node <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> references becomes <c><see cref="P:LaquaiLib.Collections.Deque`1.Head"/>.Previous</c>.</param>
            <returns>A reference to the new <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> node.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.RemoveNode(LaquaiLib.Collections.DequeNode{`0})">
            <summary>
            Detaches the specified node from the <see cref="T:LaquaiLib.Collections.Deque`1"/> and its neighbors.
            </summary>
            <param name="node">The node to remove.</param>
            <remarks>
            This method ensures that, unless <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> itself is detached, <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> will always remain in a valid state (that is, it will remain attached to its <see cref="T:LaquaiLib.Collections.Deque`1"/> and its, possibly new, neighbors).
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if <paramref name="node"/> does not belong to this <see cref="T:LaquaiLib.Collections.Deque`1"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.RemoveNodes(System.ReadOnlySpan{LaquaiLib.Collections.DequeNode{`0}})">
            <summary>
            Detaches the specified nodes from the <see cref="T:LaquaiLib.Collections.Deque`1"/> and their neighbors.
            </summary>
            <param name="nodes">The nodes to remove.</param>
            <returns>The number of nodes that were removed.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.RemoveAll(`0)">
            <summary>
            Detaches all nodes that contain the specified value from the <see cref="T:LaquaiLib.Collections.Deque`1"/> and their neighbors.
            </summary>
            <param name="value">The value to remove.</param>
            <returns>The number of nodes that were removed.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.PopLeft">
            <summary>
            Detaches the <see cref="P:LaquaiLib.Collections.Deque`1.Head"/> from the <see cref="T:LaquaiLib.Collections.Deque`1"/> and its neighbors.
            </summary>
            <returns>The value of the detached node.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="T:LaquaiLib.Collections.Deque`1"/> is empty.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.PopRight">
            <summary>
            Detaches the <see cref="P:LaquaiLib.Collections.Deque`1.Tail"/> from the <see cref="T:LaquaiLib.Collections.Deque`1"/> and its neighbors.
            </summary>
            <returns>The value of the detached node.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="T:LaquaiLib.Collections.Deque`1"/> is empty.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.System#Collections#Generic#IEnumerable{LaquaiLib#Collections#DequeNode{T}}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the <see cref="T:LaquaiLib.Collections.Deque`1"/>'s nodes.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates through the values of the <see cref="T:LaquaiLib.Collections.Deque`1"/>'s nodes.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.EnumerateNodes">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates over the current instance's <see cref="T:LaquaiLib.Collections.DequeNode`1"/>s.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> as described.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.EnumerateValues">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> that iterates over the current instance's values.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerator`1"/> as described.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Deque`1.ToLinkedList">
            <summary>
            Constructs a new <see cref="T:System.Collections.Generic.LinkedList`1"/> from the <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
            <returns>The newly constructed <see cref="T:System.Collections.Generic.LinkedList`1"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Collections.DequeNode`1">
            <summary>
            Represents a node in a <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
            <typeparam name="T">The type of the value this node contains. It must be compatible with the type of the <see cref="T:LaquaiLib.Collections.Deque`1"/> this node belongs to.</typeparam>
            <remarks>
            Initializes a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> with the specified value that is not attached to a <see cref="T:LaquaiLib.Collections.Deque`1"/> and has no neighbors.
            </remarks>
            <param name="value">The value this node contains.</param>
        </member>
        <member name="M:LaquaiLib.Collections.DequeNode`1.#ctor(`0)">
            <summary>
            Represents a node in a <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
            <typeparam name="T">The type of the value this node contains. It must be compatible with the type of the <see cref="T:LaquaiLib.Collections.Deque`1"/> this node belongs to.</typeparam>
            <remarks>
            Initializes a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> with the specified value that is not attached to a <see cref="T:LaquaiLib.Collections.Deque`1"/> and has no neighbors.
            </remarks>
            <param name="value">The value this node contains.</param>
        </member>
        <member name="M:LaquaiLib.Collections.DequeNode`1.#ctor(`0,LaquaiLib.Collections.DequeNode{`0},LaquaiLib.Collections.DequeNode{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> with the specified value that is not attached to a <see cref="T:LaquaiLib.Collections.Deque`1"/> and has the specified neighbors.
            </summary>
            <param name="value">The value this node contains.</param>
            <param name="next">The next node in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.</param>
            <param name="previous">The previous node in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.DequeNode`1.#ctor(`0,LaquaiLib.Collections.DequeNode{`0},LaquaiLib.Collections.DequeNode{`0},LaquaiLib.Collections.Deque{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.DequeNode`1"/> with the specified value that attached to the specified <see cref="T:LaquaiLib.Collections.Deque`1"/> and has the specified neighbors.
            </summary>
            <param name="value">The value this node contains.</param>
            <param name="next">The next node in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.</param>
            <param name="previous">The previous node in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.</param>
            <param name="deque">The <see cref="T:LaquaiLib.Collections.Deque`1"/> this node belongs to.</param>
        </member>
        <member name="P:LaquaiLib.Collections.DequeNode`1.Deque">
            <summary>
            Returns the <see cref="T:LaquaiLib.Collections.Deque`1"/> this node belongs to.
            If <see langword="null"/> or set explicitly, the node is not coupled to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.DequeNode`1.Next">
            <summary>
            Returns the next node in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.DequeNode`1.Previous">
            <summary>
            Returns the previous node in the <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.DequeNode`1.Value">
            <summary>
            Returns the value this node contains.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.DequeNode`1.Equals(LaquaiLib.Collections.DequeNode{`0})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.DequeNode`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.DequeNode`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.DequeNode`1.ToString">
            <summary>
            Returns the string representation of the <see cref="P:LaquaiLib.Collections.DequeNode`1.Value"/> this node contains.
            </summary>
            <returns>A <see cref="T:System.String"/> as described.</returns>
        </member>
        <member name="T:LaquaiLib.Collections.DetachedDequeNodeException`1">
            <summary>
            The exception that is thrown when <see cref="M:LaquaiLib.Collections.Deque`1.EnsureIntegrity"/> encounters a <see cref="T:LaquaiLib.Collections.DequeNode`1"/> that is not attached to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
            <typeparam name="T">The type of the value the detached <see cref="T:LaquaiLib.Collections.DequeNode`1"/> contains.</typeparam>
            <remarks>
            Initializes a new <see cref="T:LaquaiLib.Collections.DetachedDequeNodeException`1"/> with the offending <paramref name="node"/> and the kind of <paramref name="offense"/> that caused this exception to be thrown.
            </remarks>
            <param name="node">The detached <see cref="T:LaquaiLib.Collections.DequeNode`1"/>.</param>
            <param name="offense">The kind of offense that <paramref name="node"/> committed which caused this exception to be thrown.</param>
        </member>
        <member name="M:LaquaiLib.Collections.DetachedDequeNodeException`1.#ctor(LaquaiLib.Collections.DequeNode{`0},LaquaiLib.Collections.DetachedDequeNodeException{`0}.OffenseKind)">
            <summary>
            The exception that is thrown when <see cref="M:LaquaiLib.Collections.Deque`1.EnsureIntegrity"/> encounters a <see cref="T:LaquaiLib.Collections.DequeNode`1"/> that is not attached to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
            <typeparam name="T">The type of the value the detached <see cref="T:LaquaiLib.Collections.DequeNode`1"/> contains.</typeparam>
            <remarks>
            Initializes a new <see cref="T:LaquaiLib.Collections.DetachedDequeNodeException`1"/> with the offending <paramref name="node"/> and the kind of <paramref name="offense"/> that caused this exception to be thrown.
            </remarks>
            <param name="node">The detached <see cref="T:LaquaiLib.Collections.DequeNode`1"/>.</param>
            <param name="offense">The kind of offense that <paramref name="node"/> committed which caused this exception to be thrown.</param>
        </member>
        <member name="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Message">
            <inheritdoc />
        </member>
        <member name="P:LaquaiLib.Collections.DetachedDequeNodeException`1.InnerException">
            <inheritdoc cref="P:System.Exception.InnerException"/>
        </member>
        <member name="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node">
            <summary>
            The <see cref="T:LaquaiLib.Collections.DequeNode`1"/> that is not attached to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Offense">
            <summary>
            The kind of offense that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> committed which caused this exception to be thrown.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.DetachedDequeNodeException`1.#ctor(LaquaiLib.Collections.DequeNode{`0},LaquaiLib.Collections.DetachedDequeNodeException{`0}.OffenseKind,System.Exception)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.DetachedDequeNodeException`1"/> with the offending <paramref name="node"/>, the kind of <paramref name="offense"/> that caused this exception to be thrown, and an <paramref name="innerException"/>.
            </summary>
            <param name="node">The detached <see cref="T:LaquaiLib.Collections.DequeNode`1"/>.</param>
            <param name="offense">The kind of offense that <paramref name="node"/> committed which caused this exception to be thrown.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind">
            <summary>
            Identifies the kind of offense that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> committed which caused this exception to be thrown.
            </summary>
        </member>
        <member name="F:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind.Undefined">
            <summary>
            Indicates that the kind of offense is undefined.
            </summary>
        </member>
        <member name="F:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind.NoDeque">
            <summary>
            Indicates that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> is not attached to a <see cref="T:LaquaiLib.Collections.Deque`1"/>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind.NoNext">
            <summary>
            Indicates that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> is missing a reference to its next node.
            </summary>
        </member>
        <member name="F:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind.NoPrevious">
            <summary>
            Indicates that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> is missing a reference to its previous node.
            </summary>
        </member>
        <member name="F:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind.InconsistentNext">
            <summary>
            Indicates that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/>'s next node does not have a reference to <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> as its previous node.
            </summary>
        </member>
        <member name="F:LaquaiLib.Collections.DetachedDequeNodeException`1.OffenseKind.InconsistentPrevious">
            <summary>
            Indicates that <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/>'s previous node does not have a reference to <see cref="P:LaquaiLib.Collections.DetachedDequeNodeException`1.Node"/> as its next node.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.Enumeration.FilterableEnumerable`1">
            <summary>
            Implements the enumerator pattern to iterate over only the items that match a given predicate.
            This implementation is stateless; all caching is done through the internals of <see cref="T:System.Collections.Generic.IEnumerable`1"/>, meaning this enumerator may be reused.
            </summary>
            <typeparam name="T">The type of the items to iterate over.</typeparam>
            <remarks>
            Initializes a new <see cref="T:LaquaiLib.Collections.Enumeration.FilterableEnumerable`1"/> that iterates over all items in the given collection.
            </remarks>
            <param name="items">The type of the items to iterate over.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.FilterableEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Implements the enumerator pattern to iterate over only the items that match a given predicate.
            This implementation is stateless; all caching is done through the internals of <see cref="T:System.Collections.Generic.IEnumerable`1"/>, meaning this enumerator may be reused.
            </summary>
            <typeparam name="T">The type of the items to iterate over.</typeparam>
            <remarks>
            Initializes a new <see cref="T:LaquaiLib.Collections.Enumeration.FilterableEnumerable`1"/> that iterates over all items in the given collection.
            </remarks>
            <param name="items">The type of the items to iterate over.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Enumeration.FilterableEnumerable`1.Current">
            <summary>
            Retrieves the current item at which the enumerator is positioned.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.FilterableEnumerable`1.GetEnumerator">
            <summary>
            Returns the current instance. For use in <see langword="foreach"/> statements.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.FilterableEnumerable`1.#ctor">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.Enumeration.FilterableEnumerable`1"/> with no items to iterate over.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.FilterableEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Boolean})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.Enumeration.FilterableEnumerable`1"/>.
            </summary>
            <param name="items">The items to iterate over.</param>
            <param name="predicate">The predicate to filter the items by. If <see langword="null"/>, this instance will iterate over all items in the collection.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.FilterableEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Int32,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Collections.Enumeration.FilterableEnumerable`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Func{`0,System.Boolean})"/>
        </member>
        <member name="T:LaquaiLib.Collections.Enumeration.MemoryEnumerable`1">
            <summary>
            Implements the enumerable pattern to enumerate the elements in a <see cref="T:System.ReadOnlyMemory`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the <see cref="T:System.ReadOnlyMemory`1"/>.</typeparam>
            <param name="memory">The <see cref="T:System.ReadOnlyMemory`1"/> to enumerate.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.MemoryEnumerable`1.#ctor(System.ReadOnlyMemory{`0})">
            <summary>
            Implements the enumerable pattern to enumerate the elements in a <see cref="T:System.ReadOnlyMemory`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the <see cref="T:System.ReadOnlyMemory`1"/>.</typeparam>
            <param name="memory">The <see cref="T:System.ReadOnlyMemory`1"/> to enumerate.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.MemoryEnumerable`1.GetEnumerator">
            <summary>
            Returns the current instance. For use in <see langword="foreach"/> statements.
            </summary>
            <returns>The current instance.</returns>
        </member>
        <member name="P:LaquaiLib.Collections.Enumeration.MemoryEnumerable`1.Current">
            <summary>
            Gets the element at the current position in the <see cref="T:System.Memory`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.MemoryEnumerable`1.MoveNext">
            <summary>
            Gets the element at the current position in the <see cref="T:System.Memory`1"/>.
            </summary>
            <returns><see langword="true"/> if the enumerator was successfully advanced to the next element; <see langword="false"/> if the enumerator has passed the end of the collection.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.MemoryEnumerable`1.Reset">
            <summary>
            Resets the enumerator to immediately before the first element in the <see cref="T:System.Memory`1"/>.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1">
            <summary>
            Implements the enumerator pattern to enumerate the elements of a (potentially) multidimensional array sequentially.
            </summary>
            <typeparam name="T">The type of the elements in the array. This must be exactly the same type as the array, otherwise users of this type will be faced with non-sensical exceptions.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1.Current">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1.Span">
            <summary>
            Gets a <see cref="T:System.Span`1"/> over the entire array.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1.Memory">
            <summary>
            Gets a <see cref="T:System.Memory`1"/> over the entire array.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1.Reset">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1.#ctor(System.Array)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> with the specified <paramref name="array"/>.
            </summary>
            <param name="array">The array to enumerate.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1.Dispose">
            <summary>
            Frees the <see cref="T:System.Runtime.InteropServices.GCHandle"/> used to pin the target array.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1.op_Implicit(System.Array)~LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable{`0}">
            <summary>
            Implicitly creates an <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> from an <see cref="T:System.Array"/>.
            </summary>
            <param name="array">The array to wrap.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:LaquaiLib.Collections.Enumeration.SpanChunkEnumerable`1" -->
        <!-- Badly formed XML comment ignored for member "M:LaquaiLib.Collections.Enumeration.SpanChunkEnumerable`1.#ctor(System.ReadOnlySpan{`0},System.Int32)" -->
        <member name="P:LaquaiLib.Collections.Enumeration.SpanChunkEnumerable`1.Current">
            <summary>
            Retrieves the current segment at which the enumerator is positioned.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.SpanChunkEnumerable`1.GetEnumerator">
            <summary>
            Returns the current instance. For use in <see langword="foreach"/> statements.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.SpanChunkEnumerable`1.MoveNext">
            <summary>
            Attempts to advance the enumerator to the next chunk in the source span.
            </summary>
            <returns><see langword="true"/> if the advancement has succeeded, otherwise <see langword="false"/> if the enumerator has passed the end of the span.</returns>
        </member>
        <member name="T:LaquaiLib.Collections.Enumeration.SpanSplitBySequenceEnumerable`1">
            <summary>
            Implements the enumerator pattern to enumerate the segments in a source <see cref="T:System.ReadOnlySpan`1"/> of <typeparamref name="T"/> that are separated by the specified <paramref name="split"/> sequence.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to enumerate the segments of.</param>
            <param name="split">The <typeparamref name="T"/>s to use as delimiters.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.SpanSplitBySequenceEnumerable`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Implements the enumerator pattern to enumerate the segments in a source <see cref="T:System.ReadOnlySpan`1"/> of <typeparamref name="T"/> that are separated by the specified <paramref name="split"/> sequence.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to enumerate the segments of.</param>
            <param name="split">The <typeparamref name="T"/>s to use as delimiters.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Enumeration.SpanSplitBySequenceEnumerable`1.Current">
            <summary>
            Retrieves the current segment at which the enumerator is positioned.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.SpanSplitBySequenceEnumerable`1.GetEnumerator">
            <summary>
            Returns the current instance. For use in <see langword="foreach"/> statements.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.SpanSplitBySequenceEnumerable`1.MoveNext">
            <summary>
            Attempts to advance the enumerator to the next segment in the source span.
            </summary>
            <returns><see langword="true"/> if the advancement has succeeded, otherwise <see langword="false"/> if the enumerator has passed the end of the span.</returns>
        </member>
        <member name="T:LaquaiLib.Collections.Enumeration.SpanSplitByStringsEnumerable">
            <summary>
            Implements the enumerator pattern to enumerate the segments in a source <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/>s that are separated by any of the <see langword="string"/>s specified by <paramref name="strings"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.SpanSplitByStringsEnumerable.#ctor(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.String},System.StringComparison,System.StringSplitOptions)">
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to enumerate the segments of.</param>
            <param name="strings">The <see cref="T:System.ReadOnlySpan`1"/>s to use as delimiters.</param>
            <param name="stringComparison">The <see cref="T:System.StringComparison"/> behavior to employ when searching for the delimiters. Defaults to <see cref="F:System.StringComparison.CurrentCulture"/>.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Enumeration.SpanSplitByStringsEnumerable.Current">
            <summary>
            Retrieves the current segment at which the enumerator is positioned.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.SpanSplitByStringsEnumerable.GetEnumerator">
            <summary>
            Returns the current instance. For use in <see langword="foreach"/> statements.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.SpanSplitByStringsEnumerable.MoveNext">
            <summary>
            Attempts to advance the enumerator to the next segment in the source span.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.Enumeration.SpanSplitEnumerable`1">
            <summary>
            Implements the enumerator pattern to enumerate the segments in a source <see cref="T:System.ReadOnlySpan`1"/> of <typeparamref name="T"/> that are separated by any of the values specified by <paramref name="splits"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to enumerate the segments of.</param>
            <param name="splits">The <typeparamref name="T"/>s to use as delimiters.</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use for comparing the elements in the source span with the splits.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.SpanSplitEnumerable`1.#ctor(System.ReadOnlySpan{`0},System.ReadOnlySpan{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Implements the enumerator pattern to enumerate the segments in a source <see cref="T:System.ReadOnlySpan`1"/> of <typeparamref name="T"/> that are separated by any of the values specified by <paramref name="splits"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to enumerate the segments of.</param>
            <param name="splits">The <typeparamref name="T"/>s to use as delimiters.</param>
            <param name="equalityComparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use for comparing the elements in the source span with the splits.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Enumeration.SpanSplitEnumerable`1.Current">
            <summary>
            Retrieves the current segment at which the enumerator is positioned.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.SpanSplitEnumerable`1.GetEnumerator">
            <summary>
            Returns the current instance. For use in <see langword="foreach"/> statements.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Enumeration.SpanSplitEnumerable`1.MoveNext">
            <summary>
            Attempts to advance the enumerator to the next segment in the source span.
            </summary>
            <returns><see langword="true"/> if the advancement has succeeded, otherwise <see langword="false"/> if the enumerator has passed the end of the span.</returns>
        </member>
        <member name="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1">
            <summary>
            Implements a queue data structure with a maximum number of items allowed in it.
            When the collection is at capacity and it is attempted to enqueue another object, the oldest is removed.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <remarks>
            This Type is thread-safe.
            </remarks>
        </member>
        <member name="P:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.Capacity">
            <summary>
            The capacity of this <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new empty <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> with the given maximum <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> can hold before discarding the oldest value.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> with the items from the passed <paramref name="enumerable"/>. Its maximum capacity is set to <paramref name="enumerable"/>'s length.
            </summary>
            <param name="enumerable">The collection to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>'s items from.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> with the items from the passed <paramref name="items"/>. Its maximum capacity is set to <paramref name="items"/>'s length.
            </summary>
            <param name="items">The <see cref="T:System.ReadOnlySpan`1"/> of <typeparamref name="T"/> to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>'s items from.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> with the items from the passed <paramref name="enumerable"/>. Its maximum capacity is set to <paramref name="capacity"/>.
            </summary>
            <param name="enumerable">The collection to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>'s items from.</param>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> can hold before discarding the oldest value.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="capacity"/> is smaller than the number of items in <paramref name="enumerable"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.#ctor(System.Int32,`0[])">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> with the items from the passed <paramref name="span"/>. Its maximum capacity is set to <paramref name="capacity"/>.
            </summary>
            <param name="span">The span to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>'s items from.</param>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> can hold before discarding the oldest value.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="capacity"/> is smaller than the number of items in <paramref name="span"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.#ctor(System.Int32,System.ReadOnlySpan{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> with the items from the passed <paramref name="span"/>. Its maximum capacity is set to <paramref name="capacity"/>.
            </summary>
            <param name="span">The span to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>'s items from.</param>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> can hold before discarding the oldest value.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="capacity"/> is smaller than the number of items in <paramref name="span"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.Enqueue(`0)">
            <summary>
            Adds an item to the end of the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>, discarding the oldest item if the collection is at maximum capacity.
            </summary>
            <param name="item">The item to add to the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.TryEnqueue(`0)">
            <summary>
            Attempts to add an item to the end of the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.
            If this would cause the oldest item to be discarded because the collection is at capacity, the collection remains unchanged.
            </summary>
            <param name="item">The object to add to the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.</param>
            <returns>A value indicating whether the collection was modified; <see langword="true"/> if <paramref name="item"/> could be added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.
            An exception is thrown if the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> is empty.
            </summary>
            <returns>The object that is removed from the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.TryDequeue(`0@)">
            <summary>
            Attempts to remove and return the object at the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.
            </summary>
            <param name="item">An <see langword="out"/> variable that receives the object removed from the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.</param>
            <returns>A value indicating whether the collection was modified; <see langword="true"/> if an object could be removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> without removing it.
            An exception is thrown if the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>
            </summary>
            <returns>The object at the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.TryPeek(`0@)">
            <summary>
            Attempts to return the object at the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> without removing it.
            </summary>
            <param name="item">An <see langword="out"/> variable that receives the object at the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.</param>
            <returns>A value indicating whether <paramref name="item"/> was assigned; <see langword="true"/> if an object could be returned, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.Count">
            <summary>
            Gets the number of items currently enqueued in the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.GetEnumerator">
            <summary>
            Gets an enumerator over the items in the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.Add(`0)">
            <inheritdoc cref="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.Enqueue(`0)"/>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.Clear">
            <summary>
            Dequeues all items from the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.</param>
            <returns>The <see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the queue to a specified array starting at a given index.
            </summary>
            <param name="array">The destination array where the elements from the queue will be copied.</param>
            <param name="arrayIndex">The starting index in the destination array where copying begins.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.Remove(`0)">
            <summary>
            Always returns <see langword="false"/>. Items cannot be directly removed from a <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>;
            </summary>
            <param name="item">The item to remove from the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/>.</param>
            <returns><see langword="false"/> unconditionally.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1.Resize(System.Int32)">
            <summary>
            Resizes the internal backing store of the <see cref="T:LaquaiLib.Collections.LimitedCollections.ConcurrentLimitedQueue`1"/> to the specified <paramref name="size"/>.
            The oldest items beyond the new size are discarded.
            <para/>This is the only method that will cause new allocations in regards to the backing store.
            </summary>
            <param name="size">The number of items to allow in the collection.</param>
        </member>
        <member name="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1">
            <summary>
            Implements a queue data structure with a maximum number of items allowed in it.
            When the collection is at capacity and it is attempted to enqueue another object, the oldest is removed.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
        </member>
        <member name="P:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Capacity">
            <summary>
            The capacity of this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.Int32)">
            <summary>
            Initializes a new empty <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> with the given maximum <paramref name="capacity"/>.
            </summary>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> can hold before discarding the oldest value.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> with the items from the passed <paramref name="enumerable"/>. Its maximum capacity is set to <paramref name="enumerable"/>'s length.
            </summary>
            <param name="enumerable">The collection to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>'s items from.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> with the items from the passed <paramref name="items"/>. Its maximum capacity is set to <paramref name="items"/>'s length.
            </summary>
            <param name="items">The <see cref="T:System.ReadOnlySpan`1"/> of <typeparamref name="T"/> to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>'s items from.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> with the items from the passed <paramref name="enumerable"/>. Its maximum capacity is set to <paramref name="capacity"/>.
            </summary>
            <param name="enumerable">The collection to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>'s items from.</param>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> can hold before discarding the oldest value.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="capacity"/> is smaller than the number of items in <paramref name="enumerable"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.Int32,`0[])">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> with the items from the passed <paramref name="span"/>. Its maximum capacity is set to <paramref name="capacity"/>.
            </summary>
            <param name="span">The span to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>'s items from.</param>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> can hold before discarding the oldest value.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="capacity"/> is smaller than the number of items in <paramref name="span"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.#ctor(System.Int32,System.ReadOnlySpan{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> with the items from the passed <paramref name="span"/>. Its maximum capacity is set to <paramref name="capacity"/>.
            </summary>
            <param name="span">The span to copy the new <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>'s items from.</param>
            <param name="capacity">The maximum number of items this <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> can hold before discarding the oldest value.</param>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="capacity"/> is smaller than the number of items in <paramref name="span"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Enqueue(`0)">
            <summary>
            Adds an item to the end of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>, discarding the oldest item if the collection is at maximum capacity.
            </summary>
            <param name="item">The item to add to the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.TryEnqueue(`0)">
            <summary>
            Attempts to add an item to the end of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.
            If this would cause the oldest item to be discarded because the collection is at capacity, the collection remains unchanged.
            </summary>
            <param name="item">The object to add to the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.</param>
            <returns>A value indicating whether the collection was modified; <see langword="true"/> if <paramref name="item"/> could be added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Dequeue">
            <summary>
            Removes and returns the object at the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.
            An exception is thrown if the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> is empty.
            </summary>
            <returns>The object that is removed from the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.TryDequeue(`0@)">
            <summary>
            Attempts to remove and return the object at the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.
            </summary>
            <param name="item">An <see langword="out"/> variable that receives the object removed from the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.</param>
            <returns>A value indicating whether the collection was modified; <see langword="true"/> if an object could be removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Peek">
            <summary>
            Returns the object at the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> without removing it.
            An exception is thrown if the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> is empty.
            </summary>
            <returns>The object at the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.TryPeek(`0@)">
            <summary>
            Attempts to return the object at the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> without removing it.
            </summary>
            <param name="item">An <see langword="out"/> variable that receives the object at the beginning of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.</param>
            <returns>A value indicating whether <paramref name="item"/> was assigned; <see langword="true"/> if an object could be returned, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Count">
            <summary>
            Gets the number of items currently enqueued in the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.GetEnumerator">
            <summary>
            Gets an enumerator over the items in the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Add(`0)">
            <inheritdoc cref="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Enqueue(`0)"/>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Clear">
            <summary>
            Dequeues all items from the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.</param>
            <returns>The <see langword="true"/> if <paramref name="item"/> is found in the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the queue to a specified array starting at a given index.
            </summary>
            <param name="array">The destination array where the elements from the queue will be copied.</param>
            <param name="arrayIndex">The starting index in the destination array where copying begins.</param>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Remove(`0)">
            <summary>
            Always returns <see langword="false"/>. Items cannot be directly removed from a <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>;
            </summary>
            <param name="item">The item to remove from the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/>.</param>
            <returns><see langword="false"/> unconditionally.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1.Resize(System.Int32)">
            <summary>
            Resizes the internal backing store of the <see cref="T:LaquaiLib.Collections.LimitedCollections.LimitedQueue`1"/> to the specified <paramref name="size"/>.
            The oldest items beyond the new size are discarded.
            </summary>
            <param name="size">The number of items to allow in the collection.</param>
        </member>
        <member name="T:LaquaiLib.Collections.MultiKeyDictionary`1">
            <summary>
            Implements a dictionary that maps keys and specific orders of those keys to values.
            </summary>
            <typeparam name="TValue">The type of the values in the dictionary.</typeparam>
            <remarks>
            <see langword="struct"/>s used for the keys in this dictionary will be boxed. This incurs an allocation and performance penalty.
            <para/>The <see langword="string"/> keys <c>"foo"</c> and <c>"bar"</c> are, used by themselves, entirely independent of the key combinations <c>("foo", "bar")</c> and <c>("bar", "foo")</c>.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.#ctor">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.MultiKeyDictionary`1"/> with no backing storage allocated.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Collections.MultiKeyDictionary`1"/> with the specified capacity for the specified most likely key count.
            </summary>
            <param name="capacity">The initial capacity of the dictionary.</param>
            <param name="mostLikelyKeyCount">The number of keys that will be used most likely.</param>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.TryAllocate(System.Int32)">
            <summary>
            Checks whether a backing storage for the specified number of keys is allocated and allocates it if not.
            </summary>
            <param name="keyCount">The number of keys to allocate the backing storage for.</param>
            <returns><see langword="false"/> if the backing storage needed to be allocated by the call to this method, otherwise <see langword="true"/> (i.e. the backing storage was already allocated).</returns>
            <remarks>
            Multiple calls to this method have no effect after the backing storage has been allocated. To clear the backing storage associated with the specified <paramref name="keyCount"/>, use <see cref="M:LaquaiLib.Collections.MultiKeyDictionary`1.Clear(System.Int32)"/>.
            </remarks>
        </member>
        <member name="P:LaquaiLib.Collections.MultiKeyDictionary`1.Item(System.ReadOnlySpan{System.Object})">
            <summary>
            Gets or sets the value associated with the specified keys.
            </summary>
            <param name="keys">The keys to get or set the value for.</param>
            <returns>The value associated with the specified keys.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.GetValue(System.Object[])">
            <summary>
            Gets the value associated with the specified keys.
            </summary>
            <param name="keys">The keys to get or set the value for.</param>
            <returns>The value associated with the specified keys.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.GetValue(System.ReadOnlySpan{System.Object})">
            <inheritdoc cref="M:LaquaiLib.Collections.MultiKeyDictionary`1.GetValue(System.Object[])"/>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.TryGetValue(System.Object[],`0@)">
            <summary>
            Gets the value associated with the specified keys.
            </summary>
            <param name="keys">The keys to get or set the value for.</param>
            <param name="value">An <see langword="out"/> variable that receives the value associated with the specified keys.</param>
            <returns>The value associated with the specified keys.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.TryGetValue(System.ReadOnlySpan{System.Object},`0@)">
            <inheritdoc cref="M:LaquaiLib.Collections.MultiKeyDictionary`1.TryGetValue(System.Object[],`0@)"/>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.SetValue(System.Object[],`0)">
            <summary>
            Sets the value associated with the specified keys.
            </summary>
            <param name="keys">The keys to get or set the value for.</param>
            <param name="value">The value to associate with the specified keys.</param>
            <returns>The value associated with the specified keys.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.SetValue(System.ReadOnlySpan{System.Object},`0)">
            <inheritdoc cref="M:LaquaiLib.Collections.MultiKeyDictionary`1.SetValue(System.Object[],`0)"/>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.Add(System.Object[],`0)">
            <summary>
            Sets the value associated with the specified keys if that combination does not already exist.
            If it does, an <see cref="T:System.ArgumentException"/> is thrown.
            </summary>
            <param name="keys">The keys to set the value for.</param>
            <param name="value">The value to associate with the specified keys.</param>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.Add(System.ReadOnlySpan{System.Object},`0)">
            <inheritdoc cref="M:LaquaiLib.Collections.MultiKeyDictionary`1.Add(System.Object[],`0)"/>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.TryAdd(System.Object[],`0)">
            <summary>
            Sets the value associated with the specified keys if that combination does not already exist.
            </summary>
            <param name="keys">The keys to set the value for.</param>
            <param name="value">The value to associate with the specified keys.</param>
            <returns><see langword="true"/> if the call to this method added the key-value pair, otherwise <see langword="false"/> (that is, the key combination already existed).</returns>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.TryAdd(System.ReadOnlySpan{System.Object},`0)">
            <inheritdoc cref="M:LaquaiLib.Collections.MultiKeyDictionary`1.TryAdd(System.Object[],`0)"/>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.Clear">
            <summary>
            Removes all values from the backing storage.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.Clear(System.Int32)">
            <summary>
            Clears the backing storage associated with the specified number of keys.
            </summary>
            <param name="keyCount">The number of keys to clear the backing storage for.</param>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.GetRef(System.ReadOnlySpan{System.Object},System.Boolean,System.Boolean@)">
            <summary>
            Gets a <see langword="ref"/> into the backing storage of the corresponding dictionary for the specified keys.
            If <paramref name="addDefault"/> is <see langword="false"/>, that <see langword="ref"/> may be <see langword="null"/>.
            </summary>
            <param name="keys">The keys to get the <see langword="ref"/> for.</param>
            <param name="addDefault">Whether to add a default value if the key is not found (or even allocate the entire dictionary if it is <see langword="null"/>).</param>
            <param name="existed">An <see langword="out"/> variable that indicates whether the accessed dictionary was allocated and the key was present in the dictionary.</param>
            <returns>A <see langword="ref"/> into the backing storage of the corresponding dictionary for the specified keys.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.GetOrAdd(System.ReadOnlySpan{System.Object},`0)">
            <summary>
            Gets the value associated with the specified keys or adds a new key-value pair if the key combination does not already exist.
            </summary>
            <param name="keys">The keys of the value to get or add.</param>
            <param name="addValue">The value to be added for an absent key combination. If the keys are absent, the return value is this value.</param>
            <returns>The value associated with the specified key, if the key is found, otherwise <paramref name="addValue"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.GetOrAdd(System.ReadOnlySpan{System.Object},System.Func{`0})">
            <summary>
            Gets the value associated with the specified keys or adds a new key-value pair to the dictionary if the key combination does not already exist.
            </summary>
            <param name="keys">The keys of the value to get or add.</param>
            <param name="addValueFactory">A factory <see cref="T:System.Func`1"/> that produces the value to be added for an absent key combination. If the keys are absent, the return value is the produced value.</param>
            <returns>The value associated with the specified key, if the key is found, otherwise the value produced by <paramref name="addValueFactory"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.GetOrAdd(System.ReadOnlySpan{System.Object},`0,`0@)">
            <summary>
            Gets the value associated with the specified keys or adds a new key-value pair to the dictionary if the key combination does not exist.
            </summary>
            <param name="keys">The keys of the value to get or add.</param>
            <param name="addValue">The value to add to the dictionary if the key combination does not exist.</param>
            <param name="element">An <see langword="out"/> variable that receives the value associated with the specified keys or the added value.</param>
            <returns><see langword="true"/> if the key was found in the dictionary, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the <see cref="T:System.Collections.Generic.IDictionary`2"/> is not mutable.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.GetOrAdd(System.ReadOnlySpan{System.Object},System.Func{`0},`0@)">
            <summary>
            Gets the value associated with the specified keys or adds a new key-value pair produced by a factory to the dictionary if the key combination does not exist.
            </summary>
            <param name="keys">The keys of the value to get or add.</param>
            <param name="addValueFactory">A factory <see cref="T:System.Func`1"/> that produces the value to add to the dictionary if the key combination does not exist. This overload is useful when constructing the value is expensive and should only be done when necessary.</param>
            <param name="element">An <see langword="out"/> variable that receives the value associated with the specified keys or the added value.</param>
            <returns><see langword="true"/> if the key was found in the dictionary, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.AddOrUpdate(System.ReadOnlySpan{System.Object},`0,System.Func{`0,`0})">
            <summary>
            Adds a key-value pair to the dictionary if the key combination does not already exist. Otherwise, a factory <see cref="T:System.Func`2"/> that produces a new value is invoked with the existing value.
            </summary>
            <param name="keys">The keys of the element to add or update.</param>
            <param name="addValue">The value to be added for an absent key combination.</param>
            <param name="updateValueFactory">A factory <see cref="T:System.Func`2"/> that takes the existing value for a key and produces a new value.</param>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.AddOrUpdate(System.ReadOnlySpan{System.Object},`0,System.Func{`0,`0,`0})">
            <summary>
            Adds a key-value pair to the dictionary if the key combination does not already exist. Otherwise, a factory <see cref="T:System.Func`3"/> that produces a new value is invoked with the existing value and <paramref name="addValue"/>.
            </summary>
            <param name="keys">The keys of the element to add or update.</param>
            <param name="addValue">The value to be added for an absent key combination.</param>
            <param name="updateValueFactory">A factory <see cref="T:System.Func`3"/> that takes the existing value for a key and <paramref name="addValue"/> itself and produces a new value. This avoids having to materialize the value twice.</param>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.AddOrUpdate(System.ReadOnlySpan{System.Object},System.Func{`0},System.Func{`0,`0})">
            <summary>
            Adds a key-value pair to the dictionary where the value is produced by <paramref name="addValueFactory"/> if the key combination does not already exist. Otherwise, a factory <see cref="T:System.Func`2"/> that produces a new value is invoked with the existing value.
            </summary>
            <param name="keys">The keys of the element to add or update.</param>
            <param name="addValueFactory">A <see cref="T:System.Func`1"/> that produces the value to be added for an absent key combination. It is only invoked if the key combination does not already exist in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <param name="updateValueFactory">A factory <see cref="T:System.Func`3"/> that takes the existing value for a key and produces a new value.</param>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.GetValueRefOrNullRef(System.ReadOnlySpan{System.Object},System.Boolean@)">
            <summary>
            Returns a <see langword="ref"/> into the storage to where the value was found if the key-value pair was present, otherwise returns a <see langword="null"/> <see langword="ref"/>.
            If <paramref name="existed"/> is <see langword="false"/> when control returns to the caller, using the returned <see langword="ref"/> is undefined behavior and will likely result in a <see cref="T:System.NullReferenceException"/>.
            </summary>
            <param name="keys">The keys of the value to get.</param>
            <param name="existed">An <see langword="out"/> variable that indicates whether the key-value pair was present.</param>
            <returns>A <see langword="ref"/> into the storage to where the value was found if the key-value pair was present, otherwise a <see langword="null"/> <see langword="ref"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.GetValueRefOrAddDefault(System.ReadOnlySpan{System.Object},System.Boolean@)">
            <summary>
            Checks if the dictionary contains a key-value pair with the specified <paramref name="keys"/>, adds the <see langword="default"/> for <typeparamref name="TValue"/> if not and returns a <see langword="ref"/> into that storage.
            </summary>
            <param name="keys">The keys of the value to get.</param>
            <param name="existed">An <see langword="out"/> variable that indicates whether the key-value pair was present.</param>
            <returns>A <see langword="ref"/> to where the value was found.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.GetValueRefOrAdd(System.ReadOnlySpan{System.Object},`0,System.Boolean@)">
            <summary>
            Checks if the dictionary contains a key-value pair with the specified <paramref name="keys"/>, adds one with the specified <paramref name="value"/> if not and returns a <see langword="ref"/> into that storage.
            </summary>
            <param name="keys">The keys of the value to get or add.</param>
            <param name="value">The value to add if the key combination does not exist.</param>
            <param name="existed">An <see langword="out"/> variable that indicates whether the key-value pair was present.</param>
            <returns>A <see langword="ref"/> to where the value was found.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.MultiKeyDictionary`1.GetValueRefOrAdd(System.ReadOnlySpan{System.Object},System.Func{`0},System.Boolean@)">
            <summary>
            Checks if the dictionary contains a key-value pair with the specified <paramref name="keys"/>, adds one with the value produced by <paramref name="valueFactory"/> if not and returns a <see langword="ref"/> into that storage.
            </summary>
            <param name="keys">The keys of the value to get or add.</param>
            <param name="valueFactory">A factory <see cref="T:System.Func`1"/> that produces the value to add if the key combination does not exist.</param>
            <param name="existed">An <see langword="out"/> variable that indicates whether the key-value pair was present.</param>
            <returns>A <see langword="ref"/> to where the value was found.</returns>
        </member>
        <member name="P:LaquaiLib.Collections.MultiKeyDictionary`1.Keys">
            <summary>
            Creates an array of all keys in the dictionary (that is, the array is a shallow copy of the keys).
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.MultiKeyDictionary`1.Values">
            <summary>
            Enumerates all values in the dictionary, regardless of the number of keys used to store them.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of all values in the dictionary.</returns>
        </member>
        <member name="T:LaquaiLib.Collections.Observable.AddedEventArgs`1">
            <summary>
            Represents the event arguments for the Added event.
            </summary>
            <typeparam name="T">The type of the item being added.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.AddedEventArgs`1"/> class.
            </remarks>
            <param name="item">The item that was added.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.AddedEventArgs`1.#ctor(`0)">
            <summary>
            Represents the event arguments for the Added event.
            </summary>
            <typeparam name="T">The type of the item being added.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.AddedEventArgs`1"/> class.
            </remarks>
            <param name="item">The item that was added.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.AddedEventArgs`1.Item">
            <summary>
            Gets the item that was added.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.Observable.IndexGetEventArgs">
            <summary>
            Represents the event arguments for the IndexGet event.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.IndexGetEventArgs"/> class.
            </remarks>
            <param name="index">The index being accessed.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.IndexGetEventArgs.#ctor(System.Int32)">
            <summary>
            Represents the event arguments for the IndexGet event.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.IndexGetEventArgs"/> class.
            </remarks>
            <param name="index">The index being accessed.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.IndexGetEventArgs.Index">
            <summary>
            Gets the index being accessed.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.Observable.IndexSetEventArgs">
            <summary>
            Represents the event arguments for the IndexSet event.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.IndexSetEventArgs"/> class.
            </remarks>
            <param name="index">The index being accessed.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.IndexSetEventArgs.#ctor(System.Int32)">
            <summary>
            Represents the event arguments for the IndexSet event.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.IndexSetEventArgs"/> class.
            </remarks>
            <param name="index">The index being accessed.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.IndexSetEventArgs.Index">
            <summary>
            Gets the index being accessed.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.Observable.ObservableCollectionFast`1">
            <summary>
            Represents a fast implementation of a dynamic data collection that provides notifications when items get added, removed, or when the whole list is refreshed.
            </summary>
            <typeparam name="T">The Type of the elements in the collection.</typeparam>
        </member>
        <member name="F:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.items">
            <summary>
            Gets the backing store of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.IsSilenced">
            <summary>
            Whether the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> is silenced. No registered events are raised, not even ones manually triggered using <see cref="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.KeepOrdered">
            <summary>
            Whether the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> should keep itself ordered. When this is <see langword="true"/>, whenever the collection is modified in a way that raises a <see cref="T:System.Collections.Specialized.NotifyCollectionChangedAction"/> event, it is sorted using <see cref="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Comparer"/>.
            Assigning a new <see cref="T:System.Boolean"/> value will cause the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to be sorted using the currently set <see cref="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Comparer"/> immediately. This also raises a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Comparer">
            <summary>
            The <see cref="T:System.Collections.Generic.IComparer`1"/> used to compare elements in the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> if <see cref="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.KeepOrdered"/> is <see langword="true"/>.
            <para/>
            <para/>Assigning a new <see cref="T:System.Collections.Generic.IComparer`1"/> will cause the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> to be sorted using the new <see cref="T:System.Collections.Generic.IComparer`1"/> immediately. This also raises a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Filter">
            <summary>
            A <see cref="T:System.Func`2"/> that determines whether an element should be included when enumerating the collection.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.#ctor">
            <summary>
            Initializes a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that contains elements copied from the specified collection.
            </summary>
            <param name="collection">The collection from which the elements are copied.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Initializes a new <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> that contains elements copied from the specified span.
            </summary>
            <param name="span">The <see cref="T:System.ReadOnlySpan`1"/> of <typeparamref name="T"/> from which the elements are copied.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Item(System.Index)">
            <summary>
            Gets or sets the element at the specified <paramref name="index"/>.
            </summary>
            <param name="index">An <see cref="T:System.Index"/> instance that identifies the location of the element to get or set.</param>
            <returns>The element at the specified <paramref name="index"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Item(System.Range)">
            <summary>
            Gets or sets elements within the specified <paramref name="range"/>.
            </summary>
            <param name="range">The <see cref="T:System.Range"/> in which to get or set elements.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items that were get or set.</returns>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets elements within a range as specified by <paramref name="index"/> and <paramref name="count"/>.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to get or set.</param>
            <param name="count">The number of elements to get or set.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> containing the items that were get or set.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Silenced(System.Action)">
            <summary>
            Executes the specified <paramref name="action"/>. For its entire context, the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> is silenced, then the previous state is restored (that is, if the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> was silenced before, this is the same as calling <paramref name="action"/> directly).
            </summary>
            <param name="action">The <see cref="T:System.Action"/> to execute.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Unsilenced(System.Action)">
            <summary>
            Executes the specified <paramref name="action"/>. For its entire context, the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> is unsilenced, then the previous state is restored (that is, if the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> was unsilenced before, this is the same as calling <paramref name="action"/> directly).
            </summary>
            <param name="action">The <see cref="T:System.Action"/> to execute.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Sort">
            <summary>
            Orders the elements in the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> using the <see cref="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Comparer"/> or the default <see cref="T:System.Collections.Generic.Comparer`1"/> if <see cref="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Comparer"/> is <see langword="null"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.SortSilent">
            <summary>
            Silently orders the elements in the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> using the <see cref="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Comparer"/> or the default <see cref="T:System.Collections.Generic.Comparer`1"/> if <see cref="P:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Comparer"/> is <see langword="null"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event to be fired.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Add(`0)">
            <inheritdoc cref="M:System.Collections.Generic.ICollection`1.Add(`0)"/>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.AddRangeSilent(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Silently adds the elements of the specified collection to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> event to be fired.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.AddSilent(`0)">
            <summary>
            Silently adds an element to the end of this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> event to be fired.
            </summary>
            <param name="item">The item to add to the end of this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Insert(System.Int32,`0)">
            <summary>
            Inserts the specified <paramref name="item"/> into the collection at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index at which the <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.InsertSilent(System.Int32,`0)">
            <summary>
            Silently inserts the specified <paramref name="item"/> into the collection at the specified <paramref name="index"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> event to be fired.
            </summary>
            <param name="index">The zero-based index at which the <paramref name="item"/> should be inserted.</param>
            <param name="item">The object to insert.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.InsertRangeSilent(System.Int32,System.ReadOnlySpan{`0})">
            <summary>
            Silently inserts the specified <paramref name="items"/> into the collection at the specified <paramref name="index"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> event to be fired.
            </summary>
            <param name="index">The zero-based index at which the <paramref name="items"/> should be inserted.</param>
            <param name="items">The objects to insert.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.InsertRange(System.Int32,System.ReadOnlySpan{`0})">
            <summary>
            Inserts the specified <paramref name="items"/> into the collection at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The zero-based index at which the <paramref name="items"/> should be inserted.</param>
            <param name="items">The objects to insert.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Move(System.Int32,System.Int32)">
            <summary>
            Moves the item at index <paramref name="i"/> to index <paramref name="j"/>.
            Surrounding elements are shifted accordingly.
            </summary>
            <param name="i">The index of the item to move.</param>
            <param name="j">The index to move the item to.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.MoveSilent(System.Int32,System.Int32)">
            <summary>
            Silently moves the item at index <paramref name="i"/> to index <paramref name="j"/>.
            Surrounding elements are shifted accordingly.
            This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Move"/> event to be fired.
            </summary>
            <param name="i">The index of the item to move.</param>
            <param name="j">The index to move the item to.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when <paramref name="i"/> or <paramref name="j"/> are out of range.</exception>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.ClearSilent">
            <summary>
            Silently clears this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event to be fired.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Clear">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Reset(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Resets this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> by clearing it (silently) and re-filling it using the specified <paramref name="collection"/>.
            </summary>
            <param name="collection">The collection to fill this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> with.</param>
            <remarks>
            The clearing operation itself is silent, but the re-filling operation is not; that is, observers of the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> will only be notified AFTER the re-filling operation is complete.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Remove(`0)">
            <summary>
            Removes an element from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="item">The item to remove from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Remove(System.Func{`0,System.Boolean})">
            <summary>
            Removes all elements from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> as dictated by a <paramref name="selector"/> <see cref="T:System.Func`2"/>.
            </summary>
            <param name="selector">A <see cref="T:System.Func`2"/> that determines whether an element should be removed.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.RemoveRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Removes all occurrences of the specified items from the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.
            </summary>
            <param name="collection">A sequence of values to remove from this <see cref="T:LaquaiLib.Collections.Observable.ObservableCollectionFast`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.RemoveSilent(`0)">
            <summary>
            Silently removes an element from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Add"/> event to be fired.
            </summary>
            <param name="item">The item to remove from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.RemoveSilent(System.Func{`0,System.Boolean})">
            <summary>
            Silently removes all elements from this <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> as dictated by a <paramref name="selector"/> <see cref="T:System.Func`2"/>. This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"/> event to be fired.
            </summary>
            <param name="selector">A <see cref="T:System.Func`2"/> that determines whether an element should be removed.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.RemoveAt(System.Int32)" -->
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.RemoveAtSilent(System.Int32)">
            <summary>
            Silently removes the item at the specified <paramref name="index"/>.
            This causes no <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Remove"/> event to be fired.
            </summary>
            <param name="index">The index of the item to remove.</param>
            <returns>The item that was removed.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.Contains(`0)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.IndexOf(`0,System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Searches for the specified <paramref name="item"/> in the collection using the specified <paramref name="comparer"/>, skipping the first <paramref name="startIndex"/> elements.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing elements, or <see langword="null"/> to use the default comparer.</param>
            <param name="startIndex">The index at which to start the search.</param>
            <returns>The index of the first occurrence of the specified <paramref name="item"/> in the collection, or -1 if the <paramref name="item"/> is not found.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.LastIndexOf(`0,System.Collections.Generic.IEqualityComparer{`0},System.Int32)">
            <summary>
            Searches for the specified <paramref name="item"/> in the collection in reverse using the specified <paramref name="comparer"/>, skipping the last <paramref name="startIndex"/> elements.
            </summary>
            <param name="item">The item to search for.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing elements, or <see langword="null"/> to use the default comparer.</param>
            <param name="startIndex">The index at which to start the search, or <c>-1</c> to start with the last element.</param>
            <returns>The index of the first occurrence of the specified <paramref name="item"/> in the collection, or -1 if the <paramref name="item"/> is not found.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.CopyTo(`0[],System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="E:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.CollectionChanged">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.RaiseCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <summary>
            Raises a <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> event. Changes made to the <see cref="T:System.Collections.ObjectModel.ObservableCollection`1"/> by any methods with a "Silent" suffix will not be propagated to observers until this method is called.
            </summary>
            <paramref name="e"/>The <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> to pass to observers. If <see langword="null"/>, a <see cref="T:System.Collections.Specialized.NotifyCollectionChangedEventArgs"/> with <see cref="F:System.Collections.Specialized.NotifyCollectionChangedAction.Reset"/> will be passed.
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ObservableCollectionFast`1.OnCollectionChanged(System.Collections.Specialized.NotifyCollectionChangedEventArgs)">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Collections.Observable.RangeAddedEventArgs`1">
            <summary>
            Represents the event arguments for the RangeAdded event.
            </summary>
            <typeparam name="T">The type of the items being added.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.RangeAddedEventArgs`1"/> class.
            </remarks>
            <param name="items">The items that were added.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.RangeAddedEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Represents the event arguments for the RangeAdded event.
            </summary>
            <typeparam name="T">The type of the items being added.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.RangeAddedEventArgs`1"/> class.
            </remarks>
            <param name="items">The items that were added.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.RangeAddedEventArgs`1.Items">
            <summary>
            Gets the items that were added.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.Observable.RangeGetEventArgs">
            <summary>
            Represents the event arguments for the RangeGet event.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.RangeGetEventArgs"/> class.
            </remarks>
            <param name="index">The starting index of the range being accessed.</param>
            <param name="count">The number of items in the range being accessed.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.RangeGetEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Represents the event arguments for the RangeGet event.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.RangeGetEventArgs"/> class.
            </remarks>
            <param name="index">The starting index of the range being accessed.</param>
            <param name="count">The number of items in the range being accessed.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.RangeGetEventArgs.Index">
            <summary>
            Gets the starting index of the range being accessed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.RangeGetEventArgs.Count">
            <summary>
            Gets the number of items in the range being accessed.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.Observable.RangeRemovedEventArgs`1">
            <summary>
            Represents the event arguments for the RangeRemoved event.
            </summary>
            <typeparam name="T">The type of the items being removed.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.RangeRemovedEventArgs`1"/> class.
            </remarks>
            <param name="items">The items that were removed.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.RangeRemovedEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Represents the event arguments for the RangeRemoved event.
            </summary>
            <typeparam name="T">The type of the items being removed.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.RangeRemovedEventArgs`1"/> class.
            </remarks>
            <param name="items">The items that were removed.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.RangeRemovedEventArgs`1.Items">
            <summary>
            Gets the items that were removed.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.Observable.RangeSetEventArgs">
            <summary>
            Represents the event arguments for the RangeSet event.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.RangeSetEventArgs"/> class.
            </remarks>
            <param name="index">The starting index of the range being accessed.</param>
            <param name="count">The number of items in the range being accessed.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.RangeSetEventArgs.#ctor(System.Int32,System.Int32)">
            <summary>
            Represents the event arguments for the RangeSet event.
            </summary>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.RangeSetEventArgs"/> class.
            </remarks>
            <param name="index">The starting index of the range being accessed.</param>
            <param name="count">The number of items in the range being accessed.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.RangeSetEventArgs.Index">
            <summary>
            Gets the starting index of the range being accessed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.RangeSetEventArgs.Count">
            <summary>
            Gets the number of items in the range being accessed.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.Observable.RemovedEventArgs`1">
            <summary>
            Represents the event arguments for the Removed event.
            </summary>
            <typeparam name="T">The type of the item being removed.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.RemovedEventArgs`1"/> class.
            </remarks>
            <param name="item">The item that was removed.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.RemovedEventArgs`1.#ctor(`0)">
            <summary>
            Represents the event arguments for the Removed event.
            </summary>
            <typeparam name="T">The type of the item being removed.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.RemovedEventArgs`1"/> class.
            </remarks>
            <param name="item">The item that was removed.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.RemovedEventArgs`1.Item">
            <summary>
            Gets the item that was removed.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.Observable.ResetEventArgs`1">
            <summary>
            Represents the event arguments for the Reset event.
            </summary>
            <typeparam name="T">The type of the new contents.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.ResetEventArgs`1"/> class.
            </remarks>
            <param name="newContents">The new contents.</param>
        </member>
        <member name="M:LaquaiLib.Collections.Observable.ResetEventArgs`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Represents the event arguments for the Reset event.
            </summary>
            <typeparam name="T">The type of the new contents.</typeparam>
            <remarks>
            Initializes a new instance of the <see cref="T:LaquaiLib.Collections.Observable.ResetEventArgs`1"/> class.
            </remarks>
            <param name="newContents">The new contents.</param>
        </member>
        <member name="P:LaquaiLib.Collections.Observable.ResetEventArgs`1.NewContents">
            <summary>
            Gets the new contents.
            </summary>
        </member>
        <member name="T:LaquaiLib.Collections.TwoWayLookup`2">
            <summary>
            Represents a two-way lookup table where entries can be looked up by either key or value and are guaranteed to be unique.
            Automatic enumeration is supported in the forward direction using standard <see cref="T:System.Collections.Generic.IEnumerable`1"/> methods.
            For (manual-only) reverse enumeration, use <see cref="M:LaquaiLib.Collections.TwoWayLookup`2.GetReverseEnumerator"/>.
            </summary>
            <remarks>
            This type is not thread-safe.
            </remarks>
        </member>
        <member name="P:LaquaiLib.Collections.TwoWayLookup`2.Count">
            <summary>
            Gets the number of key-value pairs in the lookup table.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.AddForward(`0,`1)">
            <summary>
            Adds a new entry to the lookup table by the first type parameter <typeparamref name="T1"/>. An exception is thrown if either the key or the value already exists.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.AddReverse(`1,`0)">
            <summary>
            Adds a new entry to the lookup table by the second type parameter <typeparamref name="T2"/>. An exception is thrown if either the key or the value already exists.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryAddForward(`0,`1)">
            <summary>
            Attempts to add a new entry to the lookup table by the first type parameter <typeparamref name="T1"/>.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns><see langword="true"/> if the key-value pair could be added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryAddReverse(`1,`0)">
            <summary>
            Attempts to add a new entry to the lookup table by the second type parameter <typeparamref name="T2"/>.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns><see langword="true"/> if the key-value pair could be added, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.Add(`0,`1)">
            <summary>
            Adds a new entry to the lookup table.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.Add(`1,`0)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryAdd(`0,`1)">
            <summary>
            Attempts to add a new entry to the lookup table.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryAdd(`1,`0)">
            <inheritdoc cref="M:LaquaiLib.Collections.TwoWayLookup`2.TryAdd(`0,`1)"/>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.GetForward(`0)">
            <summary>
            Retrieves an entry from the lookup table by its key. An exception is thrown if there is no entry with the given key.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>The value associated with the given key.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.GetReverse(`1)">
            <summary>
            Retrieves an entry from the lookup table by its value. An exception is thrown if there is no entry with the given value.
            </summary>
            <param name="value">The value of the entry.</param>
            <returns>The key associated with the given value.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.SetForward(`0,`1)">
            <summary>
            Sets a key-value pair in the lookup table and returns <paramref name="value"/>.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns>A reference to <paramref name="value"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.SetReverse(`1,`0)">
            <summary>
            Sets a key-value pair in the lookup table and returns <paramref name="value"/>.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">The value of the entry.</param>
            <returns>A reference to <paramref name="value"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Collections.TwoWayLookup`2.Item(`0)">
            <summary>
            Gets or sets an entry in the lookup table.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns>The value associated with the given key.</returns>
        </member>
        <member name="P:LaquaiLib.Collections.TwoWayLookup`2.Item(`1)">
            <summary>
            Gets or sets an entry in the lookup table.
            </summary>
            <param name="key">The value of the entry.</param>
            <returns>The key associated with the given value.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryGetForward(`0,`1@)">
            <summary>
            Attempts to retrieve an entry from the lookup table by its key.
            </summary>
            <param name="key">The key of the entry.</param>
            <param name="value">An <c>out</c> <typeparamref name="T2"/> variable that receives the retrieved value.</param>
            <returns><see langword="true"/> if there was a value associated with the key, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryGetReverse(`1,`0@)">
            <summary>
            Attempts to retrieve an entry from the lookup table by its value.
            </summary>
            <param name="value">The value of the entry.</param>
            <param name="key">An <c>out</c> <typeparamref name="T1"/> variable that receives the retrieved key.</param>
            <returns><see langword="true"/> if there was a key associated with the value, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.RemoveForward(`0)">
            <summary>
            Removes an entry from the lookup table by its key. An exception is thrown if there is no entry with the given key.
            </summary>
            <param name="key">The key of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.RemoveReverse(`1)">
            <summary>
            Removes an entry from the lookup table by its value. An exception is thrown if there is no entry with the given value.
            </summary>
            <param name="value">The value of the entry.</param>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryRemoveForward(`0)">
            <summary>
            Attempts to remove an entry from the lookup table by its key.
            </summary>
            <param name="key">The key of the entry.</param>
            <returns><see langword="true"/> if there was a value associated with the key that could be removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.TryRemoveReverse(`1)">
            <summary>
            Attempts to remove an entry from the lookup table by its value.
            </summary>
            <param name="value">The value of the entry.</param>
            <returns><see langword="true"/> if there was a key associated with the value that could be removed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.Clear">
            <summary>
            Removes all entries from the lookup table.
            </summary>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.GetEnumerator">
            <summary>
            Gets an enumerator that, by default, iterates through the forward collection as <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.
            </summary>
            <returns>An enumerator that can be used to iterate through the forward collection.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{T1,T2}}#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the forward collection as <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.
            </summary>
            <returns>An enumerator that can be used to iterate through the forward collection.</returns>
        </member>
        <member name="M:LaquaiLib.Collections.TwoWayLookup`2.GetReverseEnumerator">
            <summary>
            Returns an enumerator that iterates through the reverse collection as <see cref="T:System.Collections.Generic.KeyValuePair`2"/>s.
            </summary>
            <returns>An enumerator that can be used to iterate through the reverse collection.</returns>
        </member>
        <member name="T:LaquaiLib.Dynamic.FullAccessDynamic`1">
            <summary>
            Represents a dynamic object that allows access to all properties and methods of the wrapped object as if they were <see langword="public"/>, regardless of their actual access level.
            <para/>Note that all dynamically retrieved members are also instances of <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/> to allow for further dynamic access. The only value explicitly propagated to allow <c>?.</c> <see langword="null"/> propagation is <see langword="null"/>. This does <b>not</b> work directly on an object of type <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/>, i.e. the following method invocation will always take place:
            <code language="csharp">
            MyClass? myInstance = null;
            var myFullAccessDynamic = FullAccessDynamic.Create(typeof(MyClass), myInstance);
            // This incovation will happen no matter if the underlying object myInstance is null or not, because the null propagation will check the FullAccessDynamic instance, rather than the underlying object
            myFullAccessDynamic?.MyMethod();
            // These ones will not, however, if MyProperty is null or MyNullReturningMethod returns null
            myFullAccessDynamic.MyProperty?.MyMethod();
            myFullAccessDynamic.MyNullReturningMethod()?.MyMethod();
            </code>
            <para/><b>Warning!</b> Nothing prevents the underlying object instance of <typeparamref name="T"/> from being <see langword="null"/>. As such, <see cref="M:LaquaiLib.Dynamic.FullAccessDynamic`1.Unwrap"/> may return <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.GetDynamicMemberNames">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.Unwrap">
            <summary>
            Returns the underlying <typeparamref name="T"/> instance.
            </summary>
            <returns>The underlying <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.GetFirstNonNull``1(System.Func{System.Reflection.BindingFlags,``0})">
            <summary>
            Executes a <see cref="T:System.Func`2"/> that is passed each <see cref="T:System.Reflection.BindingFlags"/> value in order of preference, and returns the result of the first non-null invocation.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of the first non-null invocation of <paramref name="func"/> or <see langword="null"/> if all invocations return <see langword="null"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.op_Equality(LaquaiLib.Dynamic.FullAccessDynamic{`0},System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.op_Inequality(LaquaiLib.Dynamic.FullAccessDynamic{`0},System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamic`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Dynamic.FullAccessDynamicFactory">
            <summary>
            Provides static factory methods for <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/> instances.
            </summary>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamicFactory.Create``1">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/> that wraps a new instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <returns>A new instance of <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/> that wraps a new instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamicFactory.Create``1(``0)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/> that wraps the specified instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <param name="instance">The instance to wrap.</param>
            <returns>A new instance of <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/> that wraps the specified instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamicFactory.Create(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps a new instance of that type.
            </summary>
            <param name="type">The type of the object to wrap.</param>
            <returns>A new instance of <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps a new instance of that type.</returns>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamicFactory.Create(System.Type,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps the specified object <paramref name="instance"/>. This may be <see langword="null"/>.
            </summary>
            <param name="type">The type of the object to wrap.</param>
            <param name="instance">The instance to wrap.</param>
            <returns>A new instance of <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps the specified object <paramref name="instance"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Dynamic.FullAccessDynamicFactory.GetFullAccessDynamic``1(``0)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/> that wraps the current object instance.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <param name="instance">The instance to wrap.</param>
            <returns>The created <see cref="T:LaquaiLib.Dynamic.FullAccessDynamic`1"/> instance.</returns>
        </member>
        <member name="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1">
            <summary>
            Represents a dynamic object that allows access to all properties and methods of the wrapped object as if they were <see langword="public"/>, regardless of their actual access level. All binding failures and binding-related exceptions are swallowed and will result in <see langword="null"/> returns.
            <para/>Note that all dynamically retrieved members are also instances of <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/> to allow for further dynamic access. The only value explicitly propagated to allow <c>?.</c> <see langword="null"/> propagation is <see langword="null"/>. This does <b>not</b> work directly on an object of type <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/>, i.e. the following method invocation will always take place:
            <code language="csharp">
            MyClass? myInstance = null;
            var mySilentFullAccessDynamic = SilentFullAccessDynamic.Create(typeof(MyClass), myInstance);
            // This incovation will happen no matter if the underlying object myInstance is null or not, because the null propagation will check the SilentFullAccessDynamic instance, rather than the underlying object
            mySilentFullAccessDynamic?.MyMethod();
            // These ones will not, however, if MyProperty is null or MyNullReturningMethod returns null
            mySilentFullAccessDynamic.MyProperty?.MyMethod();
            mySilentFullAccessDynamic.MyNullReturningMethod()?.MyMethod();
            </code>
            <para/><b>Warning!</b> Nothing prevents the underlying object instance of <typeparamref name="T"/> from being <see langword="null"/>. As such, <see cref="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.Unwrap"/> may return <see langword="null"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.TryConvert(System.Dynamic.ConvertBinder,System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.TryGetIndex(System.Dynamic.GetIndexBinder,System.Object[],System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.TrySetIndex(System.Dynamic.SetIndexBinder,System.Object[],System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.TryInvoke(System.Dynamic.InvokeBinder,System.Object[],System.Object@)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.GetDynamicMemberNames">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.Unwrap">
            <summary>
            Returns the underlying <typeparamref name="T"/> instance.
            </summary>
            <returns>The underlying <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.GetFirstNonNull``1(System.Func{System.Reflection.BindingFlags,``0})">
            <summary>
            Executes a <see cref="T:System.Func`2"/> that is passed each <see cref="T:System.Reflection.BindingFlags"/> value in order of preference, and returns the result of the first non-null invocation.
            </summary>
            <param name="func">The function to execute.</param>
            <returns>The result of the first non-null invocation of <paramref name="func"/> or <see langword="null"/> if all invocations return <see langword="null"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.op_Equality(LaquaiLib.Dynamic.SilentFullAccessDynamic{`0},System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.op_Inequality(LaquaiLib.Dynamic.SilentFullAccessDynamic{`0},System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamic`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Dynamic.SilentFullAccessDynamicFactory">
            <summary>
            Provides static factory methods for <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/> instances.
            </summary>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamicFactory.Create``1">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/> that wraps a new instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <returns>A new instance of <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/> that wraps a new instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamicFactory.Create``1(``0)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/> that wraps the specified instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <param name="instance">The instance to wrap.</param>
            <returns>A new instance of <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/> that wraps the specified instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamicFactory.Create(System.Type)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps a new instance of that type.
            </summary>
            <param name="type">The type of the object to wrap.</param>
            <returns>A new instance of <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps a new instance of that type.</returns>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamicFactory.Create(System.Type,System.Object)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps the specified object <paramref name="instance"/>. This may be <see langword="null"/>.
            </summary>
            <param name="type">The type of the object to wrap.</param>
            <param name="instance">The instance to wrap.</param>
            <returns>A new instance of <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/> that has the specified <paramref name="type"/> and wraps the specified object <paramref name="instance"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Dynamic.SilentFullAccessDynamicFactory.GetSilentFullAccessDynamic``1(``0)">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/> that wraps the current object instance.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <param name="instance">The instance to wrap.</param>
            <returns>The created <see cref="T:LaquaiLib.Dynamic.SilentFullAccessDynamic`1"/> instance.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.AnyExtensions">
            <summary>
            Provides Extension Methods for all Types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.AllEqual(System.ReadOnlySpan{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Checks whether a number of objects are all equal to each other. If any of the passed objects are <see langword="null"/>, all others must also be <see langword="null"/>.
            Comparing to an empty collection is considered equal.
            </summary>
            <typeparam name="T">The Type of the objects to compare.</typeparam>
            <param name="source">The first object to use for the comparison.</param>
            <param name="other">The remaining objects to use for the comparison.</param>
            <returns><see langword="true"/> if all passed objects are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.AllEqual(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Checks whether a number of objects are all equal to each other. If any of the passed objects are <see langword="null"/>, all others must also be <see langword="null"/>.
            Comparing to an empty collection is considered equal.
            </summary>
            <typeparam name="T">The Type of the objects to compare.</typeparam>
            <param name="source">The first object to use for the comparison.</param>
            <param name="enumerable">The objects to use for the comparison. Enumeration will cease if an object is encountered that is not equal to <paramref name="source"/>.</param>
            <returns><see langword="true"/> if all passed objects are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.EqualBy``1(System.Func{`0,``0},System.ReadOnlySpan{`0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Invokes a <paramref name="transform"/> function on a <paramref name="source"/> and any <paramref name="other"/> objects and checks whether the results are all equal to each other. If any of the passed objects are <see langword="null"/>, all others must also be <see langword="null"/>. In this case, <paramref name="transform"/> is never invoked.
            </summary>
            <typeparam name="T">The Type of the input objects.</typeparam>
            <typeparam name="TCompare">The Type of the results <paramref name="transform"/> yields.</typeparam>
            <param name="source">The first object to use for the comparison.</param>
            <param name="transform">The transform function to invoke on each object before performing the comparison.</param>
            <param name="other">The remaining objects to use for the comparison.</param>
            <returns><see langword="true"/> if all the results produced by <paramref name="transform"/> are all equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.EqualBy``1(System.Func{`0,``0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Invokes a <paramref name="transform"/> function on a <paramref name="source"/> and any other objects and checks whether the results are all equal to each other. If any of the passed objects are <see langword="null"/>, all others must also be <see langword="null"/>.
            </summary>
            <typeparam name="T">The Type of the input objects.</typeparam>
            <typeparam name="TCompare">The Type of the results <paramref name="transform"/> yields.</typeparam>
            <param name="source">The first object to use for the comparison.</param>
            <param name="transform">The transform function to invoke on each object before performing the comparison.</param>
            <param name="enumerable">The remaining objects to use for the comparison.</param>
            <returns><see langword="true"/> if all the results produced by <paramref name="transform"/> are all equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.With(System.Action{`0})">
            <summary>
            Invokes an <paramref name="action"/> that is passed the <paramref name="source"/> object.
            </summary>
            <typeparam name="T">The Type of the object to execute the <paramref name="action"/> on.</typeparam>
            <param name="source">The object to execute the <paramref name="action"/> on.</param>
            <param name="action">The action to execute on the <paramref name="source"/> object.</param>
            <returns>A reference to <paramref name="source"/> itself after <paramref name="action"/> has returned.</returns>
            <remarks>
            While not tremendously useful, this method can be used to effectively limit variable scopes or chain calls to the same object like when using a builder pattern.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.With(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Invokes an asynchronous <paramref name="action"/> that is passed the <paramref name="source"/> object.
            </summary>
            <typeparam name="T">The Type of the object to execute the <paramref name="action"/> on.</typeparam>
            <param name="source">The object to execute the <paramref name="action"/> on.</param>
            <param name="action">The action to execute on the <paramref name="source"/> object.</param>
            <returns>A reference to <paramref name="source"/> itself after <paramref name="action"/> has returned.</returns>
            <remarks>
            While not tremendously useful, this method can be used to effectively limit variable scopes or chain calls to the same object like when using a builder pattern.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.DeepCopy(System.Int32,System.Boolean)">
            <summary>
            Creates an exact copy of an object, including all nested objects, that is independent of the original object.
            </summary>
            <typeparam name="T">The Type of the object to copy.</typeparam>
            <param name="source">The object to copy.</param>
            <param name="depth">The maximum recursion depth to copy nested objects.</param>
            <param name="useRoundTripSerialization">Whether to use a serialization-deserialization round trip to create the copy instead of employing reflection. Note that this may behave differently for certain types if certain fields or properties are not serializable or were marked with <see cref="T:System.NonSerializedAttribute"/>, <see cref="T:System.Text.Json.Serialization.JsonIgnoreAttribute"/> or similar.</param>
            <returns>An exact copy of <paramref name="source"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.AllEqual``1(``0,System.ReadOnlySpan{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.AllEqual(System.ReadOnlySpan{`0},System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.AllEqual``1(``0,System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.AllEqual(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.EqualBy``2(``0,System.Func{``0,``1},System.ReadOnlySpan{``0},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.EqualBy``1(System.Func{`0,``0},System.ReadOnlySpan{`0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.EqualBy``2(``0,System.Func{``0,``1},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.EqualBy``1(System.Func{`0,``0},System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.With``1(``0,System.Action{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.With(System.Action{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.With``1(``0,System.Func{``0,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.With(System.Func{`0,System.Threading.Tasks.Task})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.DeepCopy``1(``0,System.Int32,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.AnyExtensions.<>E__0`1.DeepCopy(System.Int32,System.Boolean)"/>
        </member>
        <member name="P:LaquaiLib.Extensions.AnyExtensions.<>E__1`1.IsNull">
            <summary>
            Checks whether a given input object is <see langword="null"/>. If not, it is marked to the compiler as non-<see langword="null"/>.
            </summary>
            <typeparam name="T">The Type of the input object.</typeparam>
            <param name="source">The input object.</param>
            <returns><see langword="true"/> if <paramref name="source"/> is <see langword="null"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.get_IsNull``1(``0)">
            <inheritdoc cref="P:LaquaiLib.Extensions.AnyExtensions.<>E__1`1.IsNull"/>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.<>E__2.As``1">
            <summary>
            Changes the type of a reference to a <see langword="class"/> instance to <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type to cast <paramref name="obj"/> to.</typeparam>
            <param name="obj">The <see cref="T:System.Object"/> to cast.</param>
            <returns><paramref name="obj"/> reinterpreted as an instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.As``1(System.Object)">
            <inheritdoc cref="M:LaquaiLib.Extensions.AnyExtensions.<>E__2.As``1"/>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.<>E__3`1.With(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Invokes an asynchronous <paramref name="action"/> that is passed the result of the <paramref name="source"/> object's <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="T">The Type of the object to execute the <paramref name="action"/> on.</typeparam>
            <param name="source">The object to execute the <paramref name="action"/> on.</param>
            <param name="action">The action to execute on the <paramref name="source"/> object.</param>
            <returns>A reference to the result of <paramref name="source"/> itself after <paramref name="action"/> has returned.</returns>
            <remarks>
            While not tremendously useful, this method can be used to effectively limit variable scopes or chain calls to the same object like when using a builder pattern.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.AnyExtensions.With``1(System.Threading.Tasks.Task{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:LaquaiLib.Extensions.AnyExtensions.<>E__3`1.With(System.Func{`0,System.Threading.Tasks.Task})"/>
        </member>
        <member name="T:LaquaiLib.Extensions.ArrayExtensionsByte">
            <summary>
            Provides extension methods for the <see cref="T:System.Array"/> of <see cref="T:System.Byte"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensionsByte.<>E__0.ToMemoryStream">
            <summary>
            Creates a resizable <see cref="T:System.IO.MemoryStream"/> from the given <see cref="T:System.Byte"/> array. Its <see cref="P:System.IO.Stream.Position"/> upon return is set to the <see cref="P:System.Array.Length"/> of <paramref name="bytes"/>, i.e. it is not sought to the beginning.
            </summary>
            <param name="bytes">The <see cref="T:System.Byte"/> array to write into the new <see cref="T:System.IO.MemoryStream"/>.</param>
            <returns>The created <see cref="T:System.IO.MemoryStream"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensionsByte.ToMemoryStream(System.Byte[])">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensionsByte.<>E__0.ToMemoryStream"/>
        </member>
        <member name="T:LaquaiLib.Extensions.ArrayExtensions">
            <summary>
            Provides Extension Methods for <see cref="T:System.Array"/> Types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.AsEnumerable``1">
            <summary>
            Reinterprets the reference to <paramref name="source"/> as <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>.
            This allows using Linq methods on multi-dimensional <see cref="T:System.Array"/>s.
            </summary>
            <typeparam name="T">The Type of the items in the array.</typeparam>
            <param name="source">The <see cref="T:System.Array"/> to transform.</param>
            <returns>The reinterpreted reference to <paramref name="source"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.GetSpanProvider``1">
            <summary>
            Gets an <see cref="T:LaquaiLib.Interfaces.ISpanProvider`1"/> for the specified <paramref name="source"/>.
            It must be disposed after use to release the array handle, otherwise this will result in a memory leak.
            </summary>
            <typeparam name="T">The Type of the items in the array.</typeparam>
            <param name="source">The <see cref="T:System.Array"/> to get the <see cref="T:LaquaiLib.Interfaces.ISpanProvider`1"/> for.</param>
            <returns>An <see cref="T:LaquaiLib.Interfaces.ISpanProvider`1"/> implementation that provides a <see cref="T:System.Span`1"/> over the array.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.GetReadOnlySpanProvider``1">
            <summary>
            Gets an <see cref="T:LaquaiLib.Interfaces.ISpanProvider`1"/> for the specified <paramref name="source"/>.
            It must be disposed after use to release the array handle, otherwise this will result in a memory leak.
            </summary>
            <typeparam name="T">The Type of the items in the array.</typeparam>
            <param name="source">The <see cref="T:System.Array"/> to get the <see cref="T:LaquaiLib.Interfaces.ISpanProvider`1"/> for.</param>
            <returns>An <see cref="T:LaquaiLib.Interfaces.ISpanProvider`1"/> implementation that provides a <see cref="T:System.Span`1"/> over the array.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimCopyTo``1(System.Array)">
            <summary>
            Copies the elements of the specified <paramref name="source"/> array to the specified <paramref name="destination"/> array, starting at position <c>0</c> in all dimensions of both arrays.
            </summary>
            <typeparam name="T">The Type of the items in the arrays.</typeparam>
            <param name="source">The array to copy elements from.</param>
            <param name="destination">The array to copy elements to.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimCopyTo``1(System.Array,System.Int32)">
            <summary>
            Copies a range of elements of the specified <paramref name="source"/> array to the specified <paramref name="destination"/> array, starting at position <c>0</c> in all dimensions of both arrays.
            </summary>
            <typeparam name="T">The Type of the items in the arrays.</typeparam>
            <param name="source">The array to copy elements from.</param>
            <param name="destination">The array to copy elements to.</param>
            <param name="length">The total number of elements to copy.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimCopyTo``1(System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
            Copies a range of elements of the specified <paramref name="source"/> array to the specified <paramref name="destination"/> array.
            </summary>
            <typeparam name="T">The Type of the items in the arrays.</typeparam>
            <param name="source">The array to copy elements from.</param>
            <param name="sourceIndex">The index in the source array at which copying begins.</param>
            <param name="destination">The array to copy elements to.</param>
            <param name="destinationIndex">The index in the destination array at which storing begins.</param>
            <param name="length">The total number of elements to copy.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimCopyTo``1(System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements of the specified <paramref name="source"/> array to the specified <paramref name="destination"/> array.
            </summary>
            <typeparam name="T">The Type of the items in the arrays.</typeparam>
            <param name="source">The array to copy elements from.</param>
            <param name="sourceIndex">The index in the source array at which copying begins.</param>
            <param name="destination">The array to copy elements to.</param>
            <param name="destinationIndex">The index in the destination array at which storing begins.</param>
            <param name="length">The total number of elements to copy.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimConstrainedCopyTo``1(System.Array)">
            <summary>
            Copies the elements of the specified <paramref name="source"/> array to the specified <paramref name="destination"/> array, starting at position <c>0</c> in all dimensions of both arrays.
            If the copy attempt fails for any reason, the original data is restored to the <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The Type of the items in the arrays.</typeparam>
            <param name="source">The array to copy elements from.</param>
            <param name="destination">The array to copy elements to.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimConstrainedCopyTo``1(System.Array,System.Int32)">
            <summary>
            Copies a range of elements of the specified <paramref name="source"/> array to the specified <paramref name="destination"/> array, starting at position <c>0</c> in all dimensions of both arrays.
            If the copy attempt fails for any reason, the original data is restored to the <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The Type of the items in the arrays.</typeparam>
            <param name="source">The array to copy elements from.</param>
            <param name="destination">The array to copy elements to.</param>
            <param name="length">The total number of elements to copy.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimConstrainedCopyTo``1(System.Int64,System.Array,System.Int64,System.Int64)">
            <summary>
            Copies a range of elements of the specified <paramref name="source"/> array to the specified <paramref name="destination"/> array.
            If the copy attempt fails for any reason, the original data is restored to the <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The Type of the items in the arrays.</typeparam>
            <param name="source">The array to copy elements from.</param>
            <param name="sourceIndex">The index in the source array at which copying begins.</param>
            <param name="destination">The array to copy elements to.</param>
            <param name="destinationIndex">The index in the destination array at which storing begins.</param>
            <param name="length">The total number of elements to copy.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimConstrainedCopyTo``1(System.Int32,System.Array,System.Int32,System.Int32)">
            <summary>
            Copies a range of elements of the specified <paramref name="source"/> array to the specified <paramref name="destination"/> array.
            If the copy attempt fails for any reason, the original data is restored to the <paramref name="destination"/>.
            </summary>
            <typeparam name="T">The Type of the items in the arrays.</typeparam>
            <param name="source">The array to copy elements from.</param>
            <param name="sourceIndex">The index in the source array at which copying begins.</param>
            <param name="destination">The array to copy elements to.</param>
            <param name="destinationIndex">The index in the destination array at which storing begins.</param>
            <param name="length">The total number of elements to copy.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.TryGetSpan``1(LaquaiLib.Interfaces.ISpanProvider{``0}@,System.Span{``0}@)">
            <summary>
            Attempts to retrieve a <see cref="T:System.Span`1"/> from the specified <paramref name="array"/>.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The array to retrieve the span from.</param>
            <param name="spanProvider">An <see langword="out"/> variable that receives the <see cref="T:LaquaiLib.Interfaces.ISpanProvider`1"/> for the array if it is not a one-dimensional array.</param>
            <param name="span">The <see cref="T:System.Span`1"/> over the array.</param>
            <returns><see langword="true"/> if the span could be retrieved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.TryGetReadOnlySpan``1(LaquaiLib.Interfaces.IReadOnlySpanProvider{``0}@,System.ReadOnlySpan{``0}@)">
            <summary>
            Attempts to retrieve a <see cref="T:System.ReadOnlySpan`1"/> from the specified <paramref name="array"/>.
            </summary>
            <typeparam name="T">The type of the elements in the array.</typeparam>
            <param name="array">The array to retrieve the span from.</param>
            <param name="rosProvider">An <see langword="out"/> variable that receives the <see cref="T:LaquaiLib.Interfaces.ISpanProvider`1"/> for the array if it is not a one-dimensional array.</param>
            <param name="span">The <see cref="T:System.ReadOnlySpan`1"/> over the array.</param>
            <returns><see langword="true"/> if the span could be retrieved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.SequenceEqual``1(System.Array,System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines whether the two arrays are equal in length and contain the same elements in the same order.
            The dimensions of the arrays need not match for this method to return <see langword="true"/>.
            </summary>
            <param name="source">The first array to compare.</param>
            <param name="other">The second array to compare.</param>
            <param name="equalityComparer">An optional <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use for comparing elements in the arrays.</param>
            <returns><see langword="true"/> if the arrays are equal in length and contain the same elements in the same order, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.AsEnumerable``1(System.Array)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.AsEnumerable``1"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.GetSpanProvider``1(System.Array)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.GetSpanProvider``1"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.GetReadOnlySpanProvider``1(System.Array)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.GetReadOnlySpanProvider``1"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.MultiDimCopyTo``1(System.Array,System.Array)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimCopyTo``1(System.Array)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.MultiDimCopyTo``1(System.Array,System.Array,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimCopyTo``1(System.Array,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.MultiDimCopyTo``1(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimCopyTo``1(System.Int64,System.Array,System.Int64,System.Int64)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.MultiDimCopyTo``1(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimCopyTo``1(System.Int32,System.Array,System.Int32,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.MultiDimConstrainedCopyTo``1(System.Array,System.Array)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimConstrainedCopyTo``1(System.Array)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.MultiDimConstrainedCopyTo``1(System.Array,System.Array,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimConstrainedCopyTo``1(System.Array,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.MultiDimConstrainedCopyTo``1(System.Array,System.Int64,System.Array,System.Int64,System.Int64)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimConstrainedCopyTo``1(System.Int64,System.Array,System.Int64,System.Int64)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.MultiDimConstrainedCopyTo``1(System.Array,System.Int32,System.Array,System.Int32,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.MultiDimConstrainedCopyTo``1(System.Int32,System.Array,System.Int32,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.TryGetSpan``1(System.Array,LaquaiLib.Interfaces.ISpanProvider{``0}@,System.Span{``0}@)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.TryGetSpan``1(LaquaiLib.Interfaces.ISpanProvider{``0}@,System.Span{``0}@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.TryGetReadOnlySpan``1(System.Array,LaquaiLib.Interfaces.IReadOnlySpanProvider{``0}@,System.ReadOnlySpan{``0}@)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.TryGetReadOnlySpan``1(LaquaiLib.Interfaces.IReadOnlySpanProvider{``0}@,System.ReadOnlySpan{``0}@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.SequenceEqual``1(System.Array,System.Array,System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__0.SequenceEqual``1(System.Array,System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__1`1.TryGetAt(System.Int32,`0@)">
            <summary>
            Attempts to retrieve the element at the specified index from the array if that index is valid for the array.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="array">The array to retrieve the element from.</param>
            <param name="i">The index of the element to retrieve.</param>
            <param name="value">An <see langword="out"/> variable that receives the element at the specified index if it is valid.</param>
            <returns><see langword="true"/> if the index was valid and the element could be retrieved, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.<>E__1`1.GetAtOrDefault(System.Int32,`0)">
            <summary>
            Attempts to retrieve the element at specified index from the array if that index is valid for the array, otherwise returns the specified default value.
            </summary>
            <typeparam name="T">The type of the array elements.</typeparam>
            <param name="array">The array to retrieve the element from.</param>
            <param name="i">The index of the element to retrieve.</param>
            <param name="defaultValue">The default value to return if the index is invalid.</param>
            <returns>The element at the specified index if it is valid, otherwise the specified default value.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.TryGetAt``1(``0[],System.Int32,``0@)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__1`1.TryGetAt(System.Int32,`0@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ArrayExtensions.GetAtOrDefault``1(``0[],System.Int32,``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ArrayExtensions.<>E__1`1.GetAtOrDefault(System.Int32,`0)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.CancellationTokenExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Threading.CancellationToken"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.CancellationTokenExtensions.<>E__0.WhenCancelled">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task"/> that completes successfully (that is, without throwing an exception) when the specified <paramref name="cancellationToken"/> is cancelled.
            </summary>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <returns>The created <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.CancellationTokenExtensions.WhenCancelled(System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.CancellationTokenExtensions.<>E__0.WhenCancelled"/>
        </member>
        <member name="T:LaquaiLib.Extensions.CharExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Char"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.CharExtensions.<>E__0.IsVowel">
            <summary>
            Determines if a specified <see cref="T:System.Char"/> is a vowel (including 'y').
            </summary>
            <param name="character">The <see cref="T:System.Char"/> to check.</param>
            <returns><see langword="true"/> if <paramref name="character"/> is a vowel, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.CharExtensions.<>E__0.IsConsonant">
            <summary>
            Determines if a specified <see cref="T:System.Char"/> is a consonant.
            </summary>
            <param name="character">The <see cref="T:System.Char"/> to check.</param>
            <returns><see langword="true"/> if <paramref name="character"/> is a consonant, otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.CharExtensions.IsVowel(System.Char)">
            <inheritdoc cref="M:LaquaiLib.Extensions.CharExtensions.<>E__0.IsVowel"/>
        </member>
        <member name="M:LaquaiLib.Extensions.CharExtensions.IsConsonant(System.Char)">
            <inheritdoc cref="M:LaquaiLib.Extensions.CharExtensions.<>E__0.IsConsonant"/>
        </member>
        <member name="T:LaquaiLib.Extensions.ConstructorInfoExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Reflection.ConstructorInfo"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ConstructorInfoExtensions.<>E__0.CreateDelegate``1">
            <summary>
            Creates a delegate that acts like the instance constructor represented by <paramref name="ctorInfo"/>.
            </summary>
            <typeparam name="TDelegate">The type of delegate to create. Must be a <see cref="T:System.Func`1"/> overload.</typeparam>
            <param name="ctorInfo">The <see cref="T:System.Reflection.ConstructorInfo"/> representing an instance constructor of a type.</param>
            <returns>The created delegate.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the type specified for <typeparamref name="TDelegate"/> is not a <see cref="T:System.Func`1"/> overload.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the type specified for <typeparamref name="TDelegate"/> does not match the constructor's signature</exception>
            <remarks>
            This method is to be used in the same vein as types in <see cref="N:System.Collections.Frozen"/>. The cost to create the <see langword="delegate"/> from the <see cref="T:System.Reflection.ConstructorInfo"/> is slightly higher, but is amortized when used extensively.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.ConstructorInfoExtensions.CreateDelegate``1(System.Reflection.ConstructorInfo)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ConstructorInfoExtensions.<>E__0.CreateDelegate``1"/>
        </member>
        <member name="T:LaquaiLib.Extensions.DelegateExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Delegate"/> Type.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.DelegateExtensions.<>E__0`1.TypedInvocationList">
            <summary>
            Gets the invocation list of the specified <see cref="T:System.Delegate"/> forcibly retyped as an array of <typeparamref name="TDelegate"/>. This overload is useful when the delegate type is definitively known at compile-time (such as for <see langword="event"/> <see langword="delegate"/>s).
            </summary>
            <typeparam name="TDelegate">The type of the <see cref="T:System.Delegate"/>.</typeparam>
            <param name="del">The <typeparamref name="TDelegate"/> to get the invocation list of.</param>
            <returns>The invocation list of the specified <see cref="T:System.Delegate"/> retyped as an array of <typeparamref name="TDelegate"/>, or <see langword="null"/> of that type if the delegate has no invocation list.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.DelegateExtensions.get_TypedInvocationList``1(``0)">
            <inheritdoc cref="P:LaquaiLib.Extensions.DelegateExtensions.<>E__0`1.TypedInvocationList"/>
        </member>
        <member name="M:LaquaiLib.Extensions.DelegateExtensions.<>E__1.GetInvocationList``1">
            <summary>
            Gets the invocation list of the specified <see cref="T:System.Delegate"/> forcibly retyped as an array of <typeparamref name="TDelegate"/>.
            </summary>
            <typeparam name="TDelegate">The type of the <see cref="T:System.Delegate"/>.</typeparam>
            <param name="del">The <see cref="T:System.Delegate"/> to get the invocation list of.</param>
            <returns>The invocation list of the specified <see cref="T:System.Delegate"/> retyped as an array of <typeparamref name="TDelegate"/>, or <see langword="null"/> of that type if the delegate has no invocation list.</returns>
            <remarks>
            If not all elements of the invocation list can be cast to <typeparamref name="TDelegate"/>, consumers will run into non-sensical exceptions when attempting to call the delegates.
            </remarks>
        </member>
        <member name="P:LaquaiLib.Extensions.DelegateExtensions.<>E__1.IsStatic">
            <summary>
            Gets whether the specified <see cref="T:System.Delegate"/> is static.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.DelegateExtensions.<>E__1.IsClosure">
            <summary>
            Gets whether the specified <see cref="T:System.Delegate"/> is a closure (that is, a delegate that captures state from its surrounding scope where it was defined).
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.DelegateExtensions.GetInvocationList``1(System.Delegate)">
            <inheritdoc cref="M:LaquaiLib.Extensions.DelegateExtensions.<>E__1.GetInvocationList``1"/>
        </member>
        <member name="M:LaquaiLib.Extensions.DelegateExtensions.get_IsStatic(System.Delegate)">
            <inheritdoc cref="P:LaquaiLib.Extensions.DelegateExtensions.<>E__1.IsStatic"/>
        </member>
        <member name="M:LaquaiLib.Extensions.DelegateExtensions.get_IsClosure(System.Delegate)">
            <inheritdoc cref="P:LaquaiLib.Extensions.DelegateExtensions.<>E__1.IsClosure"/>
        </member>
        <member name="T:LaquaiLib.Extensions.IDictionaryExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IDictionary`2"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.Clone``2(System.Collections.Generic.IDictionary{``0,``1})">
            <summary>
            Creates a mutable shallow copy of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <typeparam name="TValue">They Type of the values of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to clone. Must be mutable.</param>
            <returns>A shallow copy of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1)">
            <summary>
            Gets the value associated with the specified key or adds a new key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value from or add to. Must be mutable.</param>
            <param name="key">The key of the value to get or add.</param>
            <param name="addValue">The value to be added for an absent key. If the key is absent, the return value is this value.</param>
            <returns>The value associated with the specified key, if the key is found, otherwise <paramref name="addValue"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1})">
            <summary>
            Gets the value associated with the specified key or adds a new key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value from or add to. Must be mutable.</param>
            <param name="key">The key of the value to get or add.</param>
            <param name="addValueFactory">A factory <see cref="T:System.Func`1"/> that produces the value to be added for an absent key. If the key is absent, the return value is the produced value.</param>
            <returns>The value associated with the specified key, if the key is found, otherwise the value produced by <paramref name="addValueFactory"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,``1@)">
            <summary>
            Gets the value associated with the specified key or adds a new key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not exist.
            </summary>
            <typeparam name="TKey">The type of the keys in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <typeparam name="TValue">The type of the elements in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value from or add the value to. Must be mutable.</param>
            <param name="key">The key of the value to get or add.</param>
            <param name="addValue">The value to add to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not exist.</param>
            <param name="element">An <see langword="out"/> variable that receives the value associated with the specified key or the added value.</param>
            <returns><see langword="true"/> if the key was found in the <see cref="T:System.Collections.Generic.IDictionary`2"/>, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the <see cref="T:System.Collections.Generic.IDictionary`2"/> is not mutable.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.GetOrAdd``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1},``1@)">
            <summary>
            Gets the value associated with the specified key or adds a new key/value pair produced by a factory to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not exist.
            </summary>
            <typeparam name="TKey">The type of the keys in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <typeparam name="TValue">The type of the elements in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to get the value from or add the value to. Must be mutable.</param>
            <param name="key">The key of the value to get or add.</param>
            <param name="addValueFactory">A factory <see cref="T:System.Func`1"/> that produces the value to add to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not exist. This overload is useful when constructing the value is expensive and should only be done when necessary.</param>
            <param name="element">An <see langword="out"/> variable that receives the value associated with the specified key or the added value.</param>
            <returns><see langword="true"/> if the key was found in the <see cref="T:System.Collections.Generic.IDictionary`2"/>, otherwise <see langword="false"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the dictionary is not mutable.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``1,``1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist. Otherwise, a factory <see cref="T:System.Func`2"/> that produces a new value is invoked with the existing value.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to add to or update. Must be mutable.</param>
            <param name="key">The key of the element to add or update.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">A factory <see cref="T:System.Func`2"/> that takes the existing value for a key and produces a new value.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,``1,System.Func{``1,``1,``1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> if the key does not already exist. Otherwise, a factory <see cref="T:System.Func`3"/> that produces a new value is invoked with the existing value and <paramref name="addValue"/>.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to add to or update. Must be mutable.</param>
            <param name="key">The key of the element to add or update.</param>
            <param name="addValue">The value to be added for an absent key.</param>
            <param name="updateValueFactory">A factory <see cref="T:System.Func`3"/> that takes the existing value for a key and <paramref name="addValue"/> itself and produces a new value. This avoids having to materialize the value twice.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.AddOrUpdate``2(System.Collections.Generic.IDictionary{``0,``1},``0,System.Func{``1},System.Func{``1,``1})">
            <summary>
            Adds a key/value pair to the <see cref="T:System.Collections.Generic.IDictionary`2"/> where the value is produced by <paramref name="addValueFactory"/> if the key does not already exist. Otherwise, a factory <see cref="T:System.Func`2"/> that produces a new value is invoked with the existing value.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IDictionary`2"/> to add to or update. Must be mutable.</param>
            <param name="key">The key of the element to add or update.</param>
            <param name="addValueFactory">A <see cref="T:System.Func`1"/> that produces the value to be added for an absent key. It is only invoked if the key does not already exist in the <see cref="T:System.Collections.Generic.IDictionary`2"/>.</param>
            <param name="updateValueFactory">A factory <see cref="T:System.Func`3"/> that takes the existing value for a key and produces a new value.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.GetValueRefOrNullRef``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Boolean@)">
            <summary>
            Returns a <see langword="ref"/> into the storage of the specified <paramref name="dictionary"/> if the key-value pair was present, otherwise returns a <see langword="null"/> <see langword="ref"/>.
            If <paramref name="existed"/> is <see langword="false"/> when control returns to the caller, using the returned <see langword="ref"/> is undefined behavior and will likely result in a <see cref="T:System.NullReferenceException"/>.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to get the value from.</param>
            <param name="key">The key of the value to get.</param>
            <param name="existed">An <see langword="out"/> variable that indicates whether the key-value pair was present in the <paramref name="dictionary"/>.</param>
            <returns>A <see langword="ref"/> into the storage of the <paramref name="dictionary"/> if the key-value pair was present, otherwise a <see langword="null"/> <see langword="ref"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.GetValueRefOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,``1,System.Boolean@)">
            <summary>
            Checks if the specified <paramref name="dictionary"/> contains a key-value pair with the specified <paramref name="key"/>, adds one with the specified <paramref name="value"/> if not and returns a <see langword="ref"/> into its storage.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to get the value from or add to.</param>
            <param name="key">The key of the value to get or add.</param>
            <param name="value">The value to add to the <paramref name="dictionary"/> if the key does not exist.</param>
            <param name="existed">An <see langword="out"/> variable that indicates whether the key-value pair was present in the <paramref name="dictionary"/>.</param>
            <returns>A <see langword="ref"/> into the storage of the <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.GetValueRefOrAdd``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Func{``1},System.Boolean@)">
            <summary>
            Checks if the specified <paramref name="dictionary"/> contains a key-value pair with the specified <paramref name="key"/>, adds one with the value produced by <paramref name="valueFactory"/> if not and returns a <see langword="ref"/> into its storage.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <typeparam name="TValue">The Type of the values of the <see cref="T:System.Collections.Generic.Dictionary`2"/>.</typeparam>
            <param name="dictionary">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to get the value from or add to.</param>
            <param name="key">The key of the value to get or add.</param>
            <param name="valueFactory">A factory <see cref="T:System.Func`1"/> that produces the value to add to the <paramref name="dictionary"/> if the key does not exist.</param>
            <param name="existed">An <see langword="out"/> variable that indicates whether the key-value pair was present in the <paramref name="dictionary"/>.</param>
            <returns>A <see langword="ref"/> into the storage of the <paramref name="dictionary"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.GetValueRefOrNullRef``2(System.Collections.Generic.Dictionary{``0,``1},``0)">
            <inheritdoc cref="M:System.Runtime.InteropServices.CollectionsMarshal.GetValueRefOrNullRef``2(System.Collections.Generic.Dictionary{``0,``1},``0)"/>"
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.GetValueRefOrNullRef``3(System.Collections.Generic.Dictionary{``0,``1}.AlternateLookup{``2},``2)">
            <inheritdoc cref="M:System.Runtime.InteropServices.CollectionsMarshal.GetValueRefOrAddDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Boolean@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.GetValueRefOrAddDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Boolean@)">
            <inheritdoc cref="M:System.Runtime.InteropServices.CollectionsMarshal.GetValueRefOrAddDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Boolean@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IDictionaryExtensions.GetValueRefOrAddDefault``3(System.Collections.Generic.Dictionary{``0,``1}.AlternateLookup{``2},``2,System.Boolean@)">
            <inheritdoc cref="M:System.Runtime.InteropServices.CollectionsMarshal.GetValueRefOrAddDefault``2(System.Collections.Generic.Dictionary{``0,``1},``0,System.Boolean@)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.EnumExtensions">
            <summary>
            Provides Extension Methods for <see cref="T:System.Enum"/> Types.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.EnumExtensions.<>E__0`1.Description">
            <summary>
            Returns the <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> for the given <see cref="T:System.Enum"/> value. If the value is not decorated with a <see cref="T:System.ComponentModel.DescriptionAttribute"/>, the default <see cref="T:System.String"/> representation of the value is returned.
            </summary>
            <param name="any">The <see cref="T:System.Enum"/> value to retrieve the description for.</param>
            <returns>The value of the <see cref="P:System.ComponentModel.DescriptionAttribute.Description"/> for the given <see cref="T:System.Enum"/> value or its default <see cref="T:System.String"/> representation.</returns>
        </member>
        <member name="P:LaquaiLib.Extensions.EnumExtensions.<>E__0`1.Flags">
            <summary>
            Retrieves all flags that are currently set in the specified <typeparamref name="TEnum"/> value.
            Because this implicitly makes <paramref name="any"/> a bitwise-AND combination of the resulting flags, it is not included in the result set.
            </summary>
            <typeparam name="TEnum">The <see cref="T:System.Enum"/> type to retrieve the flags for.</typeparam>
            <param name="any">The <typeparamref name="TEnum"/> value to retrieve the flags for.</param>
            <returns>The flags that are currently set in the specified <typeparamref name="TEnum"/> value or an empty array if no flags are set.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.EnumExtensions.get_Description``1(``0)">
            <inheritdoc cref="P:LaquaiLib.Extensions.EnumExtensions.<>E__0`1.Description"/>
        </member>
        <member name="M:LaquaiLib.Extensions.EnumExtensions.get_Flags``1(``0)">
            <inheritdoc cref="P:LaquaiLib.Extensions.EnumExtensions.<>E__0`1.Flags"/>
        </member>
        <member name="M:LaquaiLib.Extensions.EnumExtensions.<>E__1`1.HasValue">
            <summary>
            Determines if an enum value <paramref name="source"/> of <typeparamref name="T"/> has a non-zero value.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="source">The enum value to test.</param>
            <returns>A value indicating whether <paramref name="source"/> has a non-zero value.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.EnumExtensions.<>E__1`1.HasValue(`0)">
            <summary>
            Determines if an enum value <paramref name="source"/> of <typeparamref name="T"/> has at least one value that another <paramref name="value"/> also has. May not work correctly with non-<see cref="T:System.FlagsAttribute"/> enums.
            </summary>
            <typeparam name="T">The type of the enum.</typeparam>
            <param name="source">The enum value to test.</param>
            <param name="value">An enum value that is checked against.</param>
            <returns>A value indicating whether <paramref name="source"/> has at least one value that <paramref name="value"/> also has.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.EnumExtensions.HasValue``1(``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.EnumExtensions.<>E__1`1.HasValue"/>
        </member>
        <member name="M:LaquaiLib.Extensions.EnumExtensions.HasValue``1(``0,``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.EnumExtensions.<>E__1`1.HasValue(`0)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.FileSystemModelExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.IO.DirectoryInfo"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.Directory(System.String)">
            <summary>
            Creates a new <see cref="T:System.IO.DirectoryInfo"/> instance for the subdirectory identified by <paramref name="name"/>.
            </summary>
            <param name="di">The <see cref="T:System.IO.DirectoryInfo"/> instance to use as the current directory.</param>
            <param name="name">A relative directory path to search for under the directory represented by <paramref name="di"/>.</param>
            <returns>A <see cref="T:System.IO.DirectoryInfo"/> instance for the subdirectory identified by <paramref name="name"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.Directory(System.ReadOnlySpan{System.String})">
            <summary>
            Creates a new <see cref="T:System.IO.DirectoryInfo"/> instance for the subdirectory identified by a path consisting of subdirectory <paramref name="names"/>.
            </summary>
            <param name="di">The <see cref="T:System.IO.DirectoryInfo"/> instance to use as the current directory.</param>
            <param name="names">Any number of directory names to join and search for under the directory represented by <paramref name="di"/>.</param>
            <returns>A <see cref="T:System.IO.DirectoryInfo"/> instance for the subdirectory identified by a path consisting of subdirectory <paramref name="names"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.MakeDirectory(System.String)">
            <summary>
            Creates a new <see cref="T:System.IO.DirectoryInfo"/> instance for the subdirectory identified by <paramref name="name"/>, creating the entire directory structure if it does not exist.
            </summary>
            <param name="di">The <see cref="T:System.IO.DirectoryInfo"/> instance to use as the current directory.</param>
            <param name="name">A relative directory path to search for under the directory represented by <paramref name="di"/>.</param>
            <returns>A <see cref="T:System.IO.DirectoryInfo"/> instance for the subdirectory identified by <paramref name="name"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.MakeDirectory(System.ReadOnlySpan{System.String})">
            <summary>
            Creates a new <see cref="T:System.IO.DirectoryInfo"/> instance for the subdirectory identified by a path consisting of subdirectory <paramref name="names"/>, creating the entire directory structure if it does not exist.
            </summary>
            <param name="di">The <see cref="T:System.IO.DirectoryInfo"/> instance to use as the current directory.</param>
            <param name="names">Any number of directory names to join and search for under the directory represented by <paramref name="di"/>.</param>
            <returns>A <see cref="T:System.IO.DirectoryInfo"/> instance for the subdirectory identified by a path consisting of subdirectory <paramref name="names"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.File(System.String)">
            <summary>
            Creates a <see cref="T:System.IO.FileInfo"/> instance for a file identified by <paramref name="name"/>.
            </summary>
            <param name="di">The <see cref="T:System.IO.DirectoryInfo"/> instance to use as the current directory.</param>
            <param name="name">A relative file path to search for under the directory represented by <paramref name="di"/>.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> instance for a file identified by <paramref name="name"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.File(System.ReadOnlySpan{System.String})">
            <summary>
            Creates a <see cref="T:System.IO.FileInfo"/> instance for a file identified by <paramref name="names"/>.
            </summary>
            <param name="di">The <see cref="T:System.IO.DirectoryInfo"/> instance to use as the current directory.</param>
            <param name="names">Any number of directory names to join and search for under the directory represented by <paramref name="di"/>.</param>
            <returns>A <see cref="T:System.IO.FileInfo"/> instance for a file identified by <paramref name="names"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.IsBaseOf(System.IO.DirectoryInfo)">
            <summary>
            Determines whether the directory represented by <paramref name="di"/> is a base of the directory represented by <paramref name="comp"/>.
            </summary>
            <param name="di">A <see cref="T:System.IO.DirectoryInfo"/> instance representing a directory.</param>
            <param name="comp">The <see cref="T:System.IO.DirectoryInfo"/> instance to compare against.</param>
            <returns><see langword="true"/> if <paramref name="di"/> is a base of <paramref name="comp"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.IsBaseOf(System.String)">
            <summary>
            Determines whether the directory represented by <paramref name="di"/> is a base of the directory represented by <paramref name="comp"/>.
            </summary>
            <param name="di">A <see cref="T:System.IO.DirectoryInfo"/> instance representing a directory.</param>
            <param name="comp">The path of the directory to compare against.</param>
            <returns><see langword="true"/> if <paramref name="di"/> is a base of <paramref name="comp"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.Directory(System.IO.DirectoryInfo,System.String)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.Directory(System.String)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.Directory(System.IO.DirectoryInfo,System.ReadOnlySpan{System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.Directory(System.ReadOnlySpan{System.String})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.MakeDirectory(System.IO.DirectoryInfo,System.String)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.MakeDirectory(System.String)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.MakeDirectory(System.IO.DirectoryInfo,System.ReadOnlySpan{System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.MakeDirectory(System.ReadOnlySpan{System.String})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.File(System.IO.DirectoryInfo,System.String)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.File(System.String)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.File(System.IO.DirectoryInfo,System.ReadOnlySpan{System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.File(System.ReadOnlySpan{System.String})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.IsBaseOf(System.IO.DirectoryInfo,System.IO.DirectoryInfo)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.IsBaseOf(System.IO.DirectoryInfo)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.IsBaseOf(System.IO.DirectoryInfo,System.String)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__0.IsBaseOf(System.String)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllBytes(System.Byte[])">
            <inheritdoc cref="M:System.IO.File.AppendAllBytes(System.String,System.Byte[])" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllBytes(System.ReadOnlySpan{System.Byte})">
            <inheritdoc cref="M:System.IO.File.AppendAllBytesAsync(System.String,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllBytesAsync(System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllBytesAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllBytesAsync(System.String,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllLines(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllLines(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.AppendAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllLinesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllLinesAsync(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllText(System.String)">
            <inheritdoc cref="M:System.IO.File.AppendAllText(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllText(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.File.AppendAllText(System.String,System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllText(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.AppendAllText(System.String,System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllText(System.ReadOnlySpan{System.Char},System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.AppendAllText(System.String,System.ReadOnlySpan{System.Char},System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllTextAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllTextAsync(System.String,System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllTextAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllTextAsync(System.String,System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllTextAsync(System.ReadOnlyMemory{System.Char},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.AppendAllTextAsync(System.String,System.ReadOnlyMemory{System.Char},System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Copy(System.IO.FileInfo)">
            <inheritdoc cref="M:System.IO.File.Copy(System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Copy(System.IO.FileInfo,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Copy(System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Create(System.Int32)">
            <inheritdoc cref="M:System.IO.File.Create(System.String,System.Int32)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Create(System.Int32,System.IO.FileOptions)">
            <inheritdoc cref="M:System.IO.File.Create(System.String,System.Int32,System.IO.FileOptions)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Move(System.IO.FileInfo)">
            <inheritdoc cref="M:System.IO.File.Move(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Move(System.IO.FileInfo,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Move(System.String,System.String,System.Boolean)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Replace(System.IO.FileInfo,System.IO.FileInfo)">
            <inheritdoc cref="M:System.IO.File.Replace(System.String,System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Replace(System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
            <inheritdoc cref="M:System.IO.File.Replace(System.String,System.String,System.String,System.Boolean)" />
        </member>
        <member name="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Attributes">
            <inheritdoc cref="M:System.IO.File.GetAttributes(System.String)" />
        </member>
        <member name="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.CreationTime">
            <inheritdoc cref="M:System.IO.File.GetCreationTime(System.String)" />
        </member>
        <member name="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.CreationTimeUtc">
            <inheritdoc cref="M:System.IO.File.GetCreationTimeUtc(System.String)" />
        </member>
        <member name="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.LastAccessTime">
            <inheritdoc cref="M:System.IO.File.GetLastAccessTime(System.String)" />
        </member>
        <member name="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.LastAccessTimeUtc">
            <inheritdoc cref="M:System.IO.File.GetLastAccessTimeUtc(System.String)" />
        </member>
        <member name="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.LastWriteTime">
            <inheritdoc cref="M:System.IO.File.GetLastWriteTime(System.String)" />
        </member>
        <member name="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.LastWriteTimeUtc">
            <inheritdoc cref="M:System.IO.File.GetLastWriteTimeUtc(System.String)" />
        </member>
        <member name="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.UnixFileMode">
            <inheritdoc cref="M:System.IO.File.GetUnixFileMode(System.String)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllBytes">
            <inheritdoc cref="M:System.IO.File.ReadAllBytes(System.String)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllBytesAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllBytesAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllLines">
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllLines(System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllLines(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllLinesAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllLinesAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllLinesAsync(System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllText">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllText(System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadAllText(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllTextAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllTextAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllTextAsync(System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadLines">
            <inheritdoc cref="M:System.IO.File.ReadLines(System.String)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadLines(System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.ReadLines(System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadLinesAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadLinesAsync(System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadLinesAsync(System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.ReadLinesAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllBytes(System.Byte[])">
            <inheritdoc cref="M:System.IO.File.WriteAllBytes(System.String,System.Byte[])" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllBytes(System.ReadOnlySpan{System.Byte})">
            <inheritdoc cref="M:System.IO.File.WriteAllBytes(System.String,System.ReadOnlySpan{System.Byte})" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllBytesAsync(System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllBytesAsync(System.String,System.Byte[],System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllBytesAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllBytesAsync(System.String,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllLines(System.String[])">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllLines(System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String})" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllLines(System.String[],System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllLines(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllLines(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllLinesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllLinesAsync(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllLinesAsync(System.String,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllText(System.String)">
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.String)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllText(System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.ReadOnlySpan{System.Char})" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllText(System.String,System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.String,System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllText(System.ReadOnlySpan{System.Char},System.Text.Encoding)">
            <inheritdoc cref="M:System.IO.File.WriteAllText(System.String,System.ReadOnlySpan{System.Char},System.Text.Encoding)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllTextAsync(System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllTextAsync(System.String,System.String,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllTextAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllTextAsync(System.String,System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllTextAsync(System.String,System.String,System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllTextAsync(System.ReadOnlyMemory{System.Char},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:System.IO.File.WriteAllTextAsync(System.String,System.ReadOnlyMemory{System.Char},System.Text.Encoding,System.Threading.CancellationToken)" />
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllBytes(System.IO.FileInfo,System.Byte[])">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllBytes(System.Byte[])"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllBytes(System.IO.FileInfo,System.ReadOnlySpan{System.Byte})">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllBytes(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllBytesAsync(System.IO.FileInfo,System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllBytesAsync(System.Byte[],System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllBytesAsync(System.IO.FileInfo,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllBytesAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllLines(System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllLines(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllLinesAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllLinesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllLinesAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllLinesAsync(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllText(System.IO.FileInfo,System.String)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllText(System.String)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllText(System.IO.FileInfo,System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllText(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllText(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllText(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllText(System.IO.FileInfo,System.ReadOnlySpan{System.Char},System.Text.Encoding)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllText(System.ReadOnlySpan{System.Char},System.Text.Encoding)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllTextAsync(System.IO.FileInfo,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllTextAsync(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllTextAsync(System.IO.FileInfo,System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllTextAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllTextAsync(System.IO.FileInfo,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.AppendAllTextAsync(System.IO.FileInfo,System.ReadOnlyMemory{System.Char},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.AppendAllTextAsync(System.ReadOnlyMemory{System.Char},System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.Copy(System.IO.FileInfo,System.IO.FileInfo)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Copy(System.IO.FileInfo)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.Copy(System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Copy(System.IO.FileInfo,System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.Create(System.IO.FileInfo,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Create(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.Create(System.IO.FileInfo,System.Int32,System.IO.FileOptions)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Create(System.Int32,System.IO.FileOptions)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.Move(System.IO.FileInfo,System.IO.FileInfo)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Move(System.IO.FileInfo)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.Move(System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Move(System.IO.FileInfo,System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.Replace(System.IO.FileInfo,System.IO.FileInfo,System.IO.FileInfo)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Replace(System.IO.FileInfo,System.IO.FileInfo)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.Replace(System.IO.FileInfo,System.IO.FileInfo,System.IO.FileInfo,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Replace(System.IO.FileInfo,System.IO.FileInfo,System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.get_Attributes(System.IO.FileInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Attributes"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.set_Attributes(System.IO.FileInfo,System.IO.FileAttributes)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.Attributes"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.get_CreationTime(System.IO.FileInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.CreationTime"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.set_CreationTime(System.IO.FileInfo,System.DateTime)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.CreationTime"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.get_CreationTimeUtc(System.IO.FileInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.CreationTimeUtc"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.set_CreationTimeUtc(System.IO.FileInfo,System.DateTime)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.CreationTimeUtc"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.get_LastAccessTime(System.IO.FileInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.LastAccessTime"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.set_LastAccessTime(System.IO.FileInfo,System.DateTime)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.LastAccessTime"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.get_LastAccessTimeUtc(System.IO.FileInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.LastAccessTimeUtc"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.set_LastAccessTimeUtc(System.IO.FileInfo,System.DateTime)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.LastAccessTimeUtc"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.get_LastWriteTime(System.IO.FileInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.LastWriteTime"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.set_LastWriteTime(System.IO.FileInfo,System.DateTime)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.LastWriteTime"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.get_LastWriteTimeUtc(System.IO.FileInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.LastWriteTimeUtc"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.set_LastWriteTimeUtc(System.IO.FileInfo,System.DateTime)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.LastWriteTimeUtc"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.get_UnixFileMode(System.IO.FileInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.UnixFileMode"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.set_UnixFileMode(System.IO.FileInfo,System.IO.UnixFileMode)">
            <inheritdoc cref="P:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.UnixFileMode"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadAllBytes(System.IO.FileInfo)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllBytes"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadAllBytesAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllBytesAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadAllLines(System.IO.FileInfo)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllLines"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadAllLines(System.IO.FileInfo,System.Text.Encoding)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllLines(System.Text.Encoding)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadAllLinesAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllLinesAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadAllLinesAsync(System.IO.FileInfo,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllLinesAsync(System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadAllText(System.IO.FileInfo)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllText"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadAllText(System.IO.FileInfo,System.Text.Encoding)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllText(System.Text.Encoding)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadAllTextAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllTextAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadAllTextAsync(System.IO.FileInfo,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadAllTextAsync(System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadLines(System.IO.FileInfo)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadLines"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadLines(System.IO.FileInfo,System.Text.Encoding)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadLines(System.Text.Encoding)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadLinesAsync(System.IO.FileInfo,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadLinesAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.ReadLinesAsync(System.IO.FileInfo,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.ReadLinesAsync(System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllBytes(System.IO.FileInfo,System.Byte[])">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllBytes(System.Byte[])"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllBytes(System.IO.FileInfo,System.ReadOnlySpan{System.Byte})">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllBytes(System.ReadOnlySpan{System.Byte})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllBytesAsync(System.IO.FileInfo,System.Byte[],System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllBytesAsync(System.Byte[],System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllBytesAsync(System.IO.FileInfo,System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllBytesAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllLines(System.IO.FileInfo,System.String[])">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllLines(System.String[])"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllLines(System.Collections.Generic.IEnumerable{System.String})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllLines(System.IO.FileInfo,System.String[],System.Text.Encoding)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllLines(System.String[],System.Text.Encoding)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllLines(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllLines(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllLinesAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllLinesAsync(System.Collections.Generic.IEnumerable{System.String},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllLinesAsync(System.IO.FileInfo,System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllLinesAsync(System.Collections.Generic.IEnumerable{System.String},System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllText(System.IO.FileInfo,System.String)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllText(System.String)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllText(System.IO.FileInfo,System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllText(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllText(System.IO.FileInfo,System.String,System.Text.Encoding)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllText(System.String,System.Text.Encoding)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllText(System.IO.FileInfo,System.ReadOnlySpan{System.Char},System.Text.Encoding)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllText(System.ReadOnlySpan{System.Char},System.Text.Encoding)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllTextAsync(System.IO.FileInfo,System.String,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllTextAsync(System.String,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllTextAsync(System.IO.FileInfo,System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllTextAsync(System.ReadOnlyMemory{System.Char},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllTextAsync(System.IO.FileInfo,System.String,System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllTextAsync(System.String,System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.FileSystemModelExtensions.WriteAllTextAsync(System.IO.FileInfo,System.ReadOnlyMemory{System.Char},System.Text.Encoding,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.FileSystemModelExtensions.<>E__1.WriteAllTextAsync(System.ReadOnlyMemory{System.Char},System.Text.Encoding,System.Threading.CancellationToken)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.HttpListenerRequestExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Net.HttpListenerRequest"/> Type.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.HttpListenerRequestExtensions.<>E__0.Route">
            <summary>
            Returns the route that the request was made to.
            <para/>For example, if the request was made to <c>http://localhost:8080/api/v1/endpoint?param1=1&amp;param2=2</c>, this method would return <c>/api/v1/endpoint</c>.
            </summary>
            <param name="request">The <see cref="T:System.Net.HttpListenerRequest"/> to get the route from.</param>
            <returns>The route that the request was made to.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.HttpListenerRequestExtensions.get_Route(System.Net.HttpListenerRequest)">
            <inheritdoc cref="P:LaquaiLib.Extensions.HttpListenerRequestExtensions.<>E__0.Route"/>
        </member>
        <member name="T:LaquaiLib.Extensions.IAsyncEnumerableExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IAsyncEnumerableExtensions.Concat``1(System.Collections.Generic.IAsyncEnumerable{``0}[])">
            <summary>
            Chains the specified <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> instances into a single <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="T">The Type of elements the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> instances yield.</typeparam>
            <param name="toChain">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> instances to chain together.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> implementation that iterates over each <paramref name="toChain"/> in turn.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IAsyncEnumerableExtensions.<>E__0`1.Concat(System.ReadOnlySpan{System.Collections.Generic.IAsyncEnumerable{`0}})">
            <summary>
            Chains the specified <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> instances with the specified <paramref name="source"/> into a single <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.
            </summary>
            <typeparam name="T">The Type of elements the <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> instances yield.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to start with.</param>
            <param name="with">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> instances to chain together.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> implementation that iterates over each <paramref name="source"/> and <paramref name="with"/> in turn.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IAsyncEnumerableExtensions.Concat``1(System.Collections.Generic.IAsyncEnumerable{``0},System.ReadOnlySpan{System.Collections.Generic.IAsyncEnumerable{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IAsyncEnumerableExtensions.<>E__0`1.Concat(System.ReadOnlySpan{System.Collections.Generic.IAsyncEnumerable{`0}})"/>
        </member>
        <member name="T:LaquaiLib.Extensions.IAsyncEnumeratorExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IAsyncEnumeratorExtensions.Chain``1(System.Collections.Generic.IAsyncEnumerator{``0}[])">
            <summary>
            Chains the specified <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> instances into a single <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/>.
            </summary>
            <typeparam name="T">The Type of elements the <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> instances yield.</typeparam>
            <param name="toChain">The <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> instances to chain together.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> implementation that iterates over each <paramref name="toChain"/> in turn.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IAsyncEnumeratorExtensions.<>E__0`1.Chain(System.ReadOnlySpan{System.Collections.Generic.IAsyncEnumerator{`0}})">
            <summary>
            Chains the specified <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> instances with the specified <paramref name="source"/> into a single <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/>.
            </summary>
            <typeparam name="T">The Type of elements the <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> instances yield.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> to start with.</param>
            <param name="with">The <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> instances to chain together.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> implementation that iterates over each <paramref name="source"/> and <paramref name="with"/> in turn.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IAsyncEnumeratorExtensions.Chain``1(System.Collections.Generic.IAsyncEnumerator{``0},System.ReadOnlySpan{System.Collections.Generic.IAsyncEnumerator{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IAsyncEnumeratorExtensions.<>E__0`1.Chain(System.ReadOnlySpan{System.Collections.Generic.IAsyncEnumerator{`0}})"/>
        </member>
        <member name="T:LaquaiLib.Extensions.ICollectionExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.ICollection`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ICollectionExtensions.<>E__0`1.KeepOnly(System.Func{`0,System.Boolean})">
            <summary>
            Replaces the contents of this <see cref="T:System.Collections.Generic.ICollection`1"/> with only the elements that match the given <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The Type of the elements in the <see cref="T:System.Collections.Generic.ICollection`1"/>.</typeparam>
            <param name="collection">The <see cref="T:System.Collections.Generic.ICollection`1"/> to be modified.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to keep.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ICollectionExtensions.KeepOnly``1(System.Collections.Generic.ICollection{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.ICollectionExtensions.<>E__0`1.KeepOnly(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumerableExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerable`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__0.All">
            <summary>
            Determines whether all elements of a sequence of <see cref="T:System.Boolean"/> values are true.
            </summary>
            <param name="source">The sequence of <see cref="T:System.Boolean"/> values to check.</param>
            <returns>A value that indicates whether all elements of the sequence are true.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.All(System.Collections.Generic.IEnumerable{System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__0.All"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__1.IntoStruct``1">
            <summary>
            Using the specified <see cref="T:System.Byte"/> sequence, creates a new <typeparamref name="T"/> instance.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the <see langword="struct"/> to marshal the specified bytes into.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Byte"/> to marshal into a new <typeparamref name="T"/> instance.</param>
            <returns>The new <typeparamref name="T"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.IntoStruct``1(System.Collections.Generic.IEnumerable{System.Byte})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__1.IntoStruct``1"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__2.WhenAnyCancelled">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task`1"/> that completes successfully when any of the source sequence's <see cref="T:System.Threading.CancellationToken"/>s is cancelled.
            </summary>
            <param name="tokens">The source sequence of <see cref="T:System.Threading.CancellationToken"/>s.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> as described. Its result is the <see cref="T:System.Threading.CancellationToken"/> that was cancelled first.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__2.WhenAllCancelled">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task"/> that completes successfully when all of the source sequence's <see cref="T:System.Threading.CancellationToken"/>s are cancelled.
            </summary>
            <param name="tokens">The source sequence of <see cref="T:System.Threading.CancellationToken"/>s.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__2.ThrowIfAnyCancelled">
            <summary>
            Throws an <see cref="T:System.OperationCanceledException"/> if any of the source sequence's <see cref="T:System.Threading.CancellationToken"/>s is cancelled.
            </summary>
            <param name="tokens"></param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__2.ThrowIfAllCancelled">
            <summary>
            Throws an <see cref="T:System.OperationCanceledException"/> if all of the source sequence's <see cref="T:System.Threading.CancellationToken"/>s are cancelled.
            </summary>
            <param name="tokens">The source sequence of <see cref="T:System.Threading.CancellationToken"/>s.</param>
            <exception cref="T:System.OperationCanceledException">Thrown when all of the source sequence's <see cref="T:System.Threading.CancellationToken"/>s are cancelled.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WhenAnyCancelled(System.Collections.Generic.IEnumerable{System.Threading.CancellationToken})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__2.WhenAnyCancelled"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WhenAllCancelled(System.Collections.Generic.IEnumerable{System.Threading.CancellationToken})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__2.WhenAllCancelled"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ThrowIfAnyCancelled(System.Collections.Generic.IEnumerable{System.Threading.CancellationToken})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__2.ThrowIfAnyCancelled"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ThrowIfAllCancelled(System.Collections.Generic.IEnumerable{System.Threading.CancellationToken})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__2.ThrowIfAllCancelled"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.HasLessThan(System.Int32)">
            <summary>
            Determines if a sequence contains less than the specified number of elements.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="n">The number of elements to check for.</param>
            <returns><see langword="true"/> if the input sequence contains less than <paramref name="n"/> elements, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.HasLessThanOr(System.Int32)">
            <summary>
            Determines if a sequence contains less than or exactly the specified number of elements.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="n">The number of elements to check for.</param>
            <returns><see langword="true"/> if the input sequence contains less than or exactly <paramref name="n"/> elements, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.HasExactly(System.Int32)">
            <summary>
            Determines if a sequence contains exactly the specified number of elements.
            An attempt is made to avoid enumerating the input sequence, but if this fails, it is done regardless.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="n">The number of elements to check for.</param>
            <returns>The result of the check.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.HasMoreThanOr(System.Int32)">
            <summary>
            Determines if a sequence contains more than or exactly the specified number of elements.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="n">The number of elements to check for.</param>
            <returns><see langword="true"/> if the input sequence contains more than or exactly <paramref name="n"/> elements, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.HasMoreThan(System.Int32)">
            <summary>
            Determines if a sequence contains more than the specified number of elements.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="n">The number of elements to check for.</param>
            <returns><see langword="true"/> if the input sequence contains more than <paramref name="n"/> elements, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.Counts(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Builds a <see cref="T:System.Collections.Generic.Dictionary`2"/>, mapping the item to the number of times it appears in the input sequence.
            </summary>
            <typeparam name="T">The Type of the items in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing items.</param>
            <returns>The resulting <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.CountsBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Builds a <see cref="T:System.Collections.Generic.Dictionary`2"/>, mapping the item to the number of times it appears as counted using a <paramref name="selector"/> function in the input sequence.
            </summary>
            <typeparam name="T">The Type of the items in the input sequence.</typeparam>
            <param name="source">The input sequence.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that produces the keys to count.</param>
            <param name="comparer">The <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing items.</param>
            <returns>The resulting <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.HasLessThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.HasLessThan(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.HasLessThanOr``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.HasLessThanOr(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.HasExactly``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.HasExactly(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.HasMoreThanOr``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.HasMoreThanOr(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.HasMoreThan``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.HasMoreThan(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Counts``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.Counts(System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.CountsBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__3`1.CountsBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.TryGetReadOnlySpan(System.ReadOnlySpan{`0}@)">
            <summary>
            Attempts to retrieve a <see cref="T:System.ReadOnlySpan`1"/> over the specified source collection.
            </summary>
            <param name="span">An <see langword="out"/> variable that receives the <see cref="T:System.ReadOnlySpan`1"/> if the operation is successful.</param>
            <returns><see langword="true"/> if a <see cref="T:System.ReadOnlySpan`1"/> could be created, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.TryGetSpan(System.Span{`0}@)">
            <summary>
            Attempts to retrieve a <see cref="T:System.ReadOnlySpan`1"/> over the specified source collection.
            </summary>
            <param name="span">An <see langword="out"/> variable that receives the <see cref="T:System.ReadOnlySpan`1"/> if the operation is successful.</param>
            <returns><see langword="true"/> if a <see cref="T:System.ReadOnlySpan`1"/> could be created, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Split(System.Func{`0,System.Boolean})">
            <summary>
            Splits a sequence of values into two sequences based on a predicate.
            </summary>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and determines which sequence the element should be yielded to.</param>
            <returns>A <see cref="T:System.ValueTuple`2"/> containing the two sequences. The first collection contains all elements that satisfy the predicate, the second collection contains all remaining elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Halve">
            <summary>
            Halves the input sequence.
            </summary>
            <returns>A <see cref="T:System.ValueTuple`2"/> that contains the two halves of the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Random">
            <summary>
            Selects a random element from the input sequence using <see cref="P:System.Random.Shared"/>.
            </summary>
            <returns>A random element from source.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Random(System.Random)">
            <summary>
            Selects a random element from the input sequence using the specified <paramref name="random"/> instance.
            </summary>
            <param name="random">The <see cref="T:System.Random"/> instance to use for random number generation.</param>
            <returns>The random element from source.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.ForEach(System.Action{`0})">
            <summary>
            Executes the specified <paramref name="action"/> on each element of the source collection.
            </summary>
            <param name="action">The action to perform on each element of the source collection. It is passed each element in the source collection.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.ForEach(System.Action{`0,System.Int32})">
            <summary>
            Executes the specified <paramref name="action"/> on each element of the source collection, incorporating each element's index in the <see cref="T:System.Action`2"/>.
            </summary>
            <param name="action">The action to perform on each element of the source collection. It is passed each element and its index in the source collection.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.ForEachAsync(System.Func{`0,System.Threading.Tasks.Task})">
            <summary>
            Asynchronously executes the specified <paramref name="func"/> on each element of the source collection.
            </summary>
            <param name="func">The action to perform on each element of the source collection. It is passed each element in the source collection.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.ForEachAsync(System.Func{`0,System.Int32,System.Threading.Tasks.Task})">
            <summary>
            Asynchronously executes the specified <paramref name="func"/> on each element of the source collection, incorporating each element's index in the <see cref="T:System.Func`3"/>.
            </summary>
            <param name="func">The action to perform on each element of the source collection. It is passed each element and its index in the source collection.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.GetRange(System.Range)">
            <summary>
            Enumerates over the elements in the input sequence in the specified <paramref name="range"/>.
            If sourc eis not indexable, the entire sequence is enumerated.
            </summary>
            <param name="range">A <see cref="T:System.Range"/> instance that indicates where the items to be extracted are located in the source.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.AllEqual">
            <summary>
            Checks whether the items in a sequence are all equal to each other. If any of the passed objects are <see langword="null"/>, all others must also be <see langword="null"/>.
            </summary>
            <returns><see langword="true"/> if all objects in the passed sourc ecollection are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Mode(System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines the mode of a sequence of values (that is, the value that appears most frequently). If multiple items share the highest frequency, the first one encountered is returned.
            </summary>
            <param name="equalityComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing values, or null to use the default <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for the type of the values.</param>
            <returns>The mode of source.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if sourc eis empty.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Sample(System.Int32)">
            <summary>
            Samples a specified number of elements from the input sequence.
            </summary>
            <param name="itemCount">The number of elements to sample from the input sequence. If not specified, 1% of the input sequence's length is used.</param>
            <returns>The sampled elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.OrderedSample(System.Int32)">
            <summary>
            Samples a specified number of elements from the input sequence, ensuring that the sampled elements remain in the same order as they were in the input sequence.
            </summary>
            <param name="itemCount">The number of elements to sample from the input sequence. If not specified, 1% of the input sequence's length is used.</param>
            <returns>The sampled elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.SelectWhere(System.Func{`0,System.Boolean},System.Func{`0,`0})">
            <summary>
            Conditionally projects elements from a sequence into a new form, transforming only items that satisfy a specified <paramref name="predicate"/> and returning all other items unchanged.
            </summary>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and determines whether the element should be transformed.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the input sequence, if it passes the condition encapsulated by <paramref name="predicate"/>, and produces a new value. Its type must be the same as the input sequence's.</param>
            <returns>The transformed elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.SelectWhere(System.Func{`0,System.Int32,System.Boolean},System.Func{`0,System.Int32,`0})">
            <summary>
            Conditionally projects elements from a sequence into a new form, transforming only items that satisfy a specified <paramref name="predicate"/>.
            </summary>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and its index in the sourc ecollection and determines whether the element should be transformed.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the input sequence and its index in the sourc ecollection, if it passes the condition encapsulated by <paramref name="predicate"/>, and produces a new value. Its type must be the same as the input sequence's.</param>
            <returns>The transformed elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.IfWhere(System.Boolean,System.Func{`0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate if <paramref name="expr"/> is <see langword="true"/>, otherwise returns exactly the input sequence.
            </summary>
            <param name="expr">A value that determines whether the input sequence should be filtered.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and determines whether the element should be yielded.</param>
            <returns>The filtered input sequence if <paramref name="expr"/> is <see langword="true"/>, otherwise the input sequence as is.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.WhereNot(System.Func{`0,System.Boolean})">
            <summary>
            Filters a sequence of values based on a predicate. The predicate's result is inverted.
            </summary>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and determines whether the element should be yielded.</param>
            <returns>The elements in the input sequence that do not satisfy the predicate.</returns>
            <remarks>
            This has essentially no purpose but to avoid the need to create a lambda that inverts the result of the predicate.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Indexed">
            <summary>
            Indexes the elements in the input sequence; that is, each element is paired with its number of occurrences in the sequence.
            </summary>
            <returns>A sequence of key-value pairs where the key is an element from the input sequence and the value is the number of occurrences of that element in the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.None">
            <summary>
            Determines if a sequence is empty.
            </summary>
            <returns><see langword="true"/> if the input sequence is empty, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.None(System.Func{`0,System.Boolean})">
            <summary>
            Determines if a sequence contains no elements that satisfy a condition.
            </summary>
            <param name="predicate">The condition to check for.</param>
            <returns><see langword="true"/> if the input sequence contains no elements that satisfy the condition, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.OnlyOrDefault(`0)">
            <summary>
            Determines whether a sequence contains exactly one element and returns that element if so, otherwise returns the specified <paramref name="defaultValue"/>.
            This behaves exactly like <see cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)"/> without throwing exceptions.
            </summary>
            <param name="defaultValue">The value to return if the input sequence contains no elements or more than one element.</param>
            <returns>The single element in the input sequence, or <paramref name="defaultValue"/> if the sequence contains no or more than one element.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.OnlyOrDefault(System.Func{`0,System.Boolean},`0)">
            <summary>
            Determines whether a sequence contains exactly one element that satisfies a <paramref name="predicate"/> and returns that element if so, otherwise returns the specified <paramref name="defaultValue"/>.
            This behaves exactly like <see cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)"/> without throwing exceptions.
            </summary>
            <param name="predicate">The condition to check for.</param>
            <param name="defaultValue">The value to return if the input sequence contains no elements or more than one element.</param>
            <returns>The single element in the input sequence that satisfies the <paramref name="predicate"/>, or <paramref name="defaultValue"/> if the sequence contains no or more than one element that satisfies the <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.ElementAtOrDefault(System.Int32,`0)">
            <summary>
            Attempts to retrieve the element at the specified index from the input sequence if that index is valid for the sequence, otherwise a default value is returned.
            </summary>
            <param name="i">The index of the element to retrieve.</param>
            <param name="defaultValue">The value to return if the index is invalid. Defaults to the <see langword="default"/> value of <typeparamref name="T"/>.</param>
            <returns>The element at the specified index if it is valid, otherwise the specified default value.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.IndexOf(`0,System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Finds the first index of the specified <paramref name="item"/> in the input sequence.
            </summary>
            <param name="item">The item to find the index of.</param>
            <param name="equalityComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing values, or <see langword="null"/> to use the default <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for the type of the values.</param>
            <returns>The index of the first occurrence of the specified <paramref name="item"/> in the input sequence, or -1 if the item is not found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.IndexOf(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Finds the first starting index of the specified <paramref name="sequence"/> in the input sequence.
            </summary>
            <param name="sequence">The sequence to find the index of.</param>
            <param name="equalityComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> to use when comparing values, or <see langword="null"/> to use the default <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for the type of the values.</param>
            <returns>The index of the first occurrence of the specified <paramref name="sequence"/> in the input sequence, or -1 if the sequence is not found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Majority(System.Func{`0,System.Boolean})">
            <summary>
            Determines whether the majority of a sequence's elements satisfy a condition.
            </summary>
            <param name="predicate">The condition to check for.</param>
            <returns><see langword="true"/> if the majority of the input sequence's elements satisfy the condition, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.BuildDictionaryLinear">
            <summary>
            Builds a <see cref="T:System.Collections.Generic.Dictionary`2"/> where both type arguments are <typeparamref name="T"/> from the input sequence. It must contain a positive and even number of elements. The first half of the elements are used as keys, the second half as values.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> built from the input sequence.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the input sequence does not contain a positive and even number of elements.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.BuildDictionaryZipped">
            <summary>
            Builds a <see cref="T:System.Collections.Generic.Dictionary`2"/> where both type arguments are <typeparamref name="T"/> from the input sequence. It must contain a positive and even number of elements. The elements are considered to be repeating key-value pairs.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> built from the input sequence.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the input sequence does not contain a positive and even number of elements.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.AsAsynchronous">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> wrapper around the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>. This is fundamentally different from <see cref="M:System.Linq.AsyncEnumerable.ToAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0})"/> in that every <c>MoveNext</c> call is wrapped in a new <see cref="T:System.Threading.Tasks.Task"/> and <see langword="await"/>ed whereas the former still consumes each element synchronously.
            <para/><b>Warning!</b> Do NOT use this method right before an aggregating operation (such as <see cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})"/> or similar). Instead, call <see cref="M:System.Linq.AsyncEnumerable.ToAsyncEnumerable``1(System.Collections.Generic.IEnumerable{``0})"/>, then use a method such as <see cref="M:System.Linq.AsyncEnumerable.ToListAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Threading.CancellationToken)"/>. This method is intended for use when <c>MoveNext</c> calls on an <see cref="T:System.Collections.Generic.IEnumerator`1"/> are expected to be computationally expensive or time-consuming. To reduce overhead, usage of the asynchronous methods in <see cref="T:System.Linq.AsyncEnumerable"/> is recommended (which are optimized for their purpose).
            </summary>
            <returns>The sourc eas an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Interlace(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> that enumerates the elements of the input sequences is turn; that is, the first element of the first sequence, the first element of the second sequence, the second element of the first sequence, the second element of the second sequence, and so on.
            If the sequences are of unequal length, the remaining elements of the longer sequence will end up at the end of the resulting sequence.
            </summary>
            <param name="second">The second sequence.</param>
            <returns>A single sequence that contains the elements of both input sequences, interlaced.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.SequenceEquivalent(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Determines whether two sequences are equivalent, that is, whether they contain the same elements in any order.
            </summary>
            <param name="second">The second sequence to compare.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use when comparing values, or null to use the default <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for the type of the values.</param>
            <returns><see langword="true"/> if the two source sequences are of equal length and are equivalent, otherwise <see langword="false"/>. If one of the sequences is <see langword="null"/>, both sequences must be <see langword="null"/> to be considered equivalent.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.ModeBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <summary>
            Determines the mode of a sequence of values from a given key extracted from each value (that is, the value that appears most frequently).
            If multiple items share the highest frequency, the first one encountered is returned.
            </summary>
            <typeparam name="TSelect">The Type of the elements <paramref name="selector"/> produces.</typeparam>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of sourc eand produces a value that is used to determine the mode of source.</param>
            <param name="equalityComparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> of <typeparamref name="TSelect"/> to use when comparing values, or null to use the default <see cref="P:System.Collections.Generic.EqualityComparer`1.Default"/> for the type of the values.</param>
            <returns>The mode of source.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if sourc eis empty.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.SelectOnlyWhere``1(System.Func{`0,System.Boolean},System.Func{`0,``0})">
            <summary>
            Conditionally projects elements from a sequence into a new form, transforming only items that satisfy a specified <paramref name="predicate"/>.
            </summary>
            <typeparam name="TResult">The Type of the elements the <paramref name="selector"/> produces.</typeparam>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and determines whether the element should be transformed.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the input sequence, if it passes the condition encapsulated by <paramref name="predicate"/>, and produces a new value.</param>
            <returns>The transformed elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.SelectOnlyWhere``1(System.Func{`0,System.Int32,System.Boolean},System.Func{`0,System.Int32,``0})">
            <summary>
            Conditionally projects elements from a sequence into a new form, transforming only items that satisfy a specified <paramref name="predicate"/>.
            </summary>
            <typeparam name="TResult">The Type of the elements the <paramref name="selector"/> produces.</typeparam>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that is passed each element of the input sequence and its index in the sourc ecollection and determines whether the element should be transformed.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the input sequence and its index in the sourc ecollection, if it passes the condition encapsulated by <paramref name="predicate"/>, and produces a new value.</param>
            <returns>The transformed elements.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.NotOfType``1">
            <summary>
            Filters a sequence of values by their type, omitting all objects of type <typeparamref name="TDerived"/>.
            </summary>
            <typeparam name="TDerived">The Type of the elements to exclude from the output sequence. Must be, derive from or implement <typeparamref name="T"/>. If <typeparamref name="TDerived"/> is not assignable to <typeparamref name="T"/>, the input sequence is returned as is.</typeparam>
            <returns>A sequence of all objects from sourc ethat are not of type <typeparamref name="TDerived"/>.</returns>
            <remarks>
            <typeparamref name="TDerived"/> is not constrained with regards to <typeparamref name="T"/>, so that consuming code needn't check for type relationships before calling this method.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.BuildDictionary``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Builds a <see cref="T:System.Collections.Generic.Dictionary`2"/> from two separate input sequences representing the keys and values respectively.
            </summary>
            <typeparam name="TValue">The Type of the values in the input sequence.</typeparam>
            <param name="keys">The sequence of keys.</param>
            <param name="values">The sequence of values.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> built from the input sequences.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the input sequences do not have the same length.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.MapTo``1(System.Func{`0,``0})">
            <summary>
            Builds a <see cref="T:System.Collections.Generic.Dictionary`2"/> from the input sequence, using the specified <paramref name="valueFactory"/> to generate values for each key.
            </summary>
            <typeparam name="TValue">The Type of the values in the output dictionary.</typeparam>
            <param name="keys">The input sequence of keys.</param>
            <param name="valueFactory">The <see cref="T:System.Func`2"/> that is passed each key from the input sequence and produces a value for the output dictionary.</param>
            <returns>A <see cref="T:System.Collections.Generic.Dictionary`2"/> built from the input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Correlate``1(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,System.Boolean})">
            <summary>
            Maps every element in the input sequence to a single value in the specified <paramref name="second"/> sequence. A <paramref name="predicate"/> decides
            </summary>
            <typeparam name="TOther">The Type of the elements in the <paramref name="second"/> sequence.</typeparam>
            <param name="second">The second sequence.</param>
            <param name="predicate">A <see cref="T:System.Func`3"/> that, in turn, is passed an element from the sourc esequence and an element from the <paramref name="second"/> sequence and determines whether they should be paired. It must return <see langword="true"/> for exactly one combination.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of tuples where each tuple contains an element from the sourc esequence and an element from the <paramref name="second"/> sequence, the combination of which satisfied the <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.TryGetReadOnlySpan``1(System.Collections.Generic.IEnumerable{``0},System.ReadOnlySpan{``0}@)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.TryGetReadOnlySpan(System.ReadOnlySpan{`0}@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.TryGetSpan``1(System.Collections.Generic.IEnumerable{``0},System.Span{``0}@)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.TryGetSpan(System.Span{`0}@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Split``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Split(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Halve``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Halve"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Random``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Random"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Random``1(System.Collections.Generic.IEnumerable{``0},System.Random)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Random(System.Random)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.ForEach(System.Action{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0,System.Int32})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.ForEach(System.Action{`0,System.Int32})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.ForEachAsync(System.Func{`0,System.Threading.Tasks.Task})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ForEachAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Threading.Tasks.Task})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.ForEachAsync(System.Func{`0,System.Int32,System.Threading.Tasks.Task})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.GetRange``1(System.Collections.Generic.IEnumerable{``0},System.Range)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.GetRange(System.Range)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.AllEqual``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.AllEqual"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Mode``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Mode(System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Sample``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Sample(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.OrderedSample``1(System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.OrderedSample(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SelectWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.SelectWhere(System.Func{`0,System.Boolean},System.Func{`0,`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SelectWhere``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Func{``0,System.Int32,``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.SelectWhere(System.Func{`0,System.Int32,System.Boolean},System.Func{`0,System.Int32,`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.IfWhere``1(System.Collections.Generic.IEnumerable{``0},System.Boolean,System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.IfWhere(System.Boolean,System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WhereNot``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.WhereNot(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Indexed``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Indexed"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.None"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.None``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.None(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.OnlyOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.OnlyOrDefault(`0)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.OnlyOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.OnlyOrDefault(System.Func{`0,System.Boolean},`0)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32,``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.ElementAtOrDefault(System.Int32,`0)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.IndexOf(`0,System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.IndexOf``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.IndexOf(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Majority``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Majority(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.BuildDictionaryLinear``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.BuildDictionaryLinear"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.BuildDictionaryZipped``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.BuildDictionaryZipped"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.AsAsynchronous``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.AsAsynchronous"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Interlace``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Interlace(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SequenceEquivalent``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.SequenceEquivalent(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ModeBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.ModeBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SelectOnlyWhere``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.SelectOnlyWhere``1(System.Func{`0,System.Boolean},System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SelectOnlyWhere``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean},System.Func{``0,System.Int32,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.SelectOnlyWhere``1(System.Func{`0,System.Int32,System.Boolean},System.Func{`0,System.Int32,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.NotOfType``2(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.NotOfType``1"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.BuildDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.BuildDictionary``1(System.Collections.Generic.IEnumerable{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.MapTo``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.MapTo``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Correlate``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__4`1.Correlate``1(System.Collections.Generic.IEnumerable{``0},System.Func{`0,``0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__5`1.Blitted">
            <summary>
            Blits the elements in the input sequence into a sequence of bytes.
            <typeparamref name="T"/> must be an unmanaged Type.
            </summary>
            <returns>All elements in the input sequence, blitted into a sequence of bytes and concatenated.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Blitted``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__5`1.Blitted"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__6`1.SelectMany">
            <summary>
            Flattens a sequence of nested sequences of the same type <typeparamref name="T"/> into a single sequence without transformation.
            </summary>
            <returns>A sequence that contains all the elements of the nested sequences.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.SelectMany``1(System.Collections.Generic.IEnumerable{System.Collections.Generic.IEnumerable{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__6`1.SelectMany"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__7.Dispose">
            <summary>
            Disposes all elements in this sequence of <see cref="T:System.IDisposable"/> objects.
            </summary>
            <param name="disposables">The sequence of <see cref="T:System.IDisposable"/> objects to dispose.</param>
            <remarks>
            If any of the <see cref="M:System.IDisposable.Dispose"/> calls throw an exception, the exceptions are collected and rethrown as an <see cref="T:System.AggregateException"/> after all <see cref="M:System.IDisposable.Dispose"/> calls have been made.
            <para/>If <paramref name="disposables"/> is of a type that implements <see cref="T:System.IDisposable"/> itself, the collection itself will <b>not</b> be disposed because binding prioritizes instance methods over extension methods. This scenario would require qualifying the identifier with the type name and calling it like a regular <see langword="static"/> method.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Dispose(System.Collections.Generic.IEnumerable{System.IDisposable})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__7.Dispose"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.CopyTo(LaquaiLib.Interfaces.ISpanProvider{`0},System.Int32)">
            <summary>
            Copies the elements of the input sequence into the <see cref="T:System.Span`1"/> provided by the specified <see cref="T:LaquaiLib.Interfaces.ISpanProvider`1"/>.
            </summary>
            <param name="spanProvider">An <see cref="T:LaquaiLib.Interfaces.ISpanProvider`1"/> implementation that provides a <see cref="T:System.Span`1"/> to copy elements to.</param>
            <param name="startIndex">The index in the target <see cref="T:System.Span`1"/> at which to start copying elements.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into(`0[],System.Int32,System.Boolean)">
            <summary>
            Copies the elements of the input sequence into the specified <see cref="T:System.Array"/>, starting at the specified
            index.
            </summary>
            <param name="target">The <see cref="T:System.Array"/> to copy elements to.</param>
            <param name="startIndex">The index in <paramref name="target"/> at which to start copying elements.</param>
            <param name="allowUnsafeMutation">Whether the method is allowed to begin mutating the <see cref="T:System.Span`1"/> if it is unable to ascertain whether all elements will fit. Defaults to <see langword="false"/>. May cause the source to be enumerated to copy into <paramref name="target"/>, but will only throw an exception when the items will not fit.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            Copies the elements of the input sequence into the specified <see cref="T:System.Collections.Generic.List`1"/>, starting at the specified index.
            The <see cref="T:System.Collections.Generic.List`1"/> will be resized if the input sequence contains more elements than the <see cref="T:System.Collections.Generic.List`1"/>'s current capacity.
            Efficient <see cref="T:System.Span`1"/>-based copying is employed when possible, otherwise falling back to <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>.
            </summary>
            <param name="target">The <see cref="T:System.Collections.Generic.List`1"/> to copy elements to.</param>
            <param name="startIndex">The index in <paramref name="target"/> at which to start copying elements.</param>
            <returns>The number of elements written to the target collection.</returns>
            <remarks>
            <paramref name="startIndex"/> defaults to <c>0</c>, meaning items will be overwritten from the beginning of the <see cref="T:System.Collections.Generic.List`1"/>. To force appending them, explicitly pass the current <see cref="P:System.Collections.Generic.List`1.Count"/> of <paramref name="target"/> or use <see cref="M:LaquaiLib.Extensions.IEnumerableExtensions.AddTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{``0})"/>.
            <para/>Note that this method inherently exposes unsafe behavior, such as results from setting <paramref name="startIndex"/> to a value greater than the current <see cref="P:System.Collections.Generic.List`1.Count"/>. Unassigned elements are left in an undefined state.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.AddTo(System.Collections.Generic.List{`0})">
            <summary>
            Adds the elements of the input sequence to the end of the specified <see cref="T:System.Collections.Generic.List`1"/>. The <see cref="T:System.Collections.Generic.List`1"/> will be resized if the input sequence contains more elements than the <see cref="T:System.Collections.Generic.List`1"/>'s current capacity (beyond its count). Efficient <see cref="T:System.Span`1"/>-based copying is employed when possible, otherwise falling back to <see cref="M:System.Collections.Generic.List`1.AddRange(System.Collections.Generic.IEnumerable{`0})"/>.
            </summary>
            <param name="target">The <see cref="T:System.Collections.Generic.List`1"/> to copy elements to.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into(System.Span{`0},System.Int32,System.Boolean)">
            <summary>
            Copies the elements of the input sequence into the specified <see cref="T:System.Span`1"/>.
            </summary>
            <param name="target">The <see cref="T:System.Span`1"/> to copy elements to.</param>
            <param name="startIndex">The index in <paramref name="target"/> at which to start copying elements.</param>
            <param name="allowUnsafeMutation">Whether the method is allowed to begin mutating the <see cref="T:System.Span`1"/> if it is unable to ascertain whether all elements will fit. Defaults to <see langword="false"/>. May cause the source to be enumerated to copy into <paramref name="target"/>, but will only throw an exception when the items will not fit.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into(System.Memory{`0},System.Int32,System.Boolean)">
            <summary>
            Copies the elements of the input sequence into the specified <see cref="T:System.Memory`1"/>.
            </summary>
            <param name="target">The <see cref="T:System.Memory`1"/> to copy elements to.</param>
            <param name="startIndex">The index in <paramref name="target"/> at which to start copying elements.</param>
            <param name="allowUnsafeMutation">Whether the method is allowed to begin mutating the <see cref="T:System.Memory`1"/> if it is unable to ascertain whether all elements will fit. Defaults to <see langword="false"/>. May cause the source to be enumerated to copy into <paramref name="target"/>, but will only throw an exception when the items will not fit.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into``1(System.Collections.Generic.IDictionary{`0,``0},System.Func{`0,``0},System.Boolean)">
            <summary>
            Copies the elements of the input sequence into the specified <see cref="T:System.Collections.Generic.Dictionary`2"/> using the specified <paramref name="valueFactory"/> to generate values for each key.
            </summary>
            <typeparam name="TValue">The Type of the values in the input sequence.</typeparam>
            <param name="target">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to copy elements to.</param>
            <param name="valueFactory">A <see cref="T:System.Func`2"/> that is passed each element of the input sequence and produces a value for the corresponding key.</param>
            <param name="overwrite">Whether to overwrite existing values in the <paramref name="target"/> dictionary. Defaults to <see langword="false"/>.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into``1(System.Collections.Generic.IDictionary{``0,`0},System.Func{`0,``0},System.Boolean)">
            <summary>
            Copies the elements of the input sequence into the specified <see cref="T:System.Collections.Generic.Dictionary`2"/> using the specified <paramref name="keyFactory"/> to generate keys for each value.
            </summary>
            <param name="target">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to copy elements to.</param>
            <param name="keyFactory">A <see cref="T:System.Func`2"/> that is passed each element of the input sequence and produces a key for the corresponding value.</param>
            <param name="overwrite">Whether to overwrite existing values in the <paramref name="target"/> dictionary. Defaults to <see langword="false"/>.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into(System.Collections.Generic.ICollection{`0})">
            <summary>
            Copies the elements of the input sequence into the specified <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="target">The <see cref="T:System.Collections.Generic.ICollection`1"/> to copy elements to.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.CopyTo``1(System.Collections.Generic.IEnumerable{``0},LaquaiLib.Interfaces.ISpanProvider{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.CopyTo(LaquaiLib.Interfaces.ISpanProvider{`0},System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Into``1(System.Collections.Generic.IEnumerable{``0},``0[],System.Int32,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into(`0[],System.Int32,System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Into``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into(System.Collections.Generic.List{`0},System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.AddTo``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.List{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.AddTo(System.Collections.Generic.List{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Into``1(System.Collections.Generic.IEnumerable{``0},System.Span{``0},System.Int32,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into(System.Span{`0},System.Int32,System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Into``1(System.Collections.Generic.IEnumerable{``0},System.Memory{``0},System.Int32,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into(System.Memory{`0},System.Int32,System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Into``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,``1},System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into``1(System.Collections.Generic.IDictionary{`0,``0},System.Func{`0,``0},System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Into``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IDictionary{``1,``0},System.Func{``0,``1},System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into``1(System.Collections.Generic.IDictionary{``0,`0},System.Func{`0,``0},System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Into``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.ICollection{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__8`1.Into(System.Collections.Generic.ICollection{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo(LaquaiLib.Interfaces.ISpanProvider{`0},System.Int32)">
            <summary>
            Copies the elements of the input <see cref="T:System.ReadOnlySpan`1"/> into the <see cref="T:System.Span`1"/> provided by the specified <see cref="T:LaquaiLib.Interfaces.ISpanProvider`1"/>.
            </summary>
            <param name="spanProvider">An <see cref="T:LaquaiLib.Interfaces.ISpanProvider`1"/> implementation that provides a <see cref="T:System.Span`1"/> to copy elements to.</param>
            <param name="startIndex">The index in the target <see cref="T:System.Span`1"/> at which to start copying elements.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the input <see cref="T:System.ReadOnlySpan`1"/> into the specified array of <typeparamref name="T"/>.
            </summary>
            <param name="target">The array to copy elements to.</param>
            <param name="startIndex">The index in <paramref name="target"/> at which to start copying elements.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo(System.Collections.Generic.List{`0},System.Int32)">
            <summary>
            Copies the elements of the input <see cref="T:System.ReadOnlySpan`1"/> into the specified <see cref="T:System.Collections.Generic.List`1"/>, starting at the specified index.
            </summary>
            <param name="target"></param>
            <param name="startIndex"></param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.AddTo(System.Collections.Generic.List{`0})">
            <summary>
            Adds the elements of the input <see cref="T:System.ReadOnlySpan`1"/> to the end of the specified <see cref="T:System.Collections.Generic.List`1"/>.
            The <see cref="T:System.Collections.Generic.List`1"/> will be resized if the input <see cref="T:System.ReadOnlySpan`1"/> contains more elements than the <see cref="T:System.Collections.Generic.List`1"/>'s current capacity (beyond its count).
            </summary>
            <param name="target">The <see cref="T:System.Collections.Generic.List`1"/> to copy elements to.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo(System.Memory{`0},System.Int32)">
            <summary>
            Copies the elements of the input <see cref="T:System.ReadOnlySpan`1"/> into the specified <see cref="T:System.Memory`1"/>.
            </summary>
            <param name="target">The <see cref="T:System.Memory`1"/> to copy elements to.</param>
            <param name="startIndex">The index in <paramref name="target"/> at which to start copying elements.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo``1(System.Collections.Generic.IDictionary{`0,``0},System.Func{`0,``0},System.Boolean)">
            <summary>
            Copies the elements of the input <see cref="T:System.ReadOnlySpan`1"/> into the specified <see cref="T:System.Collections.Generic.Dictionary`2"/> using the specified <paramref name="valueFactory"/> to generate values for each key.
            </summary>
            <typeparam name="TValue">The Type of the values in the input <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="target">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to copy elements to.</param>
            <param name="valueFactory">A <see cref="T:System.Func`2"/> that is passed each element of the input <see cref="T:System.ReadOnlySpan`1"/> and produces a value for the corresponding key.</param>
            <param name="overwrite">Whether to overwrite existing values in the <paramref name="target"/> dictionary. Defaults to <see langword="false"/>.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo``1(System.Collections.Generic.IDictionary{``0,`0},System.Func{`0,``0},System.Boolean)">
            <summary>
            Copies the elements of the input <see cref="T:System.ReadOnlySpan`1"/> into the specified <see cref="T:System.Collections.Generic.Dictionary`2"/> using the specified <paramref name="keyFactory"/> to generate keys for each value.
            </summary>
            <param name="target">The <see cref="T:System.Collections.Generic.Dictionary`2"/> to copy elements to.</param>
            <param name="keyFactory">A <see cref="T:System.Func`2"/> that is passed each element of the input <see cref="T:System.ReadOnlySpan`1"/> and produces a key for the corresponding value.</param>
            <param name="overwrite">Whether to overwrite existing values in the <paramref name="target"/> dictionary. Defaults to <see langword="false"/>.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo(System.Collections.Generic.ICollection{`0})">
            <summary>
            Copies the elements of the input <see cref="T:System.ReadOnlySpan`1"/> into the specified <see cref="T:System.Collections.Generic.ICollection`1"/>.
            </summary>
            <param name="target">The <see cref="T:System.Collections.Generic.ICollection`1"/> to copy elements to.</param>
            <returns>The number of elements written to the target collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.CopyTo``1(System.ReadOnlySpan{``0},LaquaiLib.Interfaces.ISpanProvider{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo(LaquaiLib.Interfaces.ISpanProvider{`0},System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.CopyTo``1(System.ReadOnlySpan{``0},``0[],System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo(`0[],System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.CopyTo``1(System.ReadOnlySpan{``0},System.Collections.Generic.List{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo(System.Collections.Generic.List{`0},System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.AddTo``1(System.ReadOnlySpan{``0},System.Collections.Generic.List{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.AddTo(System.Collections.Generic.List{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.CopyTo``1(System.ReadOnlySpan{``0},System.Memory{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo(System.Memory{`0},System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.CopyTo``2(System.ReadOnlySpan{``0},System.Collections.Generic.IDictionary{``0,``1},System.Func{``0,``1},System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo``1(System.Collections.Generic.IDictionary{`0,``0},System.Func{`0,``0},System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.CopyTo``2(System.ReadOnlySpan{``0},System.Collections.Generic.IDictionary{``1,``0},System.Func{``0,``1},System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo``1(System.Collections.Generic.IDictionary{``0,`0},System.Func{`0,``0},System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.CopyTo``1(System.ReadOnlySpan{``0},System.Collections.Generic.ICollection{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__9`1.CopyTo(System.Collections.Generic.ICollection{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__10`1.OrderBy``1(System.Func{`0,System.Int32,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements of a sequence in ascending order according to a key extracted from each element.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence to sort.</param>
            <param name="keySelector">The <see cref="T:System.Func`3"/> that is passed each element of the input sequence and its index in the original sequence and produces a key to use for sorting.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use for comparing the keys.</param>
            <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that iterates over the sorted input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__10`1.OrderByDescending``1(System.Func{`0,System.Int32,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements of a sequence in descending order according to a key extracted from each element.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence to sort.</param>
            <param name="keySelector">The <see cref="T:System.Func`3"/> that is passed each element of the input sequence and its index in the original sequence and produces a key to use for sorting.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use for comparing the keys.</param>
            <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that iterates over the sorted input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__10`1.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements of a sequence in ascending order according to another sequence that specifies the keys to use for sorting.
            </summary>
            <typeparam name="T">The Type of the elements in the sequences.</typeparam>
            <param name="source">The input sequence to sort.</param>
            <param name="keys">The sequence that specifies the keys to use for sorting.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use for comparing the keys.</param>
            <returns>The sorted input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__10`1.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Sorts the elements of a sequence in descending order according to another sequence that specifies the keys to use for sorting.
            </summary>
            <typeparam name="T">The Type of the elements in the sequences.</typeparam>
            <param name="source">The input sequence to sort.</param>
            <param name="keys">The sequence that specifies the keys to use for sorting.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use for comparing the keys.</param>
            <returns>The sorted input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1},System.Collections.Generic.IComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__10`1.OrderBy``1(System.Func{`0,System.Int32,``0},System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1},System.Collections.Generic.IComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__10`1.OrderByDescending``1(System.Func{`0,System.Int32,``0},System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__10`1.OrderBy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__10`1.OrderByDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__11`1.ThenBy``1(System.Func{`0,System.Int32,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Augments the sort order of a previously sorted sequence according to a key extracted from each element.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence to sort.</param>
            <param name="keySelector">The <see cref="T:System.Func`3"/> that is passed each element of the input sequence and its index in the sequence and produces a key to use for sorting.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use for comparing the keys.</param>
            <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that iterates over the sorted input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__11`1.ThenByDescending``1(System.Func{`0,System.Int32,``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Augments the sort order of a previously sorted sequence according to a key extracted from each element.
            </summary>
            <typeparam name="T">The Type of the elements in the input sequence.</typeparam>
            <param name="source">The input sequence to sort.</param>
            <param name="keySelector">The <see cref="T:System.Func`3"/> that is passed each element of the input sequence and its index in the sequence and produces a key to use for sorting.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use for comparing the keys.</param>
            <returns>An <see cref="T:System.Linq.IOrderedEnumerable`1"/> that iterates over the sorted input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__11`1.ThenBy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Augments the sort order of a previously sorted sequence using the specified sequence that specifies the keys to use for sorting.
            </summary>
            <typeparam name="T">The Type of the elements in the sequences.</typeparam>
            <param name="source">The input sequence to sort.</param>
            <param name="keys">The sequence that specifies the keys to use for sorting.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use for comparing the keys.</param>
            <returns>The sorted input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__11`1.ThenByDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})">
            <summary>
            Augments the sort order of a previously sorted sequence using the specified sequence that specifies the keys to use for sorting.
            </summary>
            <typeparam name="T">The Type of the elements in the sequences.</typeparam>
            <param name="source">The input sequence to sort.</param>
            <param name="keys">The sequence that specifies the keys to use for sorting.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IComparer`1"/> implementation to use for comparing the keys.</param>
            <returns>The sorted input sequence.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,System.Int32,``1},System.Collections.Generic.IComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__11`1.ThenBy``1(System.Func{`0,System.Int32,``0},System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,System.Int32,``1},System.Collections.Generic.IComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__11`1.ThenByDescending``1(System.Func{`0,System.Int32,``0},System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__11`1.ThenBy``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__11`1.ThenByDescending``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__12.Start">
            <summary>
            Starts all tasks in the specified collection.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__12.WaitAll(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for all <see cref="T:System.Threading.Tasks.Task"/>s in the specified enumerable to complete unless that wait is cancelled.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the wait.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__12.WaitAny(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for any <see cref="T:System.Threading.Tasks.Task"/> in the specified enumerable to complete unless that wait is cancelled.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the wait.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that completed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__12.WhenAll">
            <summary>
            Asynchronously waits for all <see cref="T:System.Threading.Tasks.Task"/>s in the specified enumerable to complete.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous wait operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__12.WhenAny">
            <summary>
            Asynchronously waits for any <see cref="T:System.Threading.Tasks.Task"/> in the specified enumerable to complete.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous wait operation. Its result resolves to the <see cref="T:System.Threading.Tasks.Task"/> that completed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__12.WhenEach">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> that will yield the specified <see cref="T:System.Threading.Tasks.Task"/>s as they complete.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> that iterates through the specified <see cref="T:System.Threading.Tasks.Task"/>s as they complete.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.Start(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__12.Start"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WaitAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__12.WaitAll(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WaitAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__12.WaitAny(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WhenAll(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__12.WhenAll"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WhenAny(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__12.WhenAny"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WhenEach(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__12.WhenEach"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__13`1.WaitAll(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for all <see cref="T:System.Threading.Tasks.Task"/>s in the specified enumerable to complete unless that wait is cancelled.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the wait.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__13`1.WaitAny(System.Threading.CancellationToken)">
            <summary>
            Synchronously waits for any <see cref="T:System.Threading.Tasks.Task"/> in the specified enumerable to complete unless that wait is cancelled.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the wait.</param>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> that completed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__13`1.WhenAll">
            <summary>
            Asynchronously waits for all <see cref="T:System.Threading.Tasks.Task"/>s in the specified enumerable to complete.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous wait operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__13`1.WhenAny">
            <summary>
            Asynchronously waits for any <see cref="T:System.Threading.Tasks.Task"/> in the specified enumerable to complete.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous wait operation. Its result resolves to the <see cref="T:System.Threading.Tasks.Task"/> that completed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__13`1.WhenEach">
            <summary>
            Gets an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> that will yield the specified <see cref="T:System.Threading.Tasks.Task"/>s as they complete.
            </summary>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> that iterates through the specified <see cref="T:System.Threading.Tasks.Task"/>s as they complete.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WaitAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__13`1.WaitAll(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WaitAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__13`1.WaitAny(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WhenAll``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__13`1.WhenAll"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WhenAny``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__13`1.WhenAny"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.WhenEach``1(System.Collections.Generic.IEnumerable{System.Threading.Tasks.Task{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__13`1.WhenEach"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToStack(System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.Stack`1"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>, optionally preserving the order of elements (that is, the default behavior of <see cref="T:System.Collections.Generic.Stack`1"/> would cause the elements to be popped in reverse order).
            </summary>
            <param name="preserveOrder">Whether to preserve the order of elements in the resulting <see cref="T:System.Collections.Generic.Stack`1"/>. If set to <see langword="true"/>, the elements will be popped in the same order as they appear in the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Generic.Stack`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToStack``1(System.Func{`0,``0},System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.Stack`1"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function, optionally preserving the order of elements (that is, the default behavior of <see cref="T:System.Collections.Generic.Stack`1"/> would cause the elements to be popped in reverse order).
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Generic.Stack`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <param name="preserveOrder">Whether to preserve the order of elements in the resulting <see cref="T:System.Collections.Generic.Stack`1"/>. If set to <see langword="true"/>, the elements will be popped in the same order as they appear in the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Generic.Stack`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToStack``1(System.Func{`0,System.Int32,``0},System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.Stack`1"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function, optionally preserving the order of elements (that is, the default behavior of <see cref="T:System.Collections.Generic.Stack`1"/> would cause the elements to be popped in reverse order).
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Generic.Stack`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <param name="preserveOrder">Whether to preserve the order of elements in the resulting <see cref="T:System.Collections.Generic.Stack`1"/>. If set to <see langword="true"/>, the elements will be popped in the same order as they appear in the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Generic.Stack`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToQueue">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.Queue`1"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>The created <see cref="T:System.Collections.Generic.Queue`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToQueue``1(System.Func{`0,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.Queue`1"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Generic.Queue`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Generic.Queue`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToQueue``1(System.Func{`0,System.Int32,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.Queue`1"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Generic.Queue`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Generic.Queue`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToArray``1(System.Func{`0,``0})">
            <summary>
            Creates a new <see cref="T:System.Array"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting array.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created array.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToArray``1(System.Func{`0,System.Int32,``0})">
            <summary>
            Creates a new <see cref="T:System.Array"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting array.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created array.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToImmutableArray``1(System.Func{`0,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToImmutableArray``1(System.Func{`0,System.Int32,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Immutable.ImmutableArray`1"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Immutable.ImmutableArray`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToList``1(System.Func{`0,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.List`1"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToList``1(System.Func{`0,System.Int32,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.List`1"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Generic.List`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToHashSet``1(System.Func{`0,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.HashSet`1"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Generic.HashSet`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Generic.HashSet`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToHashSet``1(System.Func{`0,System.Int32,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Generic.HashSet`1"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Generic.HashSet`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Generic.HashSet`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToFrozenSet``1(System.Func{`0,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Frozen.FrozenSet`1"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Frozen.FrozenSet`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Frozen.FrozenSet`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToFrozenSet``1(System.Func{`0,System.Int32,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Frozen.FrozenSet`1"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Frozen.FrozenSet`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Frozen.FrozenSet`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToImmutableHashSet``1(System.Func{`0,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Immutable.ImmutableHashSet`1"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Immutable.ImmutableHashSet`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Immutable.ImmutableHashSet`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToImmutableHashSet``1(System.Func{`0,System.Int32,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Immutable.ImmutableHashSet`1"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Immutable.ImmutableHashSet`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Immutable.ImmutableHashSet`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToImmutableSortedSet``1(System.Func{`0,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToImmutableSortedSet``1(System.Func{`0,System.Int32,``0})">
            <summary>
            Creates a new <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1"/> of <typeparamref name="TResult"/> from the specified <see cref="T:System.Collections.Generic.IEnumerable`1"/> using the specified <paramref name="selector"/> function.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1"/>.</typeparam>
            <param name="selector">The function to transform each element of the source collection.</param>
            <returns>The created <see cref="T:System.Collections.Immutable.ImmutableSortedSet`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToStack``1(System.Collections.Generic.IEnumerable{``0},System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToStack(System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToStack``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToStack``1(System.Func{`0,``0},System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToStack``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1},System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToStack``1(System.Func{`0,System.Int32,``0},System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToQueue``1(System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToQueue"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToQueue``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToQueue``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToQueue``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToQueue``1(System.Func{`0,System.Int32,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToArray``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToArray``1(System.Func{`0,System.Int32,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToImmutableArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToImmutableArray``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToImmutableArray``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToImmutableArray``1(System.Func{`0,System.Int32,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToList``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToList``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToList``1(System.Func{`0,System.Int32,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToHashSet``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToHashSet``1(System.Func{`0,System.Int32,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToFrozenSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToFrozenSet``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToFrozenSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToFrozenSet``1(System.Func{`0,System.Int32,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToImmutableHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToImmutableHashSet``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToImmutableHashSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToImmutableHashSet``1(System.Func{`0,System.Int32,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToImmutableSortedSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToImmutableSortedSet``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumerableExtensions.ToImmutableSortedSet``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumerableExtensions.<>E__14`1.ToImmutableSortedSet``1(System.Func{`0,System.Int32,``0})"/>
        </member>
        <member name="T:LaquaiLib.Extensions.IEnumeratorExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.IEnumerator`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumeratorExtensions.<>E__0`1.AsEnumerable">
            <summary>
            Consumes the specified <see cref="T:System.Collections.Generic.IEnumerator`1"/> starting at its current position, yielding each element.
            </summary>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerator`1"/> to iterate over.</param>
            <returns>The elements of the <paramref name="source"/> as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumeratorExtensions.<>E__0`1.AsAsynchronous">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> wrapper around the specified <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </summary>
            <typeparam name="T">The type of elements in the <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerator`1"/> to wrap.</param>
            <returns>The <paramref name="source"/> as an <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumeratorExtensions.AsEnumerable``1(System.Collections.Generic.IEnumerator{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumeratorExtensions.<>E__0`1.AsEnumerable"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IEnumeratorExtensions.AsAsynchronous``1(System.Collections.Generic.IEnumerator{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IEnumeratorExtensions.<>E__0`1.AsAsynchronous"/>
        </member>
        <member name="T:LaquaiLib.Extensions.IGroupingExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Linq.IGrouping`2"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.<>E__0`2.Deconstruct(`0@,System.Collections.Generic.IEnumerable{`1}@)">
            <summary>
            Deconstructs an <see cref="T:System.Linq.IGrouping`2"/> into its <see cref="P:System.Linq.IGrouping`2.Key"/> and elements as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="TKey">The Type of the key of the <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <typeparam name="TElement">The Type of the elements of the <see cref="T:System.Linq.IGrouping`2"/>.</typeparam>
            <param name="grouping">The <see cref="T:System.Linq.IGrouping`2"/> to deconstruct.</param>
            <param name="key">An <see langword="out"/> variable that will be assigned the <see cref="P:System.Linq.IGrouping`2.Key"/> of the <see cref="T:System.Linq.IGrouping`2"/>.</param>
            <param name="elements">An <see langword="out"/> variable that will be assigned the elements of the <see cref="T:System.Linq.IGrouping`2"/> as an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.Deconstruct``2(System.Linq.IGrouping{``0,``1},``0@,System.Collections.Generic.IEnumerable{``1}@)">
            <inheritdoc cref="M:LaquaiLib.Extensions.IGroupingExtensions.<>E__0`2.Deconstruct(`0@,System.Collections.Generic.IEnumerable{`1}@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.<>E__1`2.ToListDictionary">
            <summary>
            Constructs a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>. The keys of the dictionary are the <see cref="P:System.Linq.IGrouping`2.Key"/>s of the <see cref="T:System.Linq.IGrouping`2"/>s, and the values are the values of the <see cref="T:System.Linq.IGrouping`2"/>s as <see cref="T:System.Collections.Generic.List`1"/>s to allow for adding more values.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TElement">The Type of the values of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>s to construct the <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <returns>The constructed <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.<>E__1`2.ToArrayDictionary">
            <summary>
            Constructs a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>. The keys of the dictionary are the <see cref="P:System.Linq.IGrouping`2.Key"/>s of the <see cref="T:System.Linq.IGrouping`2"/>s, and the values are the values of the <see cref="T:System.Linq.IGrouping`2"/>s as <see cref="T:System.Array"/>s.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TElement">The Type of the values of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>s to construct the <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <returns>The constructed <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.<>E__1`2.ToListDictionary``1(System.Func{`1,``0})">
            <summary>
            Constructs a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>. The keys of the dictionary are the <see cref="P:System.Linq.IGrouping`2.Key"/>s of the <see cref="T:System.Linq.IGrouping`2"/>s, and the values are the values of the <see cref="T:System.Linq.IGrouping`2"/>s transformed using a selector <see cref="T:System.Func`2"/> as <see cref="T:System.Collections.Generic.List`1"/>s to allow for adding more values.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TElement">The Type of the values of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TTransform">The Type of the values of the <see cref="T:System.Collections.Generic.List`1"/>s.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>s to construct the <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each <typeparamref name="TElement"/> in the <see cref="T:System.Linq.IGrouping`2"/>s and returns an instance of <typeparamref name="TTransform"/>.</param>
            <returns>The constructed <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.<>E__1`2.ToArrayDictionary``1(System.Func{`1,``0})">
            <summary>
            Constructs a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>. The keys of the dictionary are the <see cref="P:System.Linq.IGrouping`2.Key"/>s of the <see cref="T:System.Linq.IGrouping`2"/>s, and the values are the values of the <see cref="T:System.Linq.IGrouping`2"/>s as <see cref="T:System.Array"/>s.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TElement">The Type of the values of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TTransform">The Type of the values of the <see cref="T:System.Collections.Generic.List`1"/>s.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>s to construct the <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each <typeparamref name="TElement"/> in the <see cref="T:System.Linq.IGrouping`2"/>s and returns an instance of <typeparamref name="TTransform"/>.</param>
            <returns>The constructed <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.ToListDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IGroupingExtensions.<>E__1`2.ToListDictionary"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.ToArrayDictionary``2(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IGroupingExtensions.<>E__1`2.ToArrayDictionary"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.ToListDictionary``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},System.Func{``1,``2})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IGroupingExtensions.<>E__1`2.ToListDictionary``1(System.Func{`1,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.ToArrayDictionary``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``1}},System.Func{``1,``2})">
            <inheritdoc cref="M:LaquaiLib.Extensions.IGroupingExtensions.<>E__1`2.ToArrayDictionary``1(System.Func{`1,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.ToDictionary``3(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``2}})">
            <summary>
            Constructs a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>. The keys of the dictionary are the <see cref="P:System.Linq.IGrouping`2.Key"/>s of the <see cref="T:System.Linq.IGrouping`2"/>s, and the values are the values of the <see cref="T:System.Linq.IGrouping`2"/>s as <typeparamref name="TCollection"/>s.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TCollection">The Type of the collections that will be used to store the values of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TElement">The Type of the values of the <typeparamref name="TCollection"/>s.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>s to construct the <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <returns>The constructed <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.IGroupingExtensions.ToDictionary``4(System.Collections.Generic.IEnumerable{System.Linq.IGrouping{``0,``2}},System.Func{``2,``3})">
            <summary>
            Constructs a <see cref="T:System.Collections.Generic.Dictionary`2"/> from an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>. The keys of the dictionary are the <see cref="P:System.Linq.IGrouping`2.Key"/>s of the <see cref="T:System.Linq.IGrouping`2"/>s, and the values are the values of the <see cref="T:System.Linq.IGrouping`2"/>s as <typeparamref name="TCollection"/>s.
            </summary>
            <typeparam name="TKey">The Type of the keys of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TCollection">The Type of the collections that will be used to store the values of the <see cref="T:System.Linq.IGrouping`2"/>s.</typeparam>
            <typeparam name="TElement">The Type of the values of the <typeparamref name="TCollection"/>s.</typeparam>
            <typeparam name="TTransform">The Type of the values of the <see cref="T:System.Collections.Generic.List`1"/>s.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Linq.IGrouping`2"/>s to construct the <see cref="T:System.Collections.Generic.Dictionary`2"/> from.</param>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each <typeparamref name="TElement"/> in the <see cref="T:System.Linq.IGrouping`2"/>s and returns an instance of <typeparamref name="TTransform"/>.</param>
            <returns>The constructed <see cref="T:System.Collections.Generic.Dictionary`2"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Extensions.NumberExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Numerics.INumber`1"/>-implementing Types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.NumberExtensions.<>E__0`1.HasFlag(`0)">
            <summary>
            Determines whether the specified number has the specified flag(s) set, that is, whether the bitwise AND of the number and the other number is equal to the other number.
            This is insanely slow compared to doing the bitwise operation yourself since this has to use interface binding.
            </summary>
            <typeparam name="T">The type of the number.</typeparam>
            <param name="number">The number.</param>
            <param name="other">The other number.</param>
            <returns>Whether the specified number has the specified flag(s) set.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.NumberExtensions.HasFlag``1(``0,``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.NumberExtensions.<>E__0`1.HasFlag(`0)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.NumberExtensions.<>E__1`1.AsBinary">
            <summary>
            Converts the specified number to its binary representation.
            </summary>
            <typeparam name="T">The type of the number.</typeparam>
            <param name="number">The number.</param>
            <returns>The binary representation of the specified number.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.NumberExtensions.<>E__1`1.AsHex">
            <summary>
            Converts the specified number to its hexadecimal representation.
            </summary>
            <typeparam name="T">The type of the number.</typeparam>
            <param name="number">The number.</param>
            <returns>The hexadecimal representation of the specified number.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.NumberExtensions.AsBinary``1(``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.NumberExtensions.<>E__1`1.AsBinary"/>
        </member>
        <member name="M:LaquaiLib.Extensions.NumberExtensions.AsHex``1(``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.NumberExtensions.<>E__1`1.AsHex"/>
        </member>
        <member name="T:LaquaiLib.Extensions.LinkedListNodeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.LinkedListNode`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.LinkedListNodeExtensions.<>E__0`1.DequeNext">
            <summary>
            Returns the next node in the <see cref="T:System.Collections.Generic.LinkedList`1"/> to which <paramref name="node"/> belongs, wrapping around to the first node if <paramref name="node"/> is the last node (that is, the <see cref="T:System.Collections.Generic.LinkedList`1"/> is treated like a "deque" data structure).
            </summary>
            <typeparam name="T">The type of the elements in the <see cref="T:System.Collections.Generic.LinkedList`1"/>.</typeparam>
            <param name="node">The node to get the next node of.</param>
            <returns>The next node as described, or whatever <see cref="P:System.Collections.Generic.LinkedListNode`1.Next"/> returns if <paramref name="node"/> is not the last node. This can be <see langword="null"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.LinkedListNodeExtensions.<>E__0`1.DequePrevious">
            <summary>
            Returns the previous node in the <see cref="T:System.Collections.Generic.LinkedList`1"/> to which <paramref name="node"/> belongs, wrapping around to the last node if <paramref name="node"/> is the first node (that is, the <see cref="T:System.Collections.Generic.LinkedList`1"/> is treated like a "deque" data structure).
            </summary>
            <typeparam name="T">The type of the elements in the <see cref="T:System.Collections.Generic.LinkedList`1"/>.</typeparam>
            <param name="node">The node to get the previous node of.</param>
            <returns>The previous node as described, or whatever <see cref="P:System.Collections.Generic.LinkedListNode`1.Previous"/> returns if <paramref name="node"/> is not the first node. This can be <see langword="null"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.LinkedListNodeExtensions.DequeNext``1(System.Collections.Generic.LinkedListNode{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.LinkedListNodeExtensions.<>E__0`1.DequeNext"/>
        </member>
        <member name="M:LaquaiLib.Extensions.LinkedListNodeExtensions.DequePrevious``1(System.Collections.Generic.LinkedListNode{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.LinkedListNodeExtensions.<>E__0`1.DequePrevious"/>
        </member>
        <member name="M:LaquaiLib.Extensions.LinkedListNodeExtensions.<>E__1`1.ToDeque">
            <summary>
            Constructs a <see cref="T:LaquaiLib.Collections.Deque`1"/> from the specified <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="T">The type of the elements in the <see cref="T:System.Collections.Generic.LinkedList`1"/>.</typeparam>
            <param name="linkedList">The <see cref="T:System.Collections.Generic.LinkedList`1"/> to construct the <see cref="T:LaquaiLib.Collections.Deque`1"/> from.</param>
            <returns>The newly constructed <see cref="T:LaquaiLib.Collections.Deque`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.LinkedListNodeExtensions.ToDeque``1(System.Collections.Generic.LinkedList{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.LinkedListNodeExtensions.<>E__1`1.ToDeque"/>
        </member>
        <member name="T:LaquaiLib.Extensions.LinqXml.XAttributeExtensions">
            <summary>
            Provides extention methods for the <see cref="T:System.Xml.Linq.XAttribute"/> type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.LinqXml.XAttributeExtensions.<>E__0.ReplaceWith(System.Xml.Linq.XAttribute)">
            <summary>
            Replaces this <see cref="T:System.Xml.Linq.XAttribute"/> with another one.
            </summary>
            <param name="attribute">The <see cref="T:System.Xml.Linq.XAttribute"/> to replace.</param>
            <param name="other">The <see cref="T:System.Xml.Linq.XAttribute"/> to replace <paramref name="attribute"/> with. If <see langword="null"/>, <paramref name="attribute"/> is removed without replacement.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.LinqXml.XAttributeExtensions.ReplaceWith(System.Xml.Linq.XAttribute,System.Xml.Linq.XAttribute)">
            <inheritdoc cref="M:LaquaiLib.Extensions.LinqXml.XAttributeExtensions.<>E__0.ReplaceWith(System.Xml.Linq.XAttribute)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.LinqXml.XElementExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Xml.Linq.XElement"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.LinqXml.XElementExtensions.<>E__0.Siblings">
            <summary>
            Returns a collection of the sibling elements of this node, in document order.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XElement"/> to get the siblings of.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the sibling elements of this node, in document order.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.LinqXml.XElementExtensions.<>E__0.Siblings(System.Xml.Linq.XName)">
            <summary>
            Returns a collection of the sibling elements of this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"/> are included in the collection.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XElement"/> to get the siblings of.</param>
            <param name="name">The <see cref="T:System.Xml.Linq.XName"/> to match.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.Linq.XElement"/> containing the sibling elements of this node, in document order. Only elements that have a matching <see cref="T:System.Xml.Linq.XName"/> are included in the collection.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.LinqXml.XElementExtensions.Siblings(System.Xml.Linq.XElement)">
            <inheritdoc cref="M:LaquaiLib.Extensions.LinqXml.XElementExtensions.<>E__0.Siblings"/>
        </member>
        <member name="M:LaquaiLib.Extensions.LinqXml.XElementExtensions.Siblings(System.Xml.Linq.XElement,System.Xml.Linq.XName)">
            <inheritdoc cref="M:LaquaiLib.Extensions.LinqXml.XElementExtensions.<>E__0.Siblings(System.Xml.Linq.XName)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.LinqXml.XNodeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Xml.Linq.XNode"/> type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.LinqXml.XNodeExtensions.<>E__0.ReplaceWith(System.ReadOnlySpan{System.Object})">
            <summary>
            Replaces this node with the specified replacement <paramref name="content"/>.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XNode"/> to replace.</param>
            <param name="content">The content to replace the node with.</param>
            <returns>A reference to the removed node (which no longer has a parent).</returns>
            <remarks>
            Because this overload may insert multiple elements, the returned reference is to the removed element and not to one of the inserted elements.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.LinqXml.XNodeExtensions.<>E__0.SiblingNodes">
            <summary>
            Returns a collection of the sibling nodes of this node, in document order.
            </summary>
            <param name="source">The <see cref="T:System.Xml.Linq.XNode"/> to get the siblings of.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Xml.Linq.XNode"/> containing the sibling nodes of this node, in document order.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.LinqXml.XNodeExtensions.ReplaceWith(System.Xml.Linq.XNode,System.ReadOnlySpan{System.Object})">
            <inheritdoc cref="M:LaquaiLib.Extensions.LinqXml.XNodeExtensions.<>E__0.ReplaceWith(System.ReadOnlySpan{System.Object})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.LinqXml.XNodeExtensions.SiblingNodes(System.Xml.Linq.XNode)">
            <inheritdoc cref="M:LaquaiLib.Extensions.LinqXml.XNodeExtensions.<>E__0.SiblingNodes"/>
        </member>
        <member name="T:LaquaiLib.Extensions.ListExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.List`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.<>E__0`1.RemoveAt(System.Index)">
            <summary>
            Removes the element at the specified <paramref name="index"/> from this <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="index">An <see cref="T:System.Index"/> instance that indicates where the item to be removed is located in the <see cref="T:System.Collections.Generic.IList`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.RemoveAt``1(System.Collections.Generic.IList{``0},System.Index)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ListExtensions.<>E__0`1.RemoveAt(System.Index)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.RemoveRange(System.Range)">
            <summary>
            Removes elements in a specified <paramref name="range"/> from this <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="range">A <see cref="T:System.Range"/> instance that indicates where the items to be removed are located in the <see cref="T:System.Collections.Generic.List`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.KeepOnly(System.Func{`0,System.Boolean})">
            <summary>
            Removes all elements from this <see cref="T:System.Collections.Generic.List`1"/> that do not match the conditions defined by the specified <paramref name="predicate"/>.
            </summary>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> delegate that defines the conditions of the elements to keep.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.AsMemory(System.Index,System.Int32)">
            <summary>
            Retrieves a <see cref="T:System.Memory`1"/> over a portion of the backing array of the specified <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="start">The starting index of the <see cref="T:System.Memory`1"/> to be retrieved.</param>
            <param name="length">The length of the <see cref="T:System.Memory`1"/> to be retrieved.</param>
            <returns>A <see cref="T:System.Memory`1"/> over the backing array of the specified <see cref="T:System.Collections.Generic.List`1"/>.</returns>
            <remarks>
            When the <see cref="T:System.Collections.Generic.List`1"/> undergoes a resize through any means, the <see cref="T:System.Memory`1"/> returned by this method becomes invalid, just like with <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.AsMemory(System.Range)">
            <summary>
            Retrieves a <see cref="T:System.Memory`1"/> over a portion of the backing array of the specified <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="range">The <see cref="T:System.Range"/> that indicates the portion of the backing array to be retrieved.</param>
            <returns>A <see cref="T:System.Memory`1"/> over the backing array of the specified <see cref="T:System.Collections.Generic.List`1"/>.</returns>
            <remarks>
            When the <see cref="T:System.Collections.Generic.List`1"/> undergoes a resize through any means, the <see cref="T:System.Memory`1"/> returned by this method becomes invalid, just like with <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.AsSpan(System.Index,System.Int32)">
            <summary>
            Retrieves a <see cref="T:System.Span`1"/> over a portion of the backing array of the specified <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to retrieve the backing array from.</param>
            <param name="start">The starting index of the <see cref="T:System.Span`1"/> to be retrieved.</param>
            <param name="length">The length of the <see cref="T:System.Span`1"/> to be retrieved.</param>
            <returns>A <see cref="T:System.Span`1"/> over the backing array of the specified <see cref="T:System.Collections.Generic.List`1"/>.</returns>
            <remarks>
            When the <see cref="T:System.Collections.Generic.List`1"/> undergoes a resize through any means, the <see cref="T:System.Memory`1"/> returned by this method becomes invalid, just like with <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.AsSpan(System.Range)">
            <summary>
            Retrieves a <see cref="T:System.Span`1"/> over a portion of the backing array of the specified <see cref="T:System.Collections.Generic.List`1"/>.
            </summary>
            <param name="list">The <see cref="T:System.Collections.Generic.List`1"/> to retrieve the backing array from.</param>
            <param name="range">The <see cref="T:System.Range"/> that indicates the portion of the backing array to be retrieved.</param>
            <returns>A <see cref="T:System.Span`1"/> over the backing array of the specified <see cref="T:System.Collections.Generic.List`1"/>.</returns>
            <remarks>
            When the <see cref="T:System.Collections.Generic.List`1"/> undergoes a resize through any means, the <see cref="T:System.Memory`1"/> returned by this method becomes invalid, just like with <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.SetCount(System.Int32)">
            <summary>
            Sets the <see cref="P:System.Collections.Generic.List`1.Count"/> of the specified <see cref="T:System.Collections.Generic.List`1"/> to the specified <paramref name="count"/>.
            This is done through <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.SetCount``1(System.Collections.Generic.List{``0},System.Int32)"/> and should be used as cautiously as that method.
            </summary>
            <param name="count">The new <see cref="P:System.Collections.Generic.List`1.Count"/> of the specified <see cref="T:System.Collections.Generic.List`1"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.ExpandBy(System.Int32,System.Int32)">
            <summary>
            Increases the capacity of the <see cref="T:System.Collections.Generic.List`1"/> so it can hold at least <paramref name="count"/> elements in addition to its current <see cref="P:System.Collections.Generic.List`1.Count"/>.
            </summary>
            <param name="count">The number of elements to reserve additional space for.</param>
            <param name="startAt">The index to consider the start of empty space in the <see cref="T:System.Collections.Generic.List`1"/>. Defaults to its current <see cref="P:System.Collections.Generic.List`1.Count"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> over the requested space in <see cref="T:System.Collections.Generic.List`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.RemoveRange``1(System.Collections.Generic.List{``0},System.Range)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.RemoveRange(System.Range)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.KeepOnly``1(System.Collections.Generic.List{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.KeepOnly(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.AsMemory``1(System.Collections.Generic.List{``0},System.Index,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.AsMemory(System.Index,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.AsMemory``1(System.Collections.Generic.List{``0},System.Range)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.AsMemory(System.Range)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.AsSpan``1(System.Collections.Generic.List{``0},System.Index,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.AsSpan(System.Index,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.AsSpan``1(System.Collections.Generic.List{``0},System.Range)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.AsSpan(System.Range)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.SetCount``1(System.Collections.Generic.List{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.SetCount(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ListExtensions.ExpandBy``1(System.Collections.Generic.List{``0},System.Int32,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ListExtensions.<>E__1`1.ExpandBy(System.Int32,System.Int32)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.MemoryExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Span`1"/>, <see cref="T:System.ReadOnlySpan`1"/>, <see cref="T:System.Memory`1"/> and <see cref="T:System.ReadOnlyMemory`1"/> types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__0`1.ForEach(System.Action{`0})">
            <summary>
            Invokes the specified <paramref name="action"/> for each element in the <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke for each element.</param>
            <returns>The original <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__0`1.ForEach(System.Action{`0,System.Int32})">
            <summary>
            Invokes the specified <paramref name="action"/> for each element in the <see cref="T:System.ReadOnlySpan`1"/>, passing the element and its index.
            </summary>
            <param name="action">The <see cref="T:System.Action`2"/> to invoke for each element.</param>
            <returns>The original <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__0`1.Split(System.Span{`0},System.Span{`0},System.Func{`0,System.Boolean})">
            <summary>
            Splits the specified <paramref name="span"/> into the specified destination <see cref="T:System.Span`1"/>s based on the given <paramref name="predicate"/>.
            </summary>
            <typeparam name="T">The Type of the items in the array.</typeparam>
            <param name="span">The <see cref="T:System.ReadOnlySpan`1"/> to split.</param>
            <param name="whereTrue">The <see cref="T:System.Span`1"/> that will contain all elements that match the given <paramref name="predicate"/>.</param>
            <param name="whereFalse">The <see cref="T:System.Span`1"/> that will contain all elements that do not match the given <paramref name="predicate"/>.</param>
            <param name="predicate">The <see cref="T:System.Predicate`1"/> that checks each element for a condition.</param>
            <remarks>
            <paramref name="whereTrue"/> and <paramref name="whereFalse"/>'s lengths are not checked against <paramref name="span"/>'s length.
            If they are too small, an <see cref="T:System.IndexOutOfRangeException"/> will be thrown by the runtime.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ForEach``1(System.ReadOnlySpan{``0},System.Action{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__0`1.ForEach(System.Action{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ForEach``1(System.ReadOnlySpan{``0},System.Action{``0,System.Int32})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__0`1.ForEach(System.Action{`0,System.Int32})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Split``1(System.ReadOnlySpan{``0},System.Span{``0},System.Span{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__0`1.Split(System.Span{`0},System.Span{`0},System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__1.ReadString(System.Int32@,System.Text.Encoding)">
            <summary>
            Reads a <c>\0</c> or equivalently terminated (based on the specified <paramref name="encoding"/>) <see langword="string"/> from the specified <paramref name="span"/>. This terminator is stripped from the input.
            </summary>
            <param name="span">The <see cref="T:System.ReadOnlySpan`1" /> from which to read.</param>
            <param name="ptr">The position at which to begin reading.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding" /> instance to use to interpret the read <see langword="byte"/>s. Defaults to <see cref="P:System.Text.Encoding.UTF8" /> (which might be undesirable for Interop scenarios...).</param>
            <returns>The reconstructed <see langword="string"/> or an empty <see langword="string"/> if the <see langword="byte"/> at <paramref name="ptr"/> was <c>0</c>. The length of the string is equal to the number by which <paramref name="ptr"/> was incremented.</returns>
            <remarks>
            Reading to the end of the <paramref name="span"/> without encountering a <c>\0</c> <see langword="byte"/> is considered illegal behavior and will throw an exception.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="span"/> ends before a null terminator was encountered.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__1.ReadString(System.Int32,System.Text.Encoding)">
            <summary>
            Reads a <c>\0</c> or equivalently terminated (based on the specified <paramref name="encoding"/>) <see langword="string"/> from the specified <paramref name="span"/>. This terminator is stripped from the input.
            </summary>
            <param name="span">The <see cref="T:System.ReadOnlySpan`1" /> from which to read.</param>
            <param name="ptr">The position at which to begin reading.</param>
            <param name="encoding">An <see cref="T:System.Text.Encoding" /> instance to use to interpret the read <see langword="byte"/>s. Defaults to <see cref="P:System.Text.Encoding.UTF8" /> (which might be undesirable for Interop scenarios...).</param>
            <returns>The reconstructed <see langword="string"/> or an empty <see langword="string"/> if the <see langword="byte"/> at <paramref name="ptr"/> was <c>0</c>. The length of the string is equal to the number by which <paramref name="ptr"/> was incremented.</returns>
            <remarks>
            Reading to the end of the <paramref name="span"/> without encountering a <c>\0</c> <see langword="byte"/> is considered illegal behavior and will throw an exception.
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if the specified <paramref name="span"/> ends before a null terminator was encountered.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__1.Read``1(System.Int32@)">
            <summary>
            Reads a value of type <typeparamref name="T"/> from the specified <paramref name="span"/> at the specified <paramref name="ptr"/>.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="span">The source <see cref="T:System.ReadOnlySpan`1"/> of <see langword="byte"/>.</param>
            <param name="ptr">The pointer to the position in the <paramref name="span"/> from which to read the value.</param>
            <returns>An instance of <typeparamref name="T"/> read from the <paramref name="span"/>.</returns>
            <remarks>
            There are several special-cased types.
            <list type="bullet">
            <item/><see langword="string"/>s are read using <see cref="M:LaquaiLib.Extensions.MemoryExtensions.ReadString(System.ReadOnlySpan{System.Byte},System.Int32@,System.Text.Encoding)"/> instead of pointer casts.
            <item/><see langword="byte"/>s require no cast at all.
            <item/><see langword="bool"/>s are normalized to hold a value of exactly <c>1</c> or <c>0</c>.
            </list>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if <typeparamref name="T"/> is any reference type except <see langword="string"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="span"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="ptr"/> lies outside the bounds of the <paramref name="span"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the requested value of type <typeparamref name="T"/> is too large to be read from the <paramref name="span"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__1.Read``1(System.Int32@,System.Int32)">
            <summary>
            Reads <paramref name="count"/> consecutive values of type <typeparamref name="T"/> from the specified <paramref name="span"/> at the specified <paramref name="ptr"/>.
            </summary>
            <typeparam name="T">The type of the values to read.</typeparam>
            <param name="span">The source <see cref="T:System.ReadOnlySpan`1"/> of <see langword="byte"/>.</param>
            <param name="ptr">The pointer to the position in the <paramref name="span"/> from which to read the values.</param>
            <param name="count">The number of values to read.</param>
            <returns>An array of <typeparamref name="T"/> of type <paramref name="count"/> read from the <paramref name="span"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__1.Read``1(System.Int32)">
            <summary>
            Reads a value of type <typeparamref name="T"/> from the specified <paramref name="span"/> at the specified <paramref name="ptr"/>.
            </summary>
            <typeparam name="T">The type of the value to read.</typeparam>
            <param name="span">The source <see cref="T:System.ReadOnlySpan`1"/> of <see langword="byte"/>.</param>
            <param name="ptr">The pointer to the position in the <paramref name="span"/> from which to read the value.</param>
            <returns>An instance of <typeparamref name="T"/> read from the <paramref name="span"/>.</returns>
            <remarks>
            There are several special-cased types.
            <list type="bullet">
            <item/><see langword="string"/>s are read using <see cref="M:LaquaiLib.Extensions.MemoryExtensions.ReadString(System.ReadOnlySpan{System.Byte},System.Int32@,System.Text.Encoding)"/> instead of pointer casts.
            <item/><see langword="byte"/>s require no cast at all.
            <item/><see langword="bool"/>s are normalized to hold a value of exactly <c>1</c> or <c>0</c>.
            </list>
            </remarks>
            <exception cref="T:System.ArgumentException">Thrown if <typeparamref name="T"/> is any reference type except <see langword="string"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the <paramref name="span"/> is empty.</exception>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="ptr"/> lies outside the bounds of the <paramref name="span"/>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the requested value of type <typeparamref name="T"/> is too large to be read from the <paramref name="span"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__1.Read``1(System.Int32,System.Int32)">
            <summary>
            Reads <paramref name="count"/> consecutive values of type <typeparamref name="T"/> from the specified <paramref name="span"/> at the specified <paramref name="ptr"/>.
            </summary>
            <typeparam name="T">The type of the values to read.</typeparam>
            <param name="span">The source <see cref="T:System.ReadOnlySpan`1"/> of <see langword="byte"/>.</param>
            <param name="ptr">The pointer to the position in the <paramref name="span"/> from which to read the values.</param>
            <param name="count">The number of values to read.</param>
            <returns>An array of <typeparamref name="T"/> of type <paramref name="count"/> read from the <paramref name="span"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ReadString(System.ReadOnlySpan{System.Byte},System.Int32@,System.Text.Encoding)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__1.ReadString(System.Int32@,System.Text.Encoding)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ReadString(System.ReadOnlySpan{System.Byte},System.Int32,System.Text.Encoding)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__1.ReadString(System.Int32,System.Text.Encoding)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Read``1(System.ReadOnlySpan{System.Byte},System.Int32@)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__1.Read``1(System.Int32@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Read``1(System.ReadOnlySpan{System.Byte},System.Int32@,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__1.Read``1(System.Int32@,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Read``1(System.ReadOnlySpan{System.Byte},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__1.Read``1(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Read``1(System.ReadOnlySpan{System.Byte},System.Int32,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__1.Read``1(System.Int32,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__2`1.EnumerateSplits(System.ReadOnlySpan{`0})">
            <summary>
            Returns a <see cref="T:LaquaiLib.Collections.Enumeration.SpanSplitEnumerable`1"/> that enumerates the segments of a <see cref="T:System.ReadOnlySpan`1"/> of <typeparamref name="T"/>s that are separated by any of the <typeparamref name="T"/>s specified by <paramref name="splits"/>.
            </summary>
            <param name="span">The <see cref="T:System.ReadOnlySpan`1"/> to enumerate the segments of.</param>
            <param name="splits">The <see langword="t"/>s to use as delimiters.</param>
            <returns>The created <see cref="T:LaquaiLib.Collections.Enumeration.SpanSplitEnumerable`1"/>.</returns>
            <remarks><typeparamref name="T"/> must implement <see cref="T:System.IEquatable`1"/>.</remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__2`1.EnumerateSplitsBySequence(System.ReadOnlySpan{`0})">
            <summary>
            Returns a <see cref="T:LaquaiLib.Collections.Enumeration.SpanSplitEnumerable`1"/> that enumerates the segments of a <see cref="T:System.ReadOnlySpan`1"/> of <typeparamref name="T"/>s that are separated by the specified <paramref name="sequence"/>.
            </summary>
            <param name="span">The <see cref="T:System.ReadOnlySpan`1"/> to enumerate the segments of.</param>
            <param name="sequence">The sequence of <typeparamref name="T"/>s to use as a delimiter.</param>
            <returns>The created <see cref="T:LaquaiLib.Collections.Enumeration.SpanSplitEnumerable`1"/>.</returns>
            <remarks><typeparamref name="T"/> must implement <see cref="T:System.IEquatable`1"/>.</remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.EnumerateSplits``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__2`1.EnumerateSplits(System.ReadOnlySpan{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.EnumerateSplitsBySequence``1(System.ReadOnlySpan{``0},System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__2`1.EnumerateSplitsBySequence(System.ReadOnlySpan{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__3`1.ForEach(System.Action{`0})">
            <summary>
            Invokes the specified <paramref name="action"/> for each element in the <see cref="T:System.Span`1"/>.
            </summary>
            <param name="action">The <see cref="T:System.Action`1"/> to invoke for each element.</param>
            <returns>The original <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__3`1.ForEach(System.Action{`0,System.Int32})">
            <summary>
            Invokes the specified <paramref name="action"/> for each element in the <see cref="T:System.Span`1"/>, passing the element and its index.
            </summary>
            <param name="action">The <see cref="T:System.Action`2"/> to invoke for each element.</param>
            <returns>The original <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ForEach``1(System.Span{``0},System.Action{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__3`1.ForEach(System.Action{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ForEach``1(System.Span{``0},System.Action{``0,System.Int32})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__3`1.ForEach(System.Action{`0,System.Int32})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__4.Write``1(``0,System.Int32)">
            <summary>
            Formats the <see langword="byte"/>s of the specified <paramref name="data"/> instance into the <paramref name="span"/> at the specified <paramref name="index"/>.
            </summary>
            <typeparam name="T">The type of the <paramref name="data"/> instance.</typeparam>
            <param name="span">The target <see cref="T:System.Span`1"/> of <see langword="byte"/>.</param>
            <param name="data">The <paramref name="data"/> instance to format into the <paramref name="span"/>.</param>
            <param name="index">The index at which to start writing the <paramref name="data"/> instance into the <paramref name="span"/>.</param>
            <returns>
            A slice of the input span that begins immediately after the last byte written. It may have length 0.
            This can be used to chain calls to this method.
            </returns>
            <exception cref="T:System.ArgumentException">Thrown if the target <paramref name="span"/> cannot accomodate the specified <paramref name="data"/> instance.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Write``1(System.Span{System.Byte},``0,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__4.Write``1(``0,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__5`1.Fill">
            <summary>
            Fills the specified <paramref name="span"/> with the <see langword="default"/> value for type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The Type of the items in the span.</typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> of <typeparamref name="T"/> to fill.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__5`1.Fill(System.Func{`0})">
            <summary>
            Fills the specified <paramref name="span"/> using the specified <paramref name="factory"/>.
            </summary>
            <typeparam name="T">The Type of the items in the span.</typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__5`1.Fill(System.Func{`0,`0})">
            <summary>
            Fills the specified <paramref name="span"/> using the specified <paramref name="factory"/>. It is passed the previous iteration's value.
            </summary>
            <typeparam name="T">The Type of the items in the span.</typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__5`1.Fill(System.Func{System.Int32,`0})">
            <summary>
            Fills the specified <paramref name="span"/> using the specified <paramref name="factory"/>. It is passed the index in the span that is being assigned.
            </summary>
            <typeparam name="T">The Type of the items in the span.</typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__5`1.Fill(System.Func{System.Int32,`0,`0})">
            <summary>
            Fills the specified <paramref name="span"/> using the specified <paramref name="factory"/>. It is passed the index in the span that is being assigned and the previous iteration's value.
            </summary>
            <typeparam name="T">The Type of the items in the span.</typeparam>
            <param name="span">The <see cref="T:System.Span`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(System.Span{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__5`1.Fill"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(System.Span{``0},System.Func{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__5`1.Fill(System.Func{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(System.Span{``0},System.Func{``0,``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__5`1.Fill(System.Func{`0,`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(System.Span{``0},System.Func{System.Int32,``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__5`1.Fill(System.Func{System.Int32,`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(System.Span{``0},System.Func{System.Int32,``0,``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__5`1.Fill(System.Func{System.Int32,`0,`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.Fill">
            <summary>
            Fills the specified <paramref name="multiDimArrayEnumerable"/> with the <see langword="default"/> value for type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The Type of the items in the <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> of <typeparamref name="T"/>.</typeparam>
            <param name="multiDimArrayEnumerable">The <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> of <typeparamref name="T"/> to fill.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.Fill(System.Func{`0})">
            <summary>
            Fills the specified <paramref name="multiDimArrayEnumerable"/> using the specified <paramref name="factory"/>.
            </summary>
            <typeparam name="T">The Type of the items in the <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> of <typeparamref name="T"/>.</typeparam>
            <param name="multiDimArrayEnumerable">The <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.Fill(System.Func{`0,`0})">
            <summary>
            Fills the specified <paramref name="multiDimArrayEnumerable"/> using the specified <paramref name="factory"/>. It is passed the previous iteration's value.
            </summary>
            <typeparam name="T">The Type of the items in the <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> of <typeparamref name="T"/>.</typeparam>
            <param name="multiDimArrayEnumerable">The <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.Fill(System.Func{System.Int32,`0})">
            <summary>
            Fills the specified <paramref name="multiDimArrayEnumerable"/> using the specified <paramref name="factory"/>. It is passed the index in the <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> of <typeparamref name="T"/> that is being assigned.
            </summary>
            <typeparam name="T">The Type of the items in the <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> of <typeparamref name="T"/>.</typeparam>
            <param name="multiDimArrayEnumerable">The <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.Fill(System.Func{System.Int32,`0,`0})">
            <summary>
            Fills the specified <paramref name="multiDimArrayEnumerable"/> using the specified <paramref name="factory"/>. It is passed the index in the <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> of <typeparamref name="T"/> that is being assigned and the previous iteration's value.
            </summary>
            <typeparam name="T">The Type of the items in the <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> of <typeparamref name="T"/>.</typeparam>
            <param name="multiDimArrayEnumerable">The <see cref="T:LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.FillAsync(System.Func{System.Threading.Tasks.ValueTask{`0}})">
            <summary>
            Asynchronously fills the specified <paramref name="multiDimArrayEnumerable"/> using the specified <paramref name="factory"/>.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="multiDimArrayEnumerable">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.FillAsync(System.Func{`0,System.Threading.Tasks.ValueTask{`0}})">
            <summary>
            Asynchronously fills the specified <paramref name="multiDimArrayEnumerable"/> using the specified <paramref name="factory"/>. It is passed the previous iteration's value.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="multiDimArrayEnumerable">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.FillAsync(System.Func{System.Int32,System.Threading.Tasks.ValueTask{`0}})">
            <summary>
            Asynchronously fills the specified <paramref name="multiDimArrayEnumerable"/> using the specified <paramref name="factory"/>. It is passed the index in the memory that is being assigned.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="multiDimArrayEnumerable">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.FillAsync(System.Func{System.Int32,`0,System.Threading.Tasks.ValueTask{`0}})">
            <summary>
            Asynchronously fills the specified <paramref name="multiDimArrayEnumerable"/> using the specified <paramref name="factory"/>. It is passed the index in the memory that is being assigned and the previous iteration's value.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="multiDimArrayEnumerable">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.Fill"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable{``0},System.Func{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.Fill(System.Func{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable{``0},System.Func{``0,``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.Fill(System.Func{`0,`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable{``0},System.Func{System.Int32,``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.Fill(System.Func{System.Int32,`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable{``0},System.Func{System.Int32,``0,``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.Fill(System.Func{System.Int32,`0,`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.FillAsync``1(LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable{``0},System.Func{System.Threading.Tasks.ValueTask{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.FillAsync(System.Func{System.Threading.Tasks.ValueTask{`0}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.FillAsync``1(LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.FillAsync(System.Func{`0,System.Threading.Tasks.ValueTask{`0}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.FillAsync``1(LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable{``0},System.Func{System.Int32,System.Threading.Tasks.ValueTask{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.FillAsync(System.Func{System.Int32,System.Threading.Tasks.ValueTask{`0}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.FillAsync``1(LaquaiLib.Collections.Enumeration.MultiDimArrayEnumerable{``0},System.Func{System.Int32,``0,System.Threading.Tasks.ValueTask{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__6`1.FillAsync(System.Func{System.Int32,`0,System.Threading.Tasks.ValueTask{`0}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.Fill">
            <summary>
            Fills the specified <paramref name="memory"/> with the <see langword="default"/> value for type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.Fill(System.Func{`0})">
            <summary>
            Fills the specified <paramref name="memory"/> using the specified <paramref name="factory"/>.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.Fill(System.Func{`0,`0})">
            <summary>
            Fills the specified <paramref name="memory"/> using the specified <paramref name="factory"/>. It is passed the previous iteration's value.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.Fill(System.Func{System.Int32,`0})">
            <summary>
            Fills the specified <paramref name="memory"/> using the specified <paramref name="factory"/>. It is passed the index in the memory that is being assigned.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.Fill(System.Func{System.Int32,`0,`0})">
            <summary>
            Fills the specified <paramref name="memory"/> using the specified <paramref name="factory"/>. It is passed the index in the memory that is being assigned and the previous iteration's value.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.FillAsync(System.Func{System.Threading.Tasks.ValueTask{`0}})">
            <summary>
            Asynchronously fills the specified <paramref name="memory"/> using the specified <paramref name="factory"/>.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.FillAsync(System.Func{`0,System.Threading.Tasks.ValueTask{`0}})">
            <summary>
            Asynchronously fills the specified <paramref name="memory"/> using the specified <paramref name="factory"/>. It is passed the previous iteration's value.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.FillAsync(System.Func{System.Int32,System.Threading.Tasks.ValueTask{`0}})">
            <summary>
            Asynchronously fills the specified <paramref name="memory"/> using the specified <paramref name="factory"/>. It is passed the index in the memory that is being assigned.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.FillAsync(System.Func{System.Int32,`0,System.Threading.Tasks.ValueTask{`0}})">
            <summary>
            Asynchronously fills the specified <paramref name="memory"/> using the specified <paramref name="factory"/>. It is passed the index in the memory that is being assigned and the previous iteration's value.
            </summary>
            <typeparam name="T">The Type of the items in the memory.</typeparam>
            <param name="memory">The <see cref="T:System.Memory`1"/> of <typeparamref name="T"/> to fill.</param>
            <param name="factory">The factory method that produces the values to fill the span with.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(System.Memory{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.Fill"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(System.Memory{``0},System.Func{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.Fill(System.Func{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(System.Memory{``0},System.Func{``0,``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.Fill(System.Func{`0,`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(System.Memory{``0},System.Func{System.Int32,``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.Fill(System.Func{System.Int32,`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Fill``1(System.Memory{``0},System.Func{System.Int32,``0,``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.Fill(System.Func{System.Int32,`0,`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.FillAsync``1(System.Memory{``0},System.Func{System.Threading.Tasks.ValueTask{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.FillAsync(System.Func{System.Threading.Tasks.ValueTask{`0}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.FillAsync``1(System.Memory{``0},System.Func{``0,System.Threading.Tasks.ValueTask{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.FillAsync(System.Func{`0,System.Threading.Tasks.ValueTask{`0}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.FillAsync``1(System.Memory{``0},System.Func{System.Int32,System.Threading.Tasks.ValueTask{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.FillAsync(System.Func{System.Int32,System.Threading.Tasks.ValueTask{`0}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.FillAsync``1(System.Memory{``0},System.Func{System.Int32,``0,System.Threading.Tasks.ValueTask{``0}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__7`1.FillAsync(System.Func{System.Int32,`0,System.Threading.Tasks.ValueTask{`0}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Aggregate(System.Func{`0,`0,`0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Aggregate``1(``0,System.Func{``0,`0,``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Aggregate``2(``0,System.Func{``0,`0,``0},System.Func{``0,``1})">
            <inheritdoc cref="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Any">
            <inheritdoc cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Any(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.All(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Int32})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Int64})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Single})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Double})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Decimal})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Nullable{System.Int32}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Nullable{System.Int64}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Nullable{System.Single}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Nullable{System.Double}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Cast``1(System.Span{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Chunk(System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.Chunk``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.AggregateBy``2(System.Func{`0,``0},``1,System.Func{``1,`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.AggregateBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},``2,System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.AggregateBy``2(System.Func{`0,``0},System.Func{``0,``1},System.Func{``1,`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.AggregateBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.CountBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.CountBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Count">
            <inheritdoc cref="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Count(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.TryGetNonEnumeratedCount(System.Int32@)">
            <inheritdoc cref="M:System.Linq.Enumerable.TryGetNonEnumeratedCount``1(System.Collections.Generic.IEnumerable{``0},System.Int32@)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.LongCount">
            <inheritdoc cref="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.LongCount(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.DefaultIfEmpty(System.Span{`0})">
            <summary>
            Leaves the specified <paramref name="destination"/> <see cref="T:System.Span`1"/> unchanged if the source <see cref="T:System.ReadOnlySpan`1"/> is not empty; otherwise, the first element of the destination span is set to the <see langword="default"/> value of <typeparamref name="TSource"/>.
            </summary>
            <param name="destination">The destination span to potentially receive the <see langword="default"/> value.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the destination span is too short to hold the <see langword="default"/> value.</exception>
            <returns>The number of elements written to in <paramref name="destination"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.DefaultIfEmpty(`0@)">
            <summary>
            Assigns the <see langword="default"/> value of <typeparamref name="TSource"/> to the <paramref name="defaultValue"/> parameter if the source <see cref="T:System.ReadOnlySpan`1"/> is empty; otherwise, leaves <paramref name="defaultValue"/> unchanged.
            </summary>
            <param name="defaultValue">The variable to potentially receive the <see langword="default"/> value.</param>
            <returns><see langword="true"/> if the source <see cref="T:System.ReadOnlySpan`1"/> is not empty (that is, <paramref name="defaultValue"/> was not modified by the call to this method); otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Distinct">
            <inheritdoc cref="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Distinct(System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Distinct(System.Span{`0},System.Collections.Generic.IEqualityComparer{`0})">
            <summary>
            Filters the source <see cref="T:System.ReadOnlySpan`1"/> for distinct elements and stores them in the specified <paramref name="destination"/> <see cref="T:System.Span`1"/>.
            </summary>
            <param name="destination">The destination <see cref="T:System.Span`1"/> to store the distinct elements.</param>
            <param name="comparer">An <see cref="T:System.Collections.Generic.IEqualityComparer`1"/> implementation to use for comparing elements.</param>
            <returns>The number of distinct elements written to the <paramref name="destination"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="destination"/> is shorter than the source <see cref="T:System.ReadOnlySpan`1"/> (this is enforced because all elements could already be distinct).</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.DistinctBy``1(System.Func{`0,``0},System.Span{`0})">
            <inheritdoc cref="M:System.Linq.Enumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.DistinctBy``1(System.Func{`0,``0},System.Span{`0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.DistinctBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ElementAt(System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ElementAt(System.Index)">
            <inheritdoc cref="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Index)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ElementAtOrDefault(System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ElementAtOrDefault(System.Index)">
            <inheritdoc cref="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Index)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.First">
            <inheritdoc cref="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.First(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.FirstOrDefault">
            <inheritdoc cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.FirstOrDefault(`0)">
            <inheritdoc cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.FirstOrDefault(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.FirstOrDefault(System.Func{`0,System.Boolean},`0)">
            <inheritdoc cref="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``1(System.Func{`0,``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1})">
            <inheritdoc cref="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``2(System.Func{`0,``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0},``1})">
            <inheritdoc cref="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``2(System.Func{`0,``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0},``1},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``3(System.Func{`0,``0},System.Func{`0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``2})">
            <inheritdoc cref="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``3(System.Func{`0,``0},System.Func{`0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``2},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Last">
            <inheritdoc cref="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Last(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.LastOrDefault">
            <inheritdoc cref="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.LastOrDefault(`0)">
            <inheritdoc cref="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.LastOrDefault(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.LastOrDefault(System.Func{`0,System.Boolean},`0)">
            <inheritdoc cref="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Int32})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Int64})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Single})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Double})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Decimal})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Nullable{System.Int32}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Nullable{System.Int64}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Nullable{System.Single}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Nullable{System.Double}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.MaxBy``1(System.Func{`0,``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.MaxBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.MaxBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Int32})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Int64})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Single})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Double})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Decimal})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Nullable{System.Int32}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Nullable{System.Int64}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Nullable{System.Single}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Nullable{System.Double}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.MinBy``1(System.Func{`0,``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.MinBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.MinBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Select``1(System.Func{`0,``0},System.Span{``0})">
            <summary>
            Projects each element of the source <see cref="T:System.ReadOnlySpan`1"/> into a new form and stores the results in a specified destination <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and returns a transformed element.</param>
            <param name="destination">A <see cref="T:System.Span`1"/> to store the results of the projection.</param>
            <exception cref="T:System.ArgumentException">Thrown when the destination span is not large enough to hold the projected elements.</exception>
            <returns>The number of elements written to in <paramref name="destination"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Select``1(System.Func{`0,System.Int32,``0},System.Span{``0})">
            <summary>
            Projects each element of the source <see cref="T:System.ReadOnlySpan`1"/> into a new form while incorporating the element's index and stores the results in a specified destination <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and its index in the source <see cref="T:System.ReadOnlySpan`1"/> and returns a transformed element.</param>
            <param name="destination">A <see cref="T:System.Span`1"/> to store the results of the projection.</param>
            <exception cref="T:System.ArgumentException">Thrown when the destination span is not large enough to hold the projected elements.</exception>
            <returns>The number of elements written to in <paramref name="destination"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SelectMany``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Span{``0})">
            <summary>
            Projects each element of the source <see cref="T:System.ReadOnlySpan`1"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="TResult"/> and stores those elements in the specified <paramref name="destination"/> <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of projected elements.</param>
            <param name="destination">The <see cref="T:System.Span`1"/> to store the results of the projection.</param>
            <returns>The number of elements written to <paramref name="destination"/>.</returns>
            <remarks>
            This and the other overloads of this method group should only be used with spans owned and controlled by the caller to ensure no unexpected results occur.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SelectMany``1(System.Func{`0,System.Int32,System.Collections.Generic.IEnumerable{``0}},System.Span{``0})">
            <summary>
            Projects each element of the source <see cref="T:System.ReadOnlySpan`1"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="TResult"/> and stores those elements in the specified <paramref name="destination"/> <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
            <param name="selector">A <see cref="T:System.Func`3"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and its index in the source <see cref="T:System.ReadOnlySpan`1"/> and returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of projected elements.</param>
            <param name="destination">The <see cref="T:System.Span`1"/> to store the results of the projection.</param>
            <returns>The number of elements written to <paramref name="destination"/>.</returns>
            <remarks>
            This and the other overloads of this method group should only be used with spans owned and controlled by the caller to ensure no unexpected results occur.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1},System.Span{``1})">
            <summary>
            Projects each element of the source <see cref="T:System.ReadOnlySpan`1"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="TCollection"/>, which is then projected into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="TResult"/>, and stores those elements in the specified <paramref name="destination"/> <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TCollection">The type of the elements in the collection returned by <paramref name="collectionSelector"/>.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
            <param name="collectionSelector">A <see cref="T:System.Func`2"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="TCollection"/> of projected elements.</param>
            <param name="resultSelector">A <see cref="T:System.Func`3"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and, in turn, each corresponding element from the <see cref="T:System.Collections.Generic.IEnumerable`1"/> returned by <paramref name="collectionSelector"/>, and returns the projected elements of type <typeparamref name="TResult"/>.</param>
            <param name="destination">The <see cref="T:System.Span`1"/> to store the results of the projection.</param>
            <returns>The number of elements written to <paramref name="destination"/>.</returns>
            <remarks>
            This and the other overloads of this method group should only be used with spans owned and controlled by the caller to ensure no unexpected results occur.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SelectMany``2(System.Func{`0,System.Int32,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1},System.Span{``1})">
            <summary>
            Projects each element of the source <see cref="T:System.ReadOnlySpan`1"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="TCollection"/>, which is then projected into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="TResult"/>, and stores those elements in the specified <paramref name="destination"/> <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TCollection">The type of the elements in the collection returned by <paramref name="collectionSelector"/>.</typeparam>
            <typeparam name="TResult">The type of the elements in the result sequence.</typeparam>
            <param name="collectionSelector">A <see cref="T:System.Func`3"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and its index in the source <see cref="T:System.ReadOnlySpan`1"/> and returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="TCollection"/> of projected elements.</param>
            <param name="resultSelector">A <see cref="T:System.Func`3"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and, in turn, each corresponding element from the <see cref="T:System.Collections.Generic.IEnumerable`1"/> returned by <paramref name="collectionSelector"/>, and returns the projected elements of type <typeparamref name="TResult"/>.</param>
            <param name="destination">The <see cref="T:System.Span`1"/> to store the results of the projection.</param>
            <returns>The number of elements written to <paramref name="destination"/>.</returns>
            <remarks>
            This and the other overloads of this method group should only be used with spans owned and controlled by the caller to ensure no unexpected results occur.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Single">
            <inheritdoc cref="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Single(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SingleOrDefault">
            <inheritdoc cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SingleOrDefault(`0)">
            <inheritdoc cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},``0)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SingleOrDefault(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SingleOrDefault(System.Func{`0,System.Boolean},`0)">
            <inheritdoc cref="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean},``0)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Skip(System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SkipWhile(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SkipWhile(System.Func{`0,System.Int32,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SkipLast(System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Int32})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Int64})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Single})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Double})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Decimal})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Nullable{System.Int32}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Nullable{System.Int64}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Nullable{System.Single}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Nullable{System.Double}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Take(System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Take(System.Range)">
            <inheritdoc cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Range)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.TakeWhile(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.TakeWhile(System.Func{`0,System.Int32,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.TakeLast(System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Where(System.Func{`0,System.Boolean},System.Span{`0})">
            <summary>
            Filters the elements of the <see cref="T:System.ReadOnlySpan`1"/> becased on a <paramref name="predicate"/> function and stores all matching elements in a specified <paramref name="destination"/> <see cref="T:System.Span`1"/>.
            </summary>
            <param name="predicate">A <see cref="T:System.Func`2"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and returns a <see langword="bool"/> indicating whether the element should be included in the result.</param>
            <param name="destination">A <see cref="T:System.Span`1"/> to store the results of the filtering.</param>
            <returns>The number of elements written to in <paramref name="destination"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the destination span is not large enough to hold the filtered elements.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Where(System.Func{`0,System.Int32,System.Boolean},System.Span{`0})">
            <summary>
            Filters the elements of the <see cref="T:System.ReadOnlySpan`1"/> becased on a <paramref name="predicate"/> function and stores all matching elements in a specified <paramref name="destination"/> <see cref="T:System.Span`1"/>.
            </summary>
            <param name="predicate">A <see cref="T:System.Func`2"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and its index in the source <see cref="T:System.ReadOnlySpan`1"/> and returns a <see langword="bool"/> indicating whether the element should be included in the result.</param>
            <param name="destination">A <see cref="T:System.Span`1"/> to store the results of the filtering.</param>
            <returns>The number of elements written to in <paramref name="destination"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the destination span is not large enough to hold the filtered elements.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Zip``2(System.ReadOnlySpan{``0},System.Func{`0,``0,``1},System.Span{``1})">
            <summary>
            Merges two <see cref="T:System.ReadOnlySpan`1"/>s into another <see cref="T:System.Span`1"/> by applying a result selector function to each pair of elements.
            </summary>
            <typeparam name="TSecond">The type of the elements in the second <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <typeparam name="TResult">The type of the elements in the result <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="second">The second <see cref="T:System.ReadOnlySpan`1"/> to merge with the source <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <param name="resultSelector">A <see cref="T:System.Func`3"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and the corresponding element of the second <see cref="T:System.ReadOnlySpan`1"/>, and returns a transformed element.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/> to store the results of the merge.</param>
            <exception cref="T:System.ArgumentException">Thrown when the destination span is not large enough to hold the results.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Zip``1(System.ReadOnlySpan{``0},System.Span{System.ValueTuple{`0,``0}})">
            <summary>
            Merges two <see cref="T:System.ReadOnlySpan`1"/>s into another <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TSecond">The type of the elements in the second <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="second">The second <see cref="T:System.ReadOnlySpan`1"/> to merge with the source <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/> to store the results of the merge.</param>
            <exception cref="T:System.ArgumentException">Thrown when the destination span is not large enough to hold the results.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Zip``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Span{System.ValueTuple{`0,``0,``1}})">
            <summary>
            Merges three <see cref="T:System.ReadOnlySpan`1"/>s into another <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="TSecond">The type of the elements in the second <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <typeparam name="TThird">The type of the elements in the third <see cref="T:System.ReadOnlySpan`1"/>.</typeparam>
            <param name="second">The second <see cref="T:System.ReadOnlySpan`1"/> to merge with the source <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <param name="third">The third <see cref="T:System.ReadOnlySpan`1"/> to merge with the source <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <param name="destination">The destination <see cref="T:System.Span`1"/> to store the results of the merge.</param>
            <exception cref="T:System.ArgumentException">Thrown when the destination span is not large enough to hold the results.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToLookup``1(System.Func{`0,``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToLookup``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToLookup``2(System.Func{`0,``0},System.Func{`0,``1})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToLookup``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToList">
            <inheritdoc cref="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToDictionary``2(System.Func{`0,``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToDictionary``2(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToDictionary``2(System.Func{`0,``0},System.Func{`0,``1})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToDictionary``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToHashSet">
            <inheritdoc cref="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToHashSet(System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.CopyToIfNotEmpty(System.Span{`0})">
            <summary>
            Copies the contents of the source <see cref="T:System.ReadOnlySpan`1"/> into the specified <paramref name="destination"/> <see cref="T:System.Span`1"/> if the source is not empty.
            </summary>
            <param name="destination">The destination span to copy the elements into.</param>
            <exception cref="T:System.ArgumentException">Thrown when the destination span is too short to hold the elements from the source.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToArray``1(System.Func{`0,``0})">
            <summary>
            Combines <see cref="M:LaquaiLib.Extensions.MemoryExtensions.Select``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Span{``1})"/> and <see cref="M:System.ReadOnlySpan`1.ToArray"/>
            </summary>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and returns a transformed element.</param>
            <returns>An array of <typeparamref name="TResult"/> containing the elements produced by the <paramref name="selector"/>.</returns>
            <remarks>
            This is provided as a replacement for something like <c>AsEnumerable</c>, since yielding is not possible with <see cref="T:System.ReadOnlySpan`1"/>.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToArray``1(System.Func{`0,System.Int32,``0})">
            <summary>
            Combines <see cref="M:LaquaiLib.Extensions.MemoryExtensions.Select``2(System.ReadOnlySpan{``0},System.Func{``0,System.Int32,``1},System.Span{``1})"/> and <see cref="M:System.ReadOnlySpan`1.ToArray"/>
            </summary>
            <param name="selector">A <see cref="T:System.Func`2"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and returns a transformed element.</param>
            <returns>An array of <typeparamref name="TResult"/> containing the elements produced by the <paramref name="selector"/>.</returns>
            <remarks>
            This is provided as a replacement for something like <c>AsEnumerable</c>, since yielding is not possible with <see cref="T:System.ReadOnlySpan`1"/>.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.WhereSelectToArray``1(System.Func{`0,System.Boolean},System.Func{`0,``0})">
            <summary>
            Combines <see cref="M:LaquaiLib.Extensions.MemoryExtensions.Where``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean},System.Span{``0})"/> and <see cref="M:LaquaiLib.Extensions.MemoryExtensions.Select``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Span{``1})"/> and returns an array of <typeparamref name="TResult"/> containing the results.
            Neither parameter may be <see langword="null"/>.
            </summary>
            <typeparam name="TResult">The type of the elements in the resulting array.</typeparam>
            <param name="where">A <see cref="T:System.Func`2"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and returns a <see langword="bool"/> indicating whether the element should be included in the result.</param>
            <param name="select">A <see cref="T:System.Func`2"/> that is passed each element of the source <see cref="T:System.ReadOnlySpan`1"/> and returns a transformed element.</param>
            <returns>The created array of <typeparamref name="TResult"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.OnlyOrDefault(`0)">
            <summary>
            Determines whether a <see cref="T:System.ReadOnlySpan`1"/> contains exactly one element and returns that element if so, otherwise returns the specified <paramref name="defaultValue"/>.
            This behaves exactly like <see cref="M:LaquaiLib.Extensions.MemoryExtensions.SingleOrDefault``1(System.ReadOnlySpan{``0},``0)"/> without throwing exceptions.
            </summary>
            <param name="defaultValue">The value to return if the source <see cref="T:System.ReadOnlySpan`1"/> contains no elements or more than one element.</param>
            <returns>The single element in the source <see cref="T:System.ReadOnlySpan`1"/>, or <paramref name="defaultValue"/> if the sequence contains no or more than one element.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.OnlyOrDefault(System.Func{`0,System.Boolean},`0)">
            <summary>
            Determines whether a <see cref="T:System.ReadOnlySpan`1"/> contains exactly one element that satisfies a <paramref name="predicate"/> and returns that element if so, otherwise returns the specified <paramref name="defaultValue"/>.
            This behaves exactly like <see cref="M:LaquaiLib.Extensions.MemoryExtensions.SingleOrDefault``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean},``0)"/> without throwing exceptions.
            </summary>
            <param name="predicate">The condition to check for.</param>
            <param name="defaultValue">The value to return if the source <see cref="T:System.ReadOnlySpan`1"/> contains no elements or more than one element.</param>
            <returns>The single element in the source <see cref="T:System.ReadOnlySpan`1"/> that satisfies the <paramref name="predicate"/>, or <paramref name="defaultValue"/> if the sequence contains no or more than one element that satisfies the <paramref name="predicate"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Aggregate``1(System.ReadOnlySpan{``0},System.Func{``0,``0,``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Aggregate(System.Func{`0,`0,`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Aggregate``2(System.ReadOnlySpan{``0},``1,System.Func{``1,``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Aggregate``1(``0,System.Func{``0,`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Aggregate``3(System.ReadOnlySpan{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Aggregate``2(``0,System.Func{``0,`0,``0},System.Func{``0,``1})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Any``1(System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Any"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Any``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Any(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.All``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.All(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Average``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int32})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Int32})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Average``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int64})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Int64})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Average``1(System.ReadOnlySpan{``0},System.Func{``0,System.Single})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Single})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Average``1(System.ReadOnlySpan{``0},System.Func{``0,System.Double})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Double})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Average``1(System.ReadOnlySpan{``0},System.Func{``0,System.Decimal})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Decimal})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Average``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Nullable{System.Int32}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Average``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Nullable{System.Int64}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Average``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Single}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Nullable{System.Single}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Average``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Double}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Nullable{System.Double}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Average``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Average(System.Func{`0,System.Nullable{System.Decimal}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Cast``2(System.ReadOnlySpan{``0},System.Span{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Cast``1(System.Span{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Chunk``1(System.ReadOnlySpan{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Chunk(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.AggregateBy``3(System.ReadOnlySpan{``0},System.Func{``0,``1},``2,System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.AggregateBy``2(System.Func{`0,``0},``1,System.Func{``1,`0,``1},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.AggregateBy``3(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Func{``1,``2},System.Func{``2,``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.AggregateBy``2(System.Func{`0,``0},System.Func{``0,``1},System.Func{``1,`0,``1},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.CountBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.CountBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Count``1(System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Count"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Count``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Count(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.TryGetNonEnumeratedCount``1(System.ReadOnlySpan{``0},System.Int32@)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.TryGetNonEnumeratedCount(System.Int32@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.LongCount``1(System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.LongCount"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.LongCount``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.LongCount(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.DefaultIfEmpty``1(System.ReadOnlySpan{``0},System.Span{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.DefaultIfEmpty(System.Span{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.DefaultIfEmpty``1(System.ReadOnlySpan{``0},``0@)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.DefaultIfEmpty(`0@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Distinct``1(System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Distinct"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Distinct``1(System.ReadOnlySpan{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Distinct(System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Distinct``1(System.ReadOnlySpan{``0},System.Span{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Distinct(System.Span{`0},System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.DistinctBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Span{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.DistinctBy``1(System.Func{`0,``0},System.Span{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.DistinctBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Span{``0},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.DistinctBy``1(System.Func{`0,``0},System.Span{`0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ElementAt``1(System.ReadOnlySpan{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ElementAt(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ElementAt``1(System.ReadOnlySpan{``0},System.Index)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ElementAt(System.Index)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ElementAtOrDefault``1(System.ReadOnlySpan{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ElementAtOrDefault(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ElementAtOrDefault``1(System.ReadOnlySpan{``0},System.Index)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ElementAtOrDefault(System.Index)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.First``1(System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.First"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.First``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.First(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.FirstOrDefault``1(System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.FirstOrDefault"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.FirstOrDefault``1(System.ReadOnlySpan{``0},``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.FirstOrDefault(`0)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.FirstOrDefault``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.FirstOrDefault(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.FirstOrDefault``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean},``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.FirstOrDefault(System.Func{`0,System.Boolean},`0)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.GroupBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.GroupBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.GroupBy``3(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.GroupBy``3(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.GroupBy``3(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``2(System.Func{`0,``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0},``1})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.GroupBy``3(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``2(System.Func{`0,``0},System.Func{``0,System.Collections.Generic.IEnumerable{`0},``1},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.GroupBy``4(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``3(System.Func{`0,``0},System.Func{`0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``2})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.GroupBy``4(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.GroupBy``3(System.Func{`0,``0},System.Func{`0,``1},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``2},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Last``1(System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Last"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Last``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Last(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.LastOrDefault``1(System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.LastOrDefault"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.LastOrDefault``1(System.ReadOnlySpan{``0},``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.LastOrDefault(`0)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.LastOrDefault``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.LastOrDefault(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.LastOrDefault``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean},``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.LastOrDefault(System.Func{`0,System.Boolean},`0)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int32})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Int32})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int64})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Int64})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Single})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Single})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Double})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Double})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Decimal})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Decimal})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Nullable{System.Int32}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Nullable{System.Int64}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Single}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Nullable{System.Single}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Double}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Nullable{System.Double}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Max``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max(System.Func{`0,System.Nullable{System.Decimal}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Max``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Max``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.MaxBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.MaxBy``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.MaxBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.MaxBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int32})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Int32})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int64})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Int64})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Single})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Single})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Double})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Double})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Decimal})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Decimal})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Nullable{System.Int32}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Nullable{System.Int64}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Single}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Nullable{System.Single}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Double}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Nullable{System.Double}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Min``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min(System.Func{`0,System.Nullable{System.Decimal}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Min``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Min``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.MinBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.MinBy``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.MinBy``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.MinBy``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Select``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Span{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Select``1(System.Func{`0,``0},System.Span{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Select``2(System.ReadOnlySpan{``0},System.Func{``0,System.Int32,``1},System.Span{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Select``1(System.Func{`0,System.Int32,``0},System.Span{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SelectMany``2(System.ReadOnlySpan{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Span{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SelectMany``1(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Span{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SelectMany``2(System.ReadOnlySpan{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Span{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SelectMany``1(System.Func{`0,System.Int32,System.Collections.Generic.IEnumerable{``0}},System.Span{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SelectMany``3(System.ReadOnlySpan{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2},System.Span{``2})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SelectMany``2(System.Func{`0,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1},System.Span{``1})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SelectMany``3(System.ReadOnlySpan{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2},System.Span{``2})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SelectMany``2(System.Func{`0,System.Int32,System.Collections.Generic.IEnumerable{``0}},System.Func{`0,``0,``1},System.Span{``1})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Single``1(System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Single"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Single``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Single(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SingleOrDefault``1(System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SingleOrDefault"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SingleOrDefault``1(System.ReadOnlySpan{``0},``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SingleOrDefault(`0)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SingleOrDefault``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SingleOrDefault(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SingleOrDefault``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean},``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SingleOrDefault(System.Func{`0,System.Boolean},`0)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Skip``1(System.ReadOnlySpan{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Skip(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SkipWhile``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SkipWhile(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SkipWhile``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int32,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SkipWhile(System.Func{`0,System.Int32,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SkipLast``1(System.ReadOnlySpan{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.SkipLast(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Sum``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int32})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Int32})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Sum``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int64})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Int64})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Sum``1(System.ReadOnlySpan{``0},System.Func{``0,System.Single})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Single})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Sum``1(System.ReadOnlySpan{``0},System.Func{``0,System.Double})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Double})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Sum``1(System.ReadOnlySpan{``0},System.Func{``0,System.Decimal})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Decimal})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Sum``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Int32}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Nullable{System.Int32}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Sum``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Int64}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Nullable{System.Int64}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Sum``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Single}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Nullable{System.Single}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Sum``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Double}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Nullable{System.Double}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Sum``1(System.ReadOnlySpan{``0},System.Func{``0,System.Nullable{System.Decimal}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Sum(System.Func{`0,System.Nullable{System.Decimal}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Take``1(System.ReadOnlySpan{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Take(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Take``1(System.ReadOnlySpan{``0},System.Range)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Take(System.Range)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.TakeWhile``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.TakeWhile(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.TakeWhile``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int32,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.TakeWhile(System.Func{`0,System.Int32,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.TakeLast``1(System.ReadOnlySpan{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.TakeLast(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Where``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean},System.Span{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Where(System.Func{`0,System.Boolean},System.Span{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Where``1(System.ReadOnlySpan{``0},System.Func{``0,System.Int32,System.Boolean},System.Span{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Where(System.Func{`0,System.Int32,System.Boolean},System.Span{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Zip``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Func{``0,``1,``2},System.Span{``2})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Zip``2(System.ReadOnlySpan{``0},System.Func{`0,``0,``1},System.Span{``1})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Zip``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Span{System.ValueTuple{``0,``1}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Zip``1(System.ReadOnlySpan{``0},System.Span{System.ValueTuple{`0,``0}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Zip``3(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.ReadOnlySpan{``2},System.Span{System.ValueTuple{``0,``1,``2}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.Zip``2(System.ReadOnlySpan{``0},System.ReadOnlySpan{``1},System.Span{System.ValueTuple{`0,``0,``1}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToLookup``2(System.ReadOnlySpan{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToLookup``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToLookup``2(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToLookup``1(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToLookup``3(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToLookup``2(System.Func{`0,``0},System.Func{`0,``1})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToLookup``3(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToLookup``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToList``1(System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToList"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToDictionary``3(System.ReadOnlySpan{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToDictionary``2(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToDictionary``3(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToDictionary``2(System.Func{`0,``0},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToDictionary``3(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Func{``0,``2})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToDictionary``2(System.Func{`0,``0},System.Func{`0,``1})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToDictionary``3(System.ReadOnlySpan{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToDictionary``2(System.Func{`0,``0},System.Func{`0,``1},System.Collections.Generic.IEqualityComparer{``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToHashSet``1(System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToHashSet"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToHashSet``1(System.ReadOnlySpan{``0},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToHashSet(System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.CopyToIfNotEmpty``1(System.ReadOnlySpan{``0},System.Span{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.CopyToIfNotEmpty(System.Span{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToArray``2(System.ReadOnlySpan{``0},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToArray``1(System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToArray``2(System.ReadOnlySpan{``0},System.Func{``0,System.Int32,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.ToArray``1(System.Func{`0,System.Int32,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.WhereSelectToArray``2(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean},System.Func{``0,``1})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.WhereSelectToArray``1(System.Func{`0,System.Boolean},System.Func{`0,``0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.OnlyOrDefault``1(System.ReadOnlySpan{``0},``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.OnlyOrDefault(`0)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.OnlyOrDefault``1(System.ReadOnlySpan{``0},System.Func{``0,System.Boolean},``0)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__8`1.OnlyOrDefault(System.Func{`0,System.Boolean},`0)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.Skip(System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.SkipWhile(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.SkipWhile(System.Func{`0,System.Int32,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.SkipLast(System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.Take(System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.Take(System.Range)">
            <inheritdoc cref="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Range)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.TakeWhile(System.Func{`0,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.TakeWhile(System.Func{`0,System.Int32,System.Boolean})">
            <inheritdoc cref="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.TakeLast(System.Int32)">
            <inheritdoc cref="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Skip``1(System.Span{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.Skip(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SkipWhile``1(System.Span{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.SkipWhile(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SkipWhile``1(System.Span{``0},System.Func{``0,System.Int32,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.SkipWhile(System.Func{`0,System.Int32,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.SkipLast``1(System.Span{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.SkipLast(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Take``1(System.Span{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.Take(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.Take``1(System.Span{``0},System.Range)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.Take(System.Range)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.TakeWhile``1(System.Span{``0},System.Func{``0,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.TakeWhile(System.Func{`0,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.TakeWhile``1(System.Span{``0},System.Func{``0,System.Int32,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.TakeWhile(System.Func{`0,System.Int32,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.TakeLast``1(System.Span{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__9`1.TakeLast(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__10`2.ToDictionary">
            <inheritdoc cref="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__10`2.ToDictionary(System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToDictionary``2(System.ReadOnlySpan{System.ValueTuple{``0,``1}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__10`2.ToDictionary"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToDictionary``2(System.ReadOnlySpan{System.ValueTuple{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__10`2.ToDictionary(System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__11`2.ToDictionary">
            <inheritdoc cref="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__11`2.ToDictionary(System.Collections.Generic.IEqualityComparer{`0})">
            <inheritdoc cref="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})" />
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToDictionary``2(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{``0,``1}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__11`2.ToDictionary"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.ToDictionary``2(System.ReadOnlySpan{System.Collections.Generic.KeyValuePair{``0,``1}},System.Collections.Generic.IEqualityComparer{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__11`2.ToDictionary(System.Collections.Generic.IEqualityComparer{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.<>E__12.All">
            <summary>
            Determines whether all values in the source <see cref="T:System.ReadOnlySpan`1"/> are <see langword="true"/>.
            </summary>
            <returns><see langword="true"/> if all values in the source <see cref="T:System.ReadOnlySpan`1"/> are <see langword="true"/>; otherwise, <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MemoryExtensions.All(System.ReadOnlySpan{System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.MemoryExtensions.<>E__12.All"/>
        </member>
        <member name="T:LaquaiLib.Extensions.MethodInfoExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Reflection.MethodInfo"/> Type.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsGetterOrSetter">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is a property getter or setter.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is a property getter or setter.</returns>
        </member>
        <member name="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsGetter">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is a property getter.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is a property getter.</returns>
        </member>
        <member name="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsSetter">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is a property setter.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is a property setter.</returns>
        </member>
        <member name="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsAdderOrRemover">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is an event subscription adder or remover.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is an event subscription adder or remover.</returns>
        </member>
        <member name="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsAdder">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is an event subscription adder.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is an event subscription adder.</returns>
        </member>
        <member name="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsRemover">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is an event subscription remover.
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is an event subscription remover.</returns>
        </member>
        <member name="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsAccessor">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is an accessor (includes property getters/setters and event subscription adders/removers).
            </summary>
            <param name="methodInfo">A <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns>A value indicating whether the method is an accessor.</returns>
        </member>
        <member name="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsExtern">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is marked <see langword="extern"/>.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns><see langword="true"/> if the method is marked <see langword="extern"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsPartial">
            <summary>
            Determines whether a method represented by a <paramref name="methodInfo"/> instance is marked <see langword="partial"/>.
            </summary>
            <param name="methodInfo">The <see cref="T:System.Reflection.MethodInfo"/> instance representing the method to check.</param>
            <returns><see langword="true"/> if the method is marked <see langword="partial"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.RebuildMethod(System.Boolean,System.Func{System.String,System.String},System.Action{System.Collections.Generic.List{System.String}},System.Func{System.String,System.String},System.Action{System.Collections.Generic.List{System.String}},System.Func{System.String,System.String},System.Action{System.Collections.Generic.List{System.ValueTuple{System.String,System.String,System.Object}}},LaquaiLib.Extensions.MethodInfoExtensions.BodyGenerator)">
            <summary>
            Gets a string representation of the signature of the method represented by the specified <see cref="T:System.Reflection.MethodInfo"/>, optionally applying any transforms as specified by the provided factory methods or generating a body.
            </summary>
            <param name="method">The <see cref="T:System.Reflection.MethodInfo"/> instance representing the method.</param>
            <param name="inheritdoc">Whether to include an <c>inheritdoc</c> tag above the actual method.</param>
            <param name="accessibilityTransform">A transform to apply to the method's accessibility.</param>
            <param name="modifiersTransform">A transform to apply to the method's modifiers.</param>
            <param name="returnTypeTransform">A transform to apply to the method's return type.</param>
            <param name="genericParametersTransform">A transform to apply to the method's generic parameters.</param>
            <param name="nameTransform">A transform to apply to the method's name.</param>
            <param name="parametersTransform">A transform to apply to the method's parameters.</param>
            <param name="bodyGenerator">A factory method to generate the method's body.</param>
            <returns>A string representation of the method's signature.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.get_IsGetterOrSetter(System.Reflection.MethodInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsGetterOrSetter"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.get_IsGetter(System.Reflection.MethodInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsGetter"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.get_IsSetter(System.Reflection.MethodInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsSetter"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.get_IsAdderOrRemover(System.Reflection.MethodInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsAdderOrRemover"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.get_IsAdder(System.Reflection.MethodInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsAdder"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.get_IsRemover(System.Reflection.MethodInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsRemover"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.get_IsAccessor(System.Reflection.MethodInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsAccessor"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.get_IsExtern(System.Reflection.MethodInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsExtern"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.get_IsPartial(System.Reflection.MethodInfo)">
            <inheritdoc cref="P:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.IsPartial"/>
        </member>
        <member name="M:LaquaiLib.Extensions.MethodInfoExtensions.RebuildMethod(System.Reflection.MethodInfo,System.Boolean,System.Func{System.String,System.String},System.Action{System.Collections.Generic.List{System.String}},System.Func{System.String,System.String},System.Action{System.Collections.Generic.List{System.String}},System.Func{System.String,System.String},System.Action{System.Collections.Generic.List{System.ValueTuple{System.String,System.String,System.Object}}},LaquaiLib.Extensions.MethodInfoExtensions.BodyGenerator)">
            <inheritdoc cref="M:LaquaiLib.Extensions.MethodInfoExtensions.<>E__0.RebuildMethod(System.Boolean,System.Func{System.String,System.String},System.Action{System.Collections.Generic.List{System.String}},System.Func{System.String,System.String},System.Action{System.Collections.Generic.List{System.String}},System.Func{System.String,System.String},System.Action{System.Collections.Generic.List{System.ValueTuple{System.String,System.String,System.Object}}},LaquaiLib.Extensions.MethodInfoExtensions.BodyGenerator)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.MethodInfoExtensions.BodyGenerator">
            <summary>
            Represents a method that may be called by <see cref="M:LaquaiLib.Extensions.MethodInfoExtensions.RebuildMethod(System.Reflection.MethodInfo,System.Boolean,System.Func{System.String,System.String},System.Action{System.Collections.Generic.List{System.String}},System.Func{System.String,System.String},System.Action{System.Collections.Generic.List{System.String}},System.Func{System.String,System.String},System.Action{System.Collections.Generic.List{System.ValueTuple{System.String,System.String,System.Object}}},LaquaiLib.Extensions.MethodInfoExtensions.BodyGenerator)"/> to generate the body of a method to be rebuilt.
            </summary>
            <param name="writer">An <see cref="T:System.CodeDom.Compiler.IndentedTextWriter"/> instance to write the method body to.</param>
            <param name="accessibility">The accessibility of the method.</param>
            <param name="modifiers">The modifiers of the method.</param>
            <param name="returnType">The return type of the method.</param>
            <param name="methodName">The name of the method.</param>
            <param name="genericParameters">The generic parameters of the method.</param>
            <param name="parameters">The parameters of the method.</param>
        </member>
        <member name="T:LaquaiLib.Extensions.PartitionerExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Concurrent.Partitioner"/> type and derived types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.PartitionerExtensions.<>E__0`1.ToList(System.Int32)">
            <summary>
            Enumerates each partition of the <paramref name="partitioner"/> and returns a <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Collections.Generic.List`1"/>s containing the elements of each partition.
            </summary>
            <typeparam name="T">The type of the elements in the <paramref name="partitioner"/>.</typeparam>
            <param name="partitioner">The <see cref="T:System.Collections.Concurrent.Partitioner`1"/> to enumerate.</param>
            <param name="partitions">The number of partitions to request.</param>
            <returns>The <see cref="T:System.Collections.Generic.List`1"/> of <see cref="T:System.Collections.Generic.List`1"/>s containing the elements of each partition.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.PartitionerExtensions.<>E__0`1.AsEnumerable(System.Int32)">
            <summary>
            Transforms each partition of the <paramref name="partitioner"/> into an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>s containing the elements of each partition.
            </summary>
            <typeparam name="T">The type of the elements in the <paramref name="partitioner"/>.</typeparam>
            <param name="partitioner">The <see cref="T:System.Collections.Concurrent.Partitioner`1"/> to transform.</param>
            <param name="partitions">The number of partitions to request.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Collections.Generic.IEnumerable`1"/>s enumerating the elements of each partition.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.PartitionerExtensions.<>E__0`1.Flatten">
            <summary>
            Flattens a <see cref="T:System.Collections.Concurrent.Partitioner`1"/> back into a single <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <returns>The flattened <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.PartitionerExtensions.ToList``1(System.Collections.Concurrent.Partitioner{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.PartitionerExtensions.<>E__0`1.ToList(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.PartitionerExtensions.AsEnumerable``1(System.Collections.Concurrent.Partitioner{``0},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.PartitionerExtensions.<>E__0`1.AsEnumerable(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.PartitionerExtensions.Flatten``1(System.Collections.Concurrent.Partitioner{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.PartitionerExtensions.<>E__0`1.Flatten"/>
        </member>
        <member name="T:LaquaiLib.Extensions.ProcessExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Diagnostics.Process"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ProcessExtensions.<>E__0.SetAffinity(System.UInt64,System.Boolean)">
            <summary>
            Sets the processor affinity mask for the specified <see cref="T:System.Diagnostics.Process"/>, including the specified processors.
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> instance.</param>
            <param name="mask">A bit mask that specifies the set of processors on which the threads of the process can run. A value equivalent to <c>0</c> re-allows all processors.</param>
            <param name="discard">Whether to discard the bits higher than the number of logical processors available to the system. Prevents <see cref="T:System.ArgumentOutOfRangeException"/>, but may cause invalid inputs to be accepted, still <see langword="true"/> by default, however.</param>
            <returns><see langword="true"/> if the new affinity mask could be set, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ProcessExtensions.<>E__0.SetNegativeAffinity(System.UInt64)">
            <summary>
            Sets the processor affinity mask for the specified <see cref="T:System.Diagnostics.Process"/>, excluding the specified processors.
            Only the lower bits within <see cref="P:System.Environment.ProcessorCount"/> are considered.
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> instance.</param>
            <param name="mask">A bit mask that specifies the set of processors on which the threads of the process may not run.</param>
            <returns><see langword="true"/> if the new affinity mask could be set, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ProcessExtensions.<>E__0.SetGamingAffinity">
            <summary>
            Sets a processor affinity mask for the specified <see cref="T:System.Diagnostics.Process"/> that disallows use of the first quarter of logical processors.
            This is sometimes practical when there are enough logical processors available. The system usually assigns many background processes to the first few logical processes, so this may help increase responsiveness of CPU-heavy applications.
            </summary>
            <param name="process">The <see cref="T:System.Diagnostics.Process"/> instance.</param>
            <returns><see langword="true"/> if the new affinity mask could be set, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.ProcessExtensions.SetAffinity(System.Diagnostics.Process,System.UInt64,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ProcessExtensions.<>E__0.SetAffinity(System.UInt64,System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ProcessExtensions.SetNegativeAffinity(System.Diagnostics.Process,System.UInt64)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ProcessExtensions.<>E__0.SetNegativeAffinity(System.UInt64)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.ProcessExtensions.SetGamingAffinity(System.Diagnostics.Process)">
            <inheritdoc cref="M:LaquaiLib.Extensions.ProcessExtensions.<>E__0.SetGamingAffinity"/>
        </member>
        <member name="T:LaquaiLib.Extensions.PropertyInfoExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Reflection.PropertyInfo"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.PropertyInfoExtensions.<>E__0.GetValue``1(System.Object)">
            <summary>
            Retrieves the value of the property represented by this <paramref name="propertyInfo"/> from the given <paramref name="obj"/>ect typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The Type to attempt to convert the retrieved value to.</typeparam>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> instance representing the property to retrieve the value of.</param>
            <param name="obj">The <see cref="T:System.Object"/> instance to retrieve the value from. May be <see langword="null"/> if <paramref name="propertyInfo"/> represents a property that is static.</param>
            <returns>The value of the property represented by this <paramref name="propertyInfo"/> typed as <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.PropertyInfoExtensions.<>E__0.GetValueOrDefault``1(System.Object)">
            <summary>
            Attempts to retrieve the value of the property represented by this <paramref name="propertyInfo"/> from the given <paramref name="obj"/>ect typed as <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The Type to attempt to convert the retrieved value to.</typeparam>
            <param name="propertyInfo">The <see cref="T:System.Reflection.PropertyInfo"/> instance representing the property to retrieve the value of.</param>
            <param name="obj">The <see cref="T:System.Object"/> instance to retrieve the value from. May be <see langword="null"/> if <paramref name="propertyInfo"/> represents a property that is static.</param>
            <returns>The value of the property represented by this <paramref name="propertyInfo"/> typed as <typeparamref name="T"/> if the property exists and its could be cast to <typeparamref name="T"/>, otherwise <c>default</c>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.PropertyInfoExtensions.GetValue``1(System.Reflection.PropertyInfo,System.Object)">
            <inheritdoc cref="M:LaquaiLib.Extensions.PropertyInfoExtensions.<>E__0.GetValue``1(System.Object)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.PropertyInfoExtensions.GetValueOrDefault``1(System.Reflection.PropertyInfo,System.Object)">
            <inheritdoc cref="M:LaquaiLib.Extensions.PropertyInfoExtensions.<>E__0.GetValueOrDefault``1(System.Object)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.QueueExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Collections.Generic.Queue`1"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.<>E__0`1.EnqueueRange(System.ReadOnlySpan{`0})">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="items">The items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.<>E__0`1.EnqueueRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.QueueExtensions.<>E__0`1.EnqueueRange(System.ReadOnlySpan{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.EnqueueRange``1(System.Collections.Generic.Queue{``0},System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.QueueExtensions.<>E__0`1.EnqueueRange(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.<>E__1`1.EnqueueRange(System.ReadOnlySpan{`0})">
            <summary>
            Adds items to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from <paramref name="items"/> to.</param>
            <param name="items">The items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.<>E__1`1.EnqueueRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds items from a collection to the end of the <see cref="T:System.Collections.Generic.Queue`1"/>.
            </summary>
            <typeparam name="T">The Type of the items in the collection.</typeparam>
            <param name="queue">The <see cref="T:System.Collections.Generic.Queue`1"/> instance to add the items from the <paramref name="collection"/> to.</param>
            <param name="collection">A collection of items to add to <paramref name="queue"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.EnqueueRange``1(LaquaiLib.Collections.LimitedCollections.LimitedQueue{``0},System.ReadOnlySpan{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.QueueExtensions.<>E__1`1.EnqueueRange(System.ReadOnlySpan{`0})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.QueueExtensions.EnqueueRange``1(LaquaiLib.Collections.LimitedCollections.LimitedQueue{``0},System.Collections.Generic.IEnumerable{``0})">
            <inheritdoc cref="M:LaquaiLib.Extensions.QueueExtensions.<>E__1`1.EnqueueRange(System.Collections.Generic.IEnumerable{`0})"/>
        </member>
        <member name="T:LaquaiLib.Extensions.RandomExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Random"/> type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.RandomExtensions.<>E__0.NextBytes(System.IO.Stream,System.Int32)">
            <summary>
            Writes <paramref name="count"/> random <see langword="byte"/>s to the specified <paramref name="destination"/> <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="random">The <see cref="T:System.Random"/> instance to use.</param>
            <param name="destination">The <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="count">The number of <see langword="byte"/>s to write.</param>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="destination"/> <see cref="T:System.IO.Stream"/> is not writable.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.RandomExtensions.<>E__0.NextBytesAsync(System.IO.Stream,System.Int32)">
            <summary>
            Asynchronously writes <paramref name="count"/> random <see langword="byte"/>s to the specified <paramref name="destination"/> <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="random">The <see cref="T:System.Random"/> instance to use.</param>
            <param name="destination">The <see cref="T:System.IO.Stream"/> to write to.</param>
            <param name="count">The number of <see langword="byte"/>s to write.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.RandomExtensions.NextBytes(System.Random,System.IO.Stream,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.RandomExtensions.<>E__0.NextBytes(System.IO.Stream,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.RandomExtensions.NextBytesAsync(System.Random,System.IO.Stream,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.RandomExtensions.<>E__0.NextBytesAsync(System.IO.Stream,System.Int32)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.RangeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Range"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.RangeExtensions.<>E__0.GetRange">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/>s that are within the given <paramref name="range"/>.
            </summary>
            <param name="range">The <see cref="T:System.Range"/> to get the range from.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/>s that are within the given <paramref name="range"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.RangeExtensions.<>E__0.GetRange(System.Int32)">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/>s that are within the given <paramref name="range"/>, calculating the required indices from the given <paramref name="length"/>.
            </summary>
            <param name="range">The <see cref="T:System.Range"/> to get the range from.</param>
            <param name="length">The length of the range to reference.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.Int32"/>s that are within the given <paramref name="range"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.RangeExtensions.<>E__0.GetEnumerator">
            <summary>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/> of <see cref="T:System.Int32"/>s that may be used to iterate through the numbers within the given <paramref name="range"/>.
            </summary>
            <param name="range">The <see cref="T:System.Range"/> to get the range from.</param>
            <returns>The <see cref="T:System.Collections.Generic.IEnumerator`1"/> as described.</returns>
            <remarks>
            This wouldn't typically be called directly, but rather through a <see langword="foreach"/> loop.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.RangeExtensions.GetRange(System.Range)">
            <inheritdoc cref="M:LaquaiLib.Extensions.RangeExtensions.<>E__0.GetRange"/>
        </member>
        <member name="M:LaquaiLib.Extensions.RangeExtensions.GetRange(System.Range,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.RangeExtensions.<>E__0.GetRange(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.RangeExtensions.GetEnumerator(System.Range)">
            <inheritdoc cref="M:LaquaiLib.Extensions.RangeExtensions.<>E__0.GetEnumerator"/>
        </member>
        <member name="T:LaquaiLib.Extensions.RegexExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Text.RegularExpressions.Regex"/> Types.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.RegexExtensions.<>E__0.Regex">
            <summary>
            Retrieves the <see cref="T:System.Text.RegularExpressions.Regex"/> instance that was used to create this <see cref="T:System.Text.RegularExpressions.Match"/>.
            </summary>
            <param name="match">The <see cref="T:System.Text.RegularExpressions.Match"/> instance to retrieve the <see cref="T:System.Text.RegularExpressions.Regex"/> instance from.</param>
            <returns>The <see cref="T:System.Text.RegularExpressions.Regex"/> instance that was used to create this <see cref="T:System.Text.RegularExpressions.Match"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.RegexExtensions.get_Regex(System.Text.RegularExpressions.Match)">
            <inheritdoc cref="P:LaquaiLib.Extensions.RegexExtensions.<>E__0.Regex"/>
        </member>
        <member name="M:LaquaiLib.Extensions.RegexExtensions.<>E__1.GetOriginalText">
            <summary>
            Retrieves the original <see cref="T:System.String"/> that was matched by a <see cref="T:System.Text.RegularExpressions.Regex"/> instance to produce this <paramref name="capture"/>.
            </summary>
            <param name="capture">The <see cref="T:System.Text.RegularExpressions.Capture"/> instance to retrieve the original <see cref="T:System.String"/> from.</param>
            <returns>The original <see cref="T:System.String"/> that was matched by a <see cref="T:System.Text.RegularExpressions.Regex"/> instance to produce this <paramref name="capture"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.RegexExtensions.GetOriginalText(System.Text.RegularExpressions.Capture)">
            <inheritdoc cref="M:LaquaiLib.Extensions.RegexExtensions.<>E__1.GetOriginalText"/>
        </member>
        <member name="T:LaquaiLib.Extensions.SemaphoreExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Threading.Semaphore"/> and <see cref="T:System.Threading.SemaphoreSlim"/> Types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__0.WaitOne">
            <summary>
            Blocks the current thread until it can enter the <paramref name="semaphore"/> once.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.Semaphore"/> to enter.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreEntry"/> that represents the entry into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__0.Wait(System.Int32)">
            <summary>
            Blocks the current thread until it can enter the <paramref name="semaphore"/> <paramref name="count"/> times.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.Semaphore"/> to enter.</param>
            <param name="count">The number of times to enter the <paramref name="semaphore"/>.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreEntry"/> that represents the entries into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__0.WaitOne(System.TimeSpan)">
            <summary>
            Blocks the current thread until it can enter the <paramref name="semaphore"/> once.
            If a signal is not received within the specified <paramref name="timeout"/>, a <see cref="T:System.TimeoutException"/> is thrown.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.Semaphore"/> to enter.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait before exiting.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreEntry"/> that represents the entry into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__0.WaitOne(System.TimeSpan,System.Boolean)">
            <summary>
            Blocks the current thread until it can enter the <paramref name="semaphore"/> once, optionally leaving the current synchronization domain before beginning the wait.
            If a signal is not received within the specified <paramref name="timeout"/>, a <see cref="T:System.TimeoutException"/> is thrown.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.Semaphore"/> to enter.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait before exiting.</param>
            <param name="exitContext">Whether to exit the current synchronization domain before the wait.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreEntry"/> that represents the entry into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__0.TryWaitOne(System.TimeSpan)">
            <summary>
            Attempts to enter specified <paramref name="semaphore"/> once. If the entry is not granted within the specified <paramref name="timeout"/>, <see langword="null"/> is returned.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.Semaphore"/> to enter.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait before exiting.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreEntry"/> that represents the entry into the <paramref name="semaphore"/> or <see langword="null"/> if the timeout expired.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__0.TryWaitOne(System.TimeSpan,System.Boolean)">
            <summary>
            Attempts to enter specified <paramref name="semaphore"/> once. If the entry is not granted within the specified <paramref name="timeout"/>, <see langword="null"/> is returned.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.Semaphore"/> to enter.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait before exiting.</param>
            <param name="exitContext">Whether to exit the current synchronization domain before the wait.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreEntry"/> that represents the entry into the <paramref name="semaphore"/> or <see langword="null"/> if the timeout expired.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.WaitOne(System.Threading.Semaphore)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__0.WaitOne"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.Wait(System.Threading.Semaphore,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__0.Wait(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.WaitOne(System.Threading.Semaphore,System.TimeSpan)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__0.WaitOne(System.TimeSpan)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.WaitOne(System.Threading.Semaphore,System.TimeSpan,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__0.WaitOne(System.TimeSpan,System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.TryWaitOne(System.Threading.Semaphore,System.TimeSpan)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__0.TryWaitOne(System.TimeSpan)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.TryWaitOne(System.Threading.Semaphore,System.TimeSpan,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__0.TryWaitOne(System.TimeSpan,System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOne">
            <summary>
            Blocks the current thread until it can enter the <paramref name="semaphore"/> once.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.Wait(System.Int32)">
            <summary>
            Blocks the current thread until it can enter the <paramref name="semaphore"/> <paramref name="count"/> times.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="count">The number of times to enter the <paramref name="semaphore"/>.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entries into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOne(System.TimeSpan)">
            <summary>
            Blocks the current thread until it can enter the <paramref name="semaphore"/> once.
            If a signal is not received within the specified <paramref name="timeout"/>, a <see cref="T:System.TimeoutException"/> is thrown.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait before exiting.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/> or <see langword="null"/> if the timeout expired.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOne(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until it can enter the <paramref name="semaphore"/> once while observing the specified <paramref name="cancellationToken"/>.
            If entry is not granted within the specified <paramref name="timeout"/>, a <see cref="T:System.TimeoutException"/> is thrown.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait before exiting.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOne(System.Threading.CancellationToken)">
            <summary>
            Blocks the current thread until it can enter the <paramref name="semaphore"/> once while observing the specified <paramref name="cancellationToken"/>.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.TryWaitOne(System.TimeSpan)">
            <summary>
            Attempts to enter specified <paramref name="semaphore"/> once. If the entry is not granted within the specified <paramref name="timeout"/>, <see langword="null"/> is returned.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait before exiting.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/> or <see langword="null"/> if the timeout expired.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.TryWaitOne(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Attempts to enter specified <paramref name="semaphore"/> once. If the entry is not granted within the specified <paramref name="timeout"/>, <see langword="null"/> is returned.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait before exiting.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/> or <see langword="null"/> if the timeout expired.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.TryWaitOne(System.Threading.CancellationToken)">
            <summary>
            Attempts to enter specified <paramref name="semaphore"/> once while observing the specified <paramref name="cancellationToken"/>.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <returns>A <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOneAsync">
            <summary>
            Asynchronously waits until entry is granted into the specified <paramref name="semaphore"/> once.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that resolves to a <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitAsync(System.Int32)">
            <summary>
            Asynchronously waits until entry is granted into the specified <paramref name="semaphore"/> <paramref name="count"/> times.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="count">The number of times to enter the <paramref name="semaphore"/>.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that resolves to a <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entries into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOneAsync(System.TimeSpan)">
            <summary>
            Asynchronously waits until entry is granted into the specified <paramref name="semaphore"/> once.
            If a signal is not received within the specified <paramref name="timeout"/>, a <see cref="T:System.TimeoutException"/> is thrown.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait before exiting.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that resolves to a <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/> or <see langword="null"/> if the timeout expired.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOneAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits until entry is granted into the specified <paramref name="semaphore"/> once while observing the specified <paramref name="cancellationToken"/>.
            If entry is not granted within the specified <paramref name="timeout"/>, a <see cref="T:System.TimeoutException"/> is thrown.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait before exiting.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that resolves to a <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOneAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits until entry is granted into the specified <paramref name="semaphore"/> once while observing the specified <paramref name="cancellationToken"/>.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that resolves to a <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.TryWaitOneAsync(System.TimeSpan)">
            <summary>
            Asynchronously attempts to enter specified <paramref name="semaphore"/> once.
            If the entry is not granted within the specified <paramref name="timeout"/>, <see langword="null"/> is returned.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait before exiting.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that resolves to a <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/> or <see langword="null"/> if the timeout expired.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.TryWaitOneAsync(System.TimeSpan,System.Threading.CancellationToken)">
            <summary>
            Asynchronously attempts to enter specified <paramref name="semaphore"/> once.
            If the entry is not granted within the specified <paramref name="timeout"/>, <see langword="null"/> is returned.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="timeout">The <see cref="T:System.TimeSpan"/> to wait before exiting.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that resolves to a <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/> or <see langword="null"/> if the timeout expired.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.TryWaitOneAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously attempts to enter specified <paramref name="semaphore"/> once w
            ile observing the specified <paramref name="cancellationToken"/>.
            </summary>
            <param name="semaphore">The <see cref="T:System.Threading.SemaphoreSlim"/> to enter.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to observe.</param>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask`1"/> that resolves to a <see cref="T:LaquaiLib.Extensions.SemaphoreSlimEntry"/> that represents the entry into the <paramref name="semaphore"/> or <see langword="null"/> if the timeout expired.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.WaitOne(System.Threading.SemaphoreSlim)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOne"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.Wait(System.Threading.SemaphoreSlim,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.Wait(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.WaitOne(System.Threading.SemaphoreSlim,System.TimeSpan)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOne(System.TimeSpan)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.WaitOne(System.Threading.SemaphoreSlim,System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOne(System.TimeSpan,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.WaitOne(System.Threading.SemaphoreSlim,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOne(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.TryWaitOne(System.Threading.SemaphoreSlim,System.TimeSpan)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.TryWaitOne(System.TimeSpan)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.TryWaitOne(System.Threading.SemaphoreSlim,System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.TryWaitOne(System.TimeSpan,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.TryWaitOne(System.Threading.SemaphoreSlim,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.TryWaitOne(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.WaitOneAsync(System.Threading.SemaphoreSlim)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOneAsync"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.WaitAsync(System.Threading.SemaphoreSlim,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitAsync(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.WaitOneAsync(System.Threading.SemaphoreSlim,System.TimeSpan)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOneAsync(System.TimeSpan)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.WaitOneAsync(System.Threading.SemaphoreSlim,System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOneAsync(System.TimeSpan,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.WaitOneAsync(System.Threading.SemaphoreSlim,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.WaitOneAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.TryWaitOneAsync(System.Threading.SemaphoreSlim,System.TimeSpan)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.TryWaitOneAsync(System.TimeSpan)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.TryWaitOneAsync(System.Threading.SemaphoreSlim,System.TimeSpan,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.TryWaitOneAsync(System.TimeSpan,System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreExtensions.TryWaitOneAsync(System.Threading.SemaphoreSlim,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.SemaphoreExtensions.<>E__1.TryWaitOneAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.SemaphoreEntry">
            <summary>
            Represents <paramref name="count"/> entries into the specified <paramref name="semaphore"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.SemaphoreEntry.Semaphore">
            <summary>
            Gets the <see cref="P:LaquaiLib.Extensions.SemaphoreEntry.Semaphore"/> that was entered.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.SemaphoreEntry.Count">
            <summary>
            Gets the number of entries into <see cref="P:LaquaiLib.Extensions.SemaphoreEntry.Semaphore"/> this instance represents.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreEntry.Dispose">
            <summary>
            Releases the <see cref="T:System.Threading.SemaphoreSlim"/> entry.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.SemaphoreSlimEntry">
            <summary>
            Represents <paramref name="count"/> entries into the specified <paramref name="semaphore"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.SemaphoreSlimEntry.SemaphoreSlim">
            <summary>
            Gets the <see cref="P:LaquaiLib.Extensions.SemaphoreSlimEntry.SemaphoreSlim"/> that was entered.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.SemaphoreSlimEntry.Count">
            <summary>
            Gets the number of entries into <see cref="P:LaquaiLib.Extensions.SemaphoreSlimEntry.SemaphoreSlim"/> this instance represents.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.SemaphoreSlimEntry.Dispose">
            <summary>
            Releases the <see cref="T:System.Threading.SemaphoreSlim"/> entries.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.StackTraceExtensions">
            <summary>
            Provides Extension Methods for the <see cref="T:System.Diagnostics.StackTrace"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.StackTraceExtensions.<>E__0.GetFrames(System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets a <see cref="T:System.ReadOnlyMemory`1"/> slice of <see cref="T:System.Diagnostics.StackFrame"/>s from the <paramref name="stackTrace"/>.
            <paramref name="start"/> counts from the end of the <see cref="T:System.Diagnostics.StackFrame"/> array, to match the behavior of <see cref="M:System.Diagnostics.StackTrace.GetFrame(System.Int32)"/>.
            </summary>
            <param name="stackTrace">The <see cref="T:System.Diagnostics.StackTrace"/> to get the <see cref="T:System.Diagnostics.StackFrame"/>s from.</param>
            <param name="start">The start index of the slice.</param>
            <param name="length">The length of the slice.</param>
            <returns>A <see cref="T:System.ReadOnlyMemory`1"/> slice of <see cref="T:System.Diagnostics.StackFrame"/>s from the <paramref name="stackTrace"/>.</returns>
            <remarks>
            This directly accesses the underlying <see cref="T:System.Diagnostics.StackFrame"/> array of the <paramref name="stackTrace"/>.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.StackTraceExtensions.<>E__0.GetLastFrame">
            <summary>
            Gets the last <see cref="T:System.Diagnostics.StackFrame"/> from the <paramref name="stackTrace"/>, which typically represents the stack frame where the <paramref name="stackTrace"/> instance was created.
            </summary>
            <param name="stackTrace">The <see cref="T:System.Diagnostics.StackTrace"/> to get the last <see cref="T:System.Diagnostics.StackFrame"/> from.</param>
            <returns>The last <see cref="T:System.Diagnostics.StackFrame"/> from the <paramref name="stackTrace"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StackTraceExtensions.GetFrames(System.Diagnostics.StackTrace,System.Int32,System.Nullable{System.Int32})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StackTraceExtensions.<>E__0.GetFrames(System.Int32,System.Nullable{System.Int32})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StackTraceExtensions.GetLastFrame(System.Diagnostics.StackTrace)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StackTraceExtensions.<>E__0.GetLastFrame"/>
        </member>
        <member name="T:LaquaiLib.Extensions.StreamExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.IO.Stream"/> Type.
            </summary>
            <summary>
            Provides extension methods for the <see cref="T:System.IO.Stream"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ReadToEnd">
            <summary>
            Reads all bytes from the current position to the end of the <see cref="T:System.IO.Stream"/> and advances the position within it to the end.
            </summary>
            <returns>The bytes of the rest of the <see cref="T:System.IO.Stream"/>, from its current position to the end.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ToArray">
            <summary>
            Reads the entire contents of the <paramref name="stream"/> into a <see langword="byte"/> array, regardless of current position.
            The <paramref name="stream"/> remains sought to its end.
            </summary>
            <returns>The created <see langword="byte"/> array.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ReadToEnd(System.Span{System.Byte})">
            <summary>
            Reads all bytes from the current position to the end of the <see cref="T:System.IO.Stream"/> into the specified <paramref name="span"/> and advances the position within it to the end.
            </summary>
            <param name="span">A <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> to read into.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ReadToEndAsync(System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads all bytes from the current position to the end of the <see cref="T:System.IO.Stream"/>, optionally monitoring a <paramref name="cancellationToken"/> for cancellation requests, and advances the position within it to the end.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the asynchronous read operation and resolves to the bytes read.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ReadToEndAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads all bytes from the current position to the end of the <see cref="T:System.IO.Stream"/> into the specified <paramref name="memory"/> and advances the position within it to the end.
            </summary>
            <param name="memory">A <see cref="T:System.Memory`1"/> of <see cref="T:System.Byte"/> to read into.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous read operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ReadFill(System.Span{System.Byte})">
            <summary>
            Reads as many <see langword="byte"/>s from the specified <paramref name="stream"/> as will fit into <paramref name="span"/>, or less than that if the <paramref name="stream"/> has fewer bytes left before the end.
            </summary>
            <param name="span">The <see cref="T:System.Span`1"/> to read into.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ReadFillAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <summary>
            Asynchronously reads data from a stream into a specified memory buffer.
            </summary>
            <param name="memory">The buffer that receives the read bytes from the stream.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous read operation.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ReadToEnd"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ToArray(System.IO.Stream)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ToArray"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadToEnd(System.IO.Stream,System.Span{System.Byte})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ReadToEnd(System.Span{System.Byte})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadToEndAsync(System.IO.Stream,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ReadToEndAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadToEndAsync(System.IO.Stream,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ReadToEndAsync(System.Memory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadFill(System.IO.Stream,System.Span{System.Byte})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ReadFill(System.Span{System.Byte})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.ReadFillAsync(System.IO.Stream,System.Memory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__0.ReadFillAsync(System.Memory{System.Byte},System.Threading.CancellationToken)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsSpan">
            <summary>
            Gets a <see cref="T:System.Span`1"/> over the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <returns>A <see cref="T:System.Span`1"/> over the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.</returns>
            <remarks>
            This should be treated with the same care as a <see cref="T:System.Span`1"/> returned from <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            Do not use the <see cref="T:System.IO.MemoryStream"/> while the <see cref="T:System.Span`1"/> is in use.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsSpan(System.Index)">
            <summary>
            Gets a <see cref="T:System.Span`1"/> over a section of the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="start">The starting index of the slice.</param>
            <returns>A <see cref="T:System.Span`1"/> over the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.</returns>
            <remarks>
            This should be treated with the same care as a <see cref="T:System.Span`1"/> returned from <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            Do not use the <see cref="T:System.IO.MemoryStream"/> while the <see cref="T:System.Span`1"/> is in use.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsSpan(System.Int32)">
            <summary>
            Gets a <see cref="T:System.Span`1"/> over a section of the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="start">The starting index of the slice.</param>
            <returns>A <see cref="T:System.Span`1"/> over the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.</returns>
            <remarks>
            This should be treated with the same care as a <see cref="T:System.Span`1"/> returned from <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            Do not use the <see cref="T:System.IO.MemoryStream"/> while the <see cref="T:System.Span`1"/> is in use.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsSpan(System.Range)">
            <summary>
            Gets a <see cref="T:System.Span`1"/> over a section of the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="range">The range in the backing storage to get a <see cref="T:System.Span`1"/> over.</param>
            <returns>A <see cref="T:System.Span`1"/> over the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.</returns>
            <remarks>
            This should be treated with the same care as a <see cref="T:System.Span`1"/> returned from <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            Do not use the <see cref="T:System.IO.MemoryStream"/> while the <see cref="T:System.Span`1"/> is in use.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsSpan(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:System.Span`1"/> over a section of the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="start">The starting index of the slice.</param>
            <param name="length">The length of the slice.</param>
            <returns>A <see cref="T:System.Span`1"/> over the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.</returns>
            <remarks>
            This should be treated with the same care as a <see cref="T:System.Span`1"/> returned from <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            Do not use the <see cref="T:System.IO.MemoryStream"/> while the <see cref="T:System.Span`1"/> is in use.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsMemory">
            <summary>
            Gets a <see cref="T:System.Memory`1"/> over the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <returns>A <see cref="T:System.Memory`1"/> over the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.</returns>
            <remarks>
            This should be treated with the same care as a <see cref="T:System.Span`1"/> returned from <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            Do not use the <see cref="T:System.IO.MemoryStream"/> while the <see cref="T:System.Memory`1"/> is in use.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsMemory(System.Index)">
            <summary>
            Gets a <see cref="T:System.Memory`1"/> over a section of the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="start">The starting index of the slice.</param>
            <returns>A <see cref="T:System.Memory`1"/> over the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.</returns>
            <remarks>
            This should be treated with the same care as a <see cref="T:System.Span`1"/> returned from <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            Do not use the <see cref="T:System.IO.MemoryStream"/> while the <see cref="T:System.Memory`1"/> is in use.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsMemory(System.Int32)">
            <summary>
            Gets a <see cref="T:System.Memory`1"/> over a section of the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="start">The starting index of the slice.</param>
            <returns>A <see cref="T:System.Memory`1"/> over the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.</returns>
            <remarks>
            This should be treated with the same care as a <see cref="T:System.Span`1"/> returned from <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            Do not use the <see cref="T:System.IO.MemoryStream"/> while the <see cref="T:System.Memory`1"/> is in use.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsMemory(System.Range)">
            <summary>
            Gets a <see cref="T:System.Memory`1"/> over a section of the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="range">The range in the backing storage to get a <see cref="T:System.Memory`1"/> over.</param>
            <returns>A <see cref="T:System.Memory`1"/> over the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.</returns>
            <remarks>
            This should be treated with the same care as a <see cref="T:System.Span`1"/> returned from <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            Do not use the <see cref="T:System.IO.MemoryStream"/> while the <see cref="T:System.Memory`1"/> is in use.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsMemory(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:System.Memory`1"/> over a section of the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.
            </summary>
            <param name="start">The starting index of the slice.</param>
            <param name="length">The length of the slice.</param>
            <returns>A <see cref="T:System.Memory`1"/> over the backing storage of the specified <see cref="T:System.IO.MemoryStream"/>.</returns>
            <remarks>
            This should be treated with the same care as a <see cref="T:System.Span`1"/> returned from <see cref="M:System.Runtime.InteropServices.CollectionsMarshal.AsSpan``1(System.Collections.Generic.List{``0})"/>.
            Do not use the <see cref="T:System.IO.MemoryStream"/> while the <see cref="T:System.Memory`1"/> is in use.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.Duplicate">
            <summary>
            Creates and returns an exact copy of this <see cref="T:System.IO.MemoryStream"/>; its backing store references the same byte array as the original stream.
            It is, of course, capable of maintaining its own position and length within that array.
            Concurrent reads on the two streams are safe, but writing should be synchronized if it cannot be guaranteed that the segments being written do not overlap.
            Using a <see cref="T:System.Threading.ReaderWriterLockSlim"/> to manage this is recommended if writing is necessary.
            <para/>Note that the two streams will lose synchronization if write operations cause the backing array to be resized.
            </summary>
            <returns>A new <see cref="T:System.IO.MemoryStream"/> as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.CopyBlock(System.Int32,System.Int32,System.Span{System.Byte})">
            <summary>
            Reads a block of bytes from the current stream and writes the data to a given span.
            </summary>
            <param name="position">The byte offset in the stream at which to begin reading.</param>
            <param name="length">The number of bytes to read.</param>
            <param name="destination">The <see cref="T:System.Span`1"/> to write the data to.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="position"/> is less than zero or <paramref name="position"/> + <paramref name="length"/> is greater than the length of the stream.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.CopyBlock(System.Int32,System.Int32,System.Span{System.Byte},System.Int32)">
            <summary>
            Reads a block of bytes from the current stream and writes the data to a given span.
            </summary>
            <param name="position">The byte offset in the stream at which to begin reading.</param>
            <param name="length">The number of bytes to read.</param>
            <param name="destination">The <see cref="T:System.Span`1"/> to write the data to.</param>
            <param name="destPosition">The byte offset in the destination span at which to begin writing.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if <paramref name="position"/> is less than zero or <paramref name="position"/> + <paramref name="length"/> is greater than the length of the stream.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the destination span is too short to contain the requested number of bytes.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.AsSpan(System.IO.MemoryStream)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsSpan"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.AsSpan(System.IO.MemoryStream,System.Index)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsSpan(System.Index)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.AsSpan(System.IO.MemoryStream,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsSpan(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.AsSpan(System.IO.MemoryStream,System.Range)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsSpan(System.Range)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.AsSpan(System.IO.MemoryStream,System.Int32,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsSpan(System.Int32,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.AsMemory(System.IO.MemoryStream)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsMemory"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.AsMemory(System.IO.MemoryStream,System.Index)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsMemory(System.Index)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.AsMemory(System.IO.MemoryStream,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsMemory(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.AsMemory(System.IO.MemoryStream,System.Range)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsMemory(System.Range)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.AsMemory(System.IO.MemoryStream,System.Int32,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.AsMemory(System.Int32,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.Duplicate(System.IO.MemoryStream)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.Duplicate"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.CopyBlock(System.IO.MemoryStream,System.Int32,System.Int32,System.Span{System.Byte})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.CopyBlock(System.Int32,System.Int32,System.Span{System.Byte})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StreamExtensions.CopyBlock(System.IO.MemoryStream,System.Int32,System.Int32,System.Span{System.Byte},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StreamExtensions.<>E__1.CopyBlock(System.Int32,System.Int32,System.Span{System.Byte},System.Int32)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.StringExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.String"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.Repeat(System.Int32)">
            <summary>
            Constructs a new string from this string repeated <paramref name="count"/> times.
            </summary>
            <param name="source">The string to repeat.</param>
            <param name="count">The number of times to repeat <paramref name="source"/>.</param>
            <returns>A string consisting of <paramref name="source"/> repeated <paramref name="count"/> times.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ToSentence">
            <summary>
            Converts the specified input string to sentence case (that is, the first character is capitalized and all other characters are lower case).
            </summary>
            <param name="source">The <see cref="T:System.String"/> to convert.</param>
            <returns><paramref name="source"/> in sentence case.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ToTitle(System.Globalization.CultureInfo)">
            <summary>
            Converts the specified input string to title case according to the rules of the specified <paramref name="culture"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to convert.</param>
            <param name="culture">The <see cref="T:System.Globalization.CultureInfo"/> to use for casing rules.</param>
            <returns><paramref name="source"/> in title case according to <paramref name="culture"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ToTitleInvariant">
            <summary>
            Converts the specified input string to title case according to the rules of the invariant culture.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to convert.</param>
            <returns><paramref name="source"/> in title case according to the invariant culture.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.TransparentSplit(System.Text.RegularExpressions.Regex,System.StringSplitOptions)">
            <summary>
            "Transparently" splits a <see langword="string"/> at each match of the specified <see cref="T:System.Text.RegularExpressions.Regex"/>; that is, the return value details both the <see langword="string"/>s that were split out of the original and the separators that were used to split them.
            </summary>
            <param name="source">The <see langword="string"/> to split.</param>
            <param name="splitBy">A <see cref="T:System.Text.RegularExpressions.Regex"/> instance that specifies the pattern to split by.</param>
            <param name="options"><see cref="T:System.StringSplitOptions"/> to apply to the split operation.</param>
            <returns>An array of tuples, each containing a split <see langword="string"/> and the separator that was used to split it.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.TransparentSplit(System.StringSplitOptions,System.String[])">
            <summary>
            "Transparently" splits a <see langword="string"/> at each match of the specified <see cref="T:System.Text.RegularExpressions.Regex"/>; that is, the return value details both the <see langword="string"/>s that were split out of the original and the separators that were used to split them.
            </summary>
            <param name="source">The <see langword="string"/> to split.</param>
            <param name="options"><see cref="T:System.StringSplitOptions"/> to apply to the split operation.</param>
            <param name="splitStrings">Any number of <see langword="string"/>s to split the original by. These are considered literals, not <see cref="T:System.Text.RegularExpressions.Regex"/> patterns.</param>
            <returns>An array of tuples, each containing a split <see langword="string"/> and the separator that was used to split it.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.Remove(System.ReadOnlySpan{System.Char})">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.Char"/>s from this <see cref="T:System.String"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="remove">The <see cref="T:System.Char"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> <see langword="char"/>s removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.Remove(System.Int32,System.ReadOnlySpan{System.Char})">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.Char"/>s from this <see cref="T:System.String"/> starting at the specified index.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="startIndex">The zero-based index at which to begin removing <see cref="T:System.Char"/>s.</param>
            <param name="remove">The <see cref="T:System.Char"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> chars removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.Remove(System.ReadOnlySpan{System.String})">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.String"/>s from this <see cref="T:System.String"/>.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="remove">The <see cref="T:System.String"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> chars removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.Remove(System.Int32,System.ReadOnlySpan{System.String})">
            <summary>
            Removes all occurrences of the specified <see cref="T:System.String"/>s from this <see cref="T:System.String"/> starting at the specified index.
            </summary>
            <param name="source">The <see cref="T:System.String"/> to modify.</param>
            <param name="startIndex">The zero-based index at which to begin removing <see cref="T:System.String"/>s.</param>
            <param name="remove">The <see cref="T:System.String"/>s to remove.</param>
            <returns>The original string with all occurrences of the <paramref name="remove"/> chars removed.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOf(System.ReadOnlySpan{System.Char})">
            <summary>
            Reports the zero-based indices of all occurrences of the specified <see langword="char"/> span in this instance.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">The <see langword="char"/> span to seek.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that <see langword="char"/> span is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOf(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified <see langword="char"/> span in this instance. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">The <see langword="char"/> span to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that <see langword="char"/> span is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOf(System.Char)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified Unicode character in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">A Unicode character to seek.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that character is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOf(System.Char,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified Unicode character in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">A Unicode character to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that character is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOf(System.String)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified string in this instance.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">The string to seek.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that string is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOf(System.String,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of the specified string in this instance. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="search">The string to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of <paramref name="search"/> if that string is found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndexOfAny(System.ReadOnlySpan{System.Char})">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode <see langword="char"/>s in this <see langword="string"/>.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">The Unicode <see langword="char"/>s to seek.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any <see langword="char"/> in <paramref name="searches"/> was found; -1 if no <see langword="char"/> in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndexOfAny(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of any of the specified Unicode <see langword="char"/>s in this <see langword="string"/>. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">The Unicode <see langword="char"/>s to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any <see langword="char"/> in <paramref name="searches"/> was found; -1 if no <see langword="char"/> in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndexOfAny(System.ReadOnlySpan{System.String},System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any string in a specified sequence of strings.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="stringComparison">The <see cref="T:System.StringComparison"/> behavior to employ when searching for the delimiters. Defaults to <see cref="F:System.StringComparison.CurrentCulture"/>.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any <see langword="string"/> in <paramref name="searches"/> was found; -1 if no <see langword="string"/> in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndexOfAny(System.ReadOnlySpan{System.String},System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence in this instance of any <see langword="string"/> in a specified sequence of <see langword="string"/>s. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="stringComparison">The <see cref="T:System.StringComparison"/> behavior to employ when searching for the delimiters. Defaults to <see cref="F:System.StringComparison.CurrentCulture"/>.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any <see langword="string"/> in <paramref name="searches"/> was found; -1 if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAny(System.ReadOnlySpan{System.Char})">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any Unicode character in a specified sequence of characters.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character in <paramref name="searches"/> was found; an empty collection if no character in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAny(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any Unicode character in a specified sequence of characters. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character in <paramref name="searches"/> was found; an empty collection if no character in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAny(System.ReadOnlySpan{System.String})">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any string in a specified sequence of strings.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string in <paramref name="searches"/> was found; an empty collection if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAny(System.ReadOnlySpan{System.String},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences in this instance of any string in a specified sequence of strings. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="searches">A sequence of strings to seek.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string in <paramref name="searches"/> was found; an empty collection if no string in <paramref name="searches"/> was found.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfExcept(System.Char)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the one specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A Unicode character to except.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfExcept(System.Char,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the one specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A Unicode character to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfExcept(System.String)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the ones contained in <paramref name="except"/> in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A string containing Unicode character to except.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfExcept(System.String,System.Int32)">
            <summary>
            Reports the zero-based indices of all occurrences of Unicode characters other than the ones contained in <paramref name="except"/> in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="except">A string containing Unicode character to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>All zero-based index positions of any characters that are left, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndexOfAnyExcept(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Reports the zero-based index of the first occurrence of a character other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any character other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndexOfAnyExcept(System.ReadOnlySpan{System.String},System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based index of the first occurrence of a string (or single character) other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of strings to except.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="stringComparison">A <see cref="T:System.StringComparison"/> value specifying the comparison behavior.</param>
            <returns>The zero-based index position of the first occurrence in this instance where any string other than the ones in <paramref name="excepts"/> was found, or -1 otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAnyExcept(System.ReadOnlySpan{System.Char})">
            <summary>
            Reports the zero-based indices of the all occurrences of any Unicode character other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAnyExcept(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Reports the zero-based indices of the all occurrences of any Unicode character other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="startIndex">The search starting position.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any character not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAnyExcept(System.ReadOnlySpan{System.String},System.StringComparison)">
            <summary>
            Reports the zero-based indices of the all occurrences of any string (or single character) other than the ones specified in this string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="stringComparison">A <see cref="T:System.StringComparison"/> value specifying the comparison behavior.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAnyExcept(System.ReadOnlySpan{System.String},System.Int32,System.StringComparison)">
            <summary>
            Reports the zero-based indices of the all occurrences of any string (or single character) other than the ones specified in this string. The search starts at a specified character position.
            </summary>
            <param name="source">The string to search.</param>
            <param name="excepts">A sequence of characters to except.</param>
            <param name="startIndex">The search starting position.</param>
            <param name="stringComparison">A <see cref="T:System.StringComparison"/> value specifying the comparison behavior.</param>
            <returns>The zero-based index positions of all occurrences in this instance where any string not contained in <paramref name="excepts"/> was found, or an empty collection otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.SelectLines(System.Func{System.String,System.String})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <returns>The transformed string.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.SelectLines(System.Func{System.String,System.Int32,System.String})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string, incorporating each line's index in the function.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <returns>The transformed string.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.SelectLines(System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string that satisfies conditions defined by <paramref name="predicate"/>. Lines that do not satisfy this condition are copied without applying <paramref name="transform"/>.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <param name="predicate">The function used to determine which lines are transformed using <paramref name="transform"/>.</param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.SelectLines(System.Func{System.String,System.Int32,System.String},System.Func{System.String,System.Int32,System.Boolean})">
            <summary>
            Applies a <paramref name="transform"/> function to each line of a string that satisfies conditions defined by <paramref name="predicate"/>, incorporating each line's index in the functions. Lines that do not satisfy this condition are copied without applying <paramref name="transform"/>.
            </summary>
            <param name="source">The string to search.</param>
            <param name="transform">The function used to transform each line of the input string.</param>
            <param name="predicate">The function used to determine which lines are transformed using <paramref name="transform"/>.</param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ForEachLine(System.Action{System.ReadOnlySpan{System.Char}})">
            <summary>
            Executes an <paramref name="action"/> for each line of a <see langword="string"/>. It is passed a <see cref="T:System.ReadOnlySpan`1"/> of the line.
            </summary>
            <param name="source">The <see langword="string"/> to iterate over.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to execute for each line.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ForEachLine(System.Action{System.ReadOnlySpan{System.Char},System.Int32})">
            <summary>
            Executes an <paramref name="action"/> for each line of a <see langword="string"/>. It is passed a <see cref="T:System.ReadOnlySpan`1"/> of the line and the index of the line.
            </summary>
            <param name="source">The <see langword="string"/> to iterate over.</param>
            <param name="action">The <see cref="T:System.Action`2"/> to execute for each line.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ForEachLine(System.Action{System.ReadOnlySpan{System.Char}},System.Func{System.ReadOnlySpan{System.Char},System.Boolean})">
            <summary>
            Executes an <paramref name="action"/> for each line of a <see langword="string"/> that satisfies conditions defined by <paramref name="predicate"/>. It is passed a <see cref="T:System.ReadOnlySpan`1"/> of the line.
            </summary>
            <param name="source">The <see langword="string"/> to iterate over.</param>
            <param name="action">The <see cref="T:System.Action`1"/> to execute for each line.</param>
            <param name="predicate">The <see cref="T:System.Func`2"/> used to determine which lines are processed by <paramref name="action"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ForEachLine(System.Action{System.ReadOnlySpan{System.Char},System.Int32},System.Func{System.ReadOnlySpan{System.Char},System.Int32,System.Boolean})">
            <summary>
            Executes an <paramref name="action"/> for each line of a <see langword="string"/> that satisfies conditions defined by <paramref name="predicate"/>. It is passed a <see cref="T:System.ReadOnlySpan`1"/> of the line and the index of the line.
            </summary>
            <param name="source">The <see langword="string"/> to iterate over.</param>
            <param name="action">The <see cref="T:System.Action`2"/> to execute for each line.</param>
            <param name="predicate">The <see cref="T:System.Func`3"/> used to determine which lines are processed by <paramref name="action"/>.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__0.GetSimilarity(System.String,System.StringComparer)">
            <summary>
            Computes a value that indicates the similarity between two strings. "Similarity" is defined as the number of characters that are the same in both strings, divided by the length of the longer string. As such, the value returned by this method is always between <c>0</c> (the strings are have no characters in common) and <c>1</c> (the strings are equal), inclusive.
            </summary>
            <param name="source">The first <see cref="T:System.String"/> to use for the comparison.</param>
            <param name="second">The second <see cref="T:System.String"/> to use for the comparison.</param>
            <param name="stringComparer">A <see cref="T:System.StringComparer"/> instance to use when comparing the <see cref="T:System.String"/>s. Defaults to <see cref="P:System.StringComparer.OrdinalIgnoreCase"/>.</param>
            <returns>The computed similarity as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Repeat(System.String,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.Repeat(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ToSentence(System.String)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ToSentence"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ToTitle(System.String,System.Globalization.CultureInfo)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ToTitle(System.Globalization.CultureInfo)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ToTitleInvariant(System.String)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ToTitleInvariant"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.TransparentSplit(System.String,System.Text.RegularExpressions.Regex,System.StringSplitOptions)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.TransparentSplit(System.Text.RegularExpressions.Regex,System.StringSplitOptions)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.TransparentSplit(System.String,System.StringSplitOptions,System.String[])">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.TransparentSplit(System.StringSplitOptions,System.String[])"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.Remove(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.Int32,System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.Remove(System.Int32,System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.ReadOnlySpan{System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.Remove(System.ReadOnlySpan{System.String})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Remove(System.String,System.Int32,System.ReadOnlySpan{System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.Remove(System.Int32,System.ReadOnlySpan{System.String})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOf(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.ReadOnlySpan{System.Char},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOf(System.ReadOnlySpan{System.Char},System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.Char)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOf(System.Char)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.Char,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOf(System.Char,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.String)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOf(System.String)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOf(System.String,System.String,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOf(System.String,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAny(System.String,System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndexOfAny(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAny(System.String,System.ReadOnlySpan{System.Char},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndexOfAny(System.ReadOnlySpan{System.Char},System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAny(System.String,System.ReadOnlySpan{System.String},System.StringComparison)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndexOfAny(System.ReadOnlySpan{System.String},System.StringComparison)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAny(System.String,System.ReadOnlySpan{System.String},System.Int32,System.StringComparison)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndexOfAny(System.ReadOnlySpan{System.String},System.Int32,System.StringComparison)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAny(System.String,System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAny(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAny(System.String,System.ReadOnlySpan{System.Char},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAny(System.ReadOnlySpan{System.Char},System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAny(System.String,System.ReadOnlySpan{System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAny(System.ReadOnlySpan{System.String})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAny(System.String,System.ReadOnlySpan{System.String},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAny(System.ReadOnlySpan{System.String},System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfExcept(System.String,System.Char)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfExcept(System.Char)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfExcept(System.String,System.Char,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfExcept(System.Char,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfExcept(System.String,System.String)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfExcept(System.String)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfExcept(System.String,System.String,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfExcept(System.String,System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAnyExcept(System.String,System.ReadOnlySpan{System.Char},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndexOfAnyExcept(System.ReadOnlySpan{System.Char},System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndexOfAnyExcept(System.String,System.ReadOnlySpan{System.String},System.Int32,System.StringComparison)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndexOfAnyExcept(System.ReadOnlySpan{System.String},System.Int32,System.StringComparison)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAnyExcept(System.String,System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAnyExcept(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAnyExcept(System.String,System.ReadOnlySpan{System.Char},System.Int32)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAnyExcept(System.ReadOnlySpan{System.Char},System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAnyExcept(System.String,System.ReadOnlySpan{System.String},System.StringComparison)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAnyExcept(System.ReadOnlySpan{System.String},System.StringComparison)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.IndicesOfAnyExcept(System.String,System.ReadOnlySpan{System.String},System.Int32,System.StringComparison)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.IndicesOfAnyExcept(System.ReadOnlySpan{System.String},System.Int32,System.StringComparison)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.SelectLines(System.String,System.Func{System.String,System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.SelectLines(System.Func{System.String,System.String})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.SelectLines(System.String,System.Func{System.String,System.Int32,System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.SelectLines(System.Func{System.String,System.Int32,System.String})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.SelectLines(System.String,System.Func{System.String,System.String},System.Func{System.String,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.SelectLines(System.Func{System.String,System.String},System.Func{System.String,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.SelectLines(System.String,System.Func{System.String,System.Int32,System.String},System.Func{System.String,System.Int32,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.SelectLines(System.Func{System.String,System.Int32,System.String},System.Func{System.String,System.Int32,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ForEachLine(System.String,System.Action{System.ReadOnlySpan{System.Char}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ForEachLine(System.Action{System.ReadOnlySpan{System.Char}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ForEachLine(System.String,System.Action{System.ReadOnlySpan{System.Char},System.Int32})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ForEachLine(System.Action{System.ReadOnlySpan{System.Char},System.Int32})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ForEachLine(System.String,System.Action{System.ReadOnlySpan{System.Char}},System.Func{System.ReadOnlySpan{System.Char},System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ForEachLine(System.Action{System.ReadOnlySpan{System.Char}},System.Func{System.ReadOnlySpan{System.Char},System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.ForEachLine(System.String,System.Action{System.ReadOnlySpan{System.Char},System.Int32},System.Func{System.ReadOnlySpan{System.Char},System.Int32,System.Boolean})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.ForEachLine(System.Action{System.ReadOnlySpan{System.Char},System.Int32},System.Func{System.ReadOnlySpan{System.Char},System.Int32,System.Boolean})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.GetSimilarity(System.String,System.String,System.StringComparer)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__0.GetSimilarity(System.String,System.StringComparer)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__1.EnumerateSplits(System.ReadOnlySpan{System.String},System.StringComparison)">
            <summary>
            Enumerates the segments of a <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/>s that are separated by any of the <see langword="string"/>s specified by <paramref name="strings"/>.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to enumerate the segments of.</param>
            <param name="strings">The <see langword="string"/>s to use as delimiters.</param>
            <param name="stringComparison">The <see cref="T:System.StringComparison"/> behavior to employ when searching for the delimiters. Defaults to <see cref="F:System.StringComparison.CurrentCulture"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:System.ReadOnlySpan`1"/>s representing the segments of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
            <remarks>
            This overload expects specifically one or more <see langword="string"/>s as the delimiter(s). To use one or more <see langword="char"/>s as the delimiter(s), use <see cref="!:EnumerateSplits&lt;T&gt;(ReadOnlySpan&lt;T&gt;, ReadOnlySpan&lt;T&gt;)"/> instead.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__1.FindCount(System.ReadOnlySpan{System.Char})">
            <summary>
            Finds the number of occurrences of any of the specified <see langword="char"/>s in the input <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/>s.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to search.</param>
            <param name="chars">The <see langword="char"/>s to search for.</param>
            <returns>The number of occurrences of any of the <paramref name="chars"/> in the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__1.FindCount(System.ReadOnlySpan{System.String},System.StringComparison)">
            <summary>
            Finds the number of occurrences of any of the specified <see langword="char"/>s in the input <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Char"/>s.
            </summary>
            <param name="source">The <see cref="T:System.ReadOnlySpan`1"/> to search.</param>
            <param name="strings">The <see langword="string"/>s to search for.</param>
            <param name="stringComparison">The <see cref="T:System.StringComparison"/> behavior to employ when searching for the strings. Defaults to <see cref="F:System.StringComparison.CurrentCulture"/>.</param>
            <returns>The number of occurrences of any of the <paramref name="strings"/> in the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__1.FindCount(System.ReadOnlySpan{System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.FindCount(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.String},System.StringComparison)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.EnumerateSplits(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.String},System.StringComparison)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__1.EnumerateSplits(System.ReadOnlySpan{System.String},System.StringComparison)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.FindCount(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__1.FindCount(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.FindCount(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.String},System.StringComparison)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__1.FindCount(System.ReadOnlySpan{System.String},System.StringComparison)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.FindCount(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__1.FindCount(System.ReadOnlySpan{System.String})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__2.Replace(System.Collections.Generic.IEnumerable{System.String},System.String)">
            <summary>
            Creates a new string from this string with all occurrences of the strings in <paramref name="finds"/> replaced with <paramref name="replace"/>.
            </summary>
            <param name="source">The string to perform replacements in.</param>
            <param name="finds">A collection of strings to search for in <paramref name="source"/>.</param>
            <param name="replace">The replacement for occurrences of strings in <paramref name="finds"/>.</param>
            <returns>A string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__2.Replace(System.String,System.Func{System.String},System.Boolean)">
            <summary>
            Creates a new string from this string with all occurrences of <paramref name="search"/> replaced with strings produced by <paramref name="replaceFactory"/>. Allows for stateful replacements.
            </summary>
            <param name="source">The string to perform replacements in.</param>
            <param name="search">The string to search for in <paramref name="source"/>.</param>
            <param name="replaceFactory">A <see cref="T:System.Func`1"/> that produces the replacement for occurrences of <paramref name="search"/>. It is called once for each occurrence of <paramref name="search"/>.</param>
            <param name="recurse"><see langword="true"/> to not skip the substring produced by <paramref name="replaceFactory"/> calls when searching for the next occurrence of <paramref name="search"/>. <b>If <paramref name="replaceFactory"/> always returns strings containing <paramref name="search"/>, this will result in an infinite loop.</b> Defaults to <see langword="false"/> for this very reason.</param>
            <returns>The string with replacements as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__2.Replace(System.String,System.Func{System.String,System.String},System.Boolean)">
            <summary>
            Creates a new string from this string with all occurrences of <paramref name="search"/> replaced with strings produced by <paramref name="replaceFactory"/>. Allows for stateful replacements.
            </summary>
            <param name="source">The string to perform replacements in.</param>
            <param name="search">The string to search for in <paramref name="source"/>.</param>
            <param name="replaceFactory">A <see cref="T:System.Func`1"/> that produces the replacement for occurrences of <paramref name="search"/>. It is called once for each occurrence of <paramref name="search"/> and passed the previous iteration's produced replacement or <see langword="null"/> on the first invocation.</param>
            <param name="recurse"><see langword="true"/> to not skip the substring produced by <paramref name="replaceFactory"/> calls when searching for the next occurrence of <paramref name="search"/>. <b>If <paramref name="replaceFactory"/> always returns strings containing <paramref name="search"/>, this will result in an infinite loop.</b> Defaults to <see langword="false"/> for this very reason.</param>
            <returns>The string with replacements as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.<>E__2.TryReplace(System.String,System.String,System.String@,System.StringComparison)">
            <summary>
            Replaces all occurrences of the specified <paramref name="search"/> <see langword="string"/> with the specified <paramref name="replacement"/> <see langword="string"/> using the specified <paramref name="stringComparison"/> and returns whether the replacement resulted in a change to the original string.
            </summary>
            <param name="source">The <see langword="string"/> to search.</param>
            <param name="search">The <see langword="string"/> to search for.</param>
            <param name="replacement">The <see langword="string"/> to replace <paramref name="search"/> with.</param>
            <param name="replaced">An <see langword="out"/> variable that receives the result of the replacement. It is assigned the result of the <see cref="M:System.String.Replace(System.String,System.String,System.StringComparison)"/> call regardless of whether this results in a change.</param>
            <param name="stringComparison">The <see cref="T:System.StringComparison"/> to use for the replacement <b>and</b> the comparison of the original and replaced strings. Defaults to <see cref="F:System.StringComparison.CurrentCulture"/>.</param>
            <returns><see langword="true"/> if the replace operation resulted in a change to the original string, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Replace(System.String,System.Collections.Generic.IEnumerable{System.String},System.String)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__2.Replace(System.Collections.Generic.IEnumerable{System.String},System.String)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Replace(System.String,System.String,System.Func{System.String},System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__2.Replace(System.String,System.Func{System.String},System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.Replace(System.String,System.String,System.Func{System.String,System.String},System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__2.Replace(System.String,System.Func{System.String,System.String},System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.StringExtensions.TryReplace(System.String,System.String,System.String,System.String@,System.StringComparison)">
            <inheritdoc cref="M:LaquaiLib.Extensions.StringExtensions.<>E__2.TryReplace(System.String,System.String,System.String@,System.StringComparison)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.TaskExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Threading.Tasks.Task"/>, <see cref="T:System.Threading.Tasks.Task`1"/>, <see cref="T:System.Threading.Tasks.ValueTask"/> and <see cref="T:System.Threading.Tasks.ValueTask`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.TaskExtensions.<>E__0.WaitSafeAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task"/> that completes when the specified <paramref name="task"/> completes or when the specified <paramref name="cancellationToken"/> is canceled, but neither event will cause an exception to be thrown.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that can be used to cancel the wait.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the asynchronous wait on <paramref name="task"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TaskExtensions.WaitSafeAsync(System.Threading.Tasks.Task,System.Threading.CancellationToken)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TaskExtensions.<>E__0.WaitSafeAsync(System.Threading.CancellationToken)"/>
        </member>
        <member name="T:LaquaiLib.Extensions.TimingExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.DateTime"/>, <see cref="T:System.DateTimeOffset"/>, <see cref="T:System.DateOnly"/> and <see cref="T:System.TimeOnly"/> types.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.<>E__0.NextWeekday(System.Nullable{System.TimeOnly},System.Boolean)">
            <summary>
            Advances the given <see cref="T:System.DateTime"/> to the next weekday.
            </summary>
            <param name="startAt">The <see cref="T:System.DateTime"/> to start at.</param>
            <param name="timeComponent">The time of day to set the <see cref="T:System.DateTime"/> to. Defaults to <see langword="null"/>, which leaves the time component unchanged.</param>
            <param name="includeSaturdays">Whether to include Saturdays as weekdays. Defaults to <see langword="false"/>.</param>
            <returns>The next weekday after the given <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.<>E__0.NextWeekday(System.Nullable{System.DateTime},System.Boolean)">
            <summary>
            Advances the given <see cref="T:System.DateTime"/> to the next weekday.
            </summary>
            <param name="startAt">The <see cref="T:System.DateTime"/> to start at.</param>
            <param name="timeComponent">Another <see cref="T:System.DateTime"/> instance the time component of which to set the resulting <see cref="T:System.DateTime"/> to. Defaults to <see langword="null"/>, which leaves the time component unchanged.</param>
            <param name="includeSaturdays">Whether to include Saturdays as weekdays. Defaults to <see langword="false"/>.</param>
            <returns>The next weekday after the given <see cref="T:System.DateTime"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.<>E__0.GetAwaiter">
            <summary>
            Returns an awaiter that can be used to await a <see cref="T:System.Threading.Tasks.Task"/> that completes when the specified <see cref="T:System.DateTime"/> is reached.
            </summary>
            <param name="dateTime">The <see cref="T:System.DateTime"/> to wait for.</param>
            <returns>A <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"/> instance is used to await the <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.NextWeekday(System.DateTime,System.Nullable{System.TimeOnly},System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TimingExtensions.<>E__0.NextWeekday(System.Nullable{System.TimeOnly},System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.NextWeekday(System.DateTime,System.Nullable{System.DateTime},System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TimingExtensions.<>E__0.NextWeekday(System.Nullable{System.DateTime},System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.GetAwaiter(System.DateTime)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TimingExtensions.<>E__0.GetAwaiter"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.<>E__1.GetAwaiter">
            <summary>
            Returns an awaiter that can be used to await a <see cref="T:System.Threading.Tasks.Task"/> that completes when the specified <see cref="T:System.DateTimeOffset"/> is reached.
            </summary>
            <param name="dateTimeOffset">The <see cref="T:System.DateTimeOffset"/> to wait for.</param>
            <returns>A <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"/> instance is used to await the <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.GetAwaiter(System.DateTimeOffset)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TimingExtensions.<>E__1.GetAwaiter"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.<>E__2.GetAwaiter">
            <summary>
            Returns an awaiter that can be used to await a <see cref="T:System.Threading.Tasks.Task"/> that completes when the specified <see cref="T:System.DateOnly"/> at midnight is reached.
            </summary>
            <param name="dateOnly">The <see cref="T:System.DateOnly"/> to wait for.</param>
            <returns>A <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"/> instance is used to await the <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.GetAwaiter(System.DateOnly)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TimingExtensions.<>E__2.GetAwaiter"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.<>E__3.GetAwaiter">
            <summary>
            Returns an awaiter that can be used to await a <see cref="T:System.Threading.Tasks.Task"/> that completes when the specified <see cref="T:System.TimeOnly"/> on the current day is reached.
            </summary>
            <param name="timeOnly">The <see cref="T:System.TimeOnly"/> to wait for.</param>
            <returns>A <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"/> instance is used to await the <see cref="T:System.Threading.Tasks.Task"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.GetAwaiter(System.TimeOnly)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TimingExtensions.<>E__3.GetAwaiter"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.<>E__4.GetAwaiter">
            <summary>
            Returns an awaiter that can be used to await a <see cref="T:System.Threading.Tasks.Task"/> that completes when the specified <see cref="T:System.TimeSpan"/>, starting from now, has passed.
            </summary>
            <param name="timeSpan">The <see cref="T:System.TimeSpan"/> to wait for.</param>
            <returns>A <see cref="T:System.Runtime.CompilerServices.TaskAwaiter"/> instance is used to await the <see cref="T:System.Threading.Tasks.Task"/>.</returns>
            <remarks>
            This is essentially just a shorthand for creating a <see cref="M:System.Threading.Tasks.Task.Delay(System.TimeSpan)"/> call.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.TimingExtensions.GetAwaiter(System.TimeSpan)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TimingExtensions.<>E__4.GetAwaiter"/>
        </member>
        <member name="T:LaquaiLib.Extensions.TypeExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Type"/> Type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.New(System.Object[])">
            <summary>
            Attempts to instantiate a new object of the supplied <paramref name="type"/> using the given <paramref name="parameters"/>.
            </summary>
            <param name="type">A <see cref="T:System.Type"/> instance representing the type to instantiate.</param>
            <param name="parameters">The parameters to pass to the constructor. May be <see langword="null"/> to target the parameterless constructor.</param>
            <returns>An instance of the supplied <paramref name="type"/>, or <see langword="null"/> if a constructor matching the given <paramref name="parameters"/> could not be found or that constructor could not be invoked.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.GetDefault">
            <summary>
            Returns a (potentially boxed) instance of the default value for the supplied type.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to get the default value for.</param>
            <returns>The default value for the supplied type.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.GetInstanceValues(System.Object,System.Boolean)">
            <summary>
            Compiles a <see cref="T:System.Collections.Generic.Dictionary`2"/> of all instance fields and properties of the supplied type from the given object, optionally calling all parameterless methods that do not return void.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> the <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.Reflection.MethodInfo"/> instances are to be reflected from.</param>
            <param name="obj">The object to use to collect the values from.</param>
            <param name="callMethods">Whether to call all parameterless methods that do not return void instead of adding all method names to the output dictionary. This is a dangerous operation and should only be used if the methods are known to be safe and not have side effects.</param>
            <returns>The <see cref="T:System.Collections.Generic.Dictionary`2"/> as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.GetStaticValues(System.Boolean)">
            <summary>
            Compiles a <see cref="T:System.Collections.Generic.Dictionary`2"/> of all static fields and properties of the supplied type, optionally calling all parameterless methods that do not return void.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> the <see cref="T:System.Reflection.FieldInfo"/>, <see cref="T:System.Reflection.PropertyInfo"/> and <see cref="T:System.Reflection.MethodInfo"/> instances are to be reflected from.</param>
            <param name="callMethods">Whether to call all parameterless methods that do not return void. This is a dangerous operation and should only be used if the methods are known to be safe and not have side effects.</param>
            <returns>The <see cref="T:System.Collections.Generic.Dictionary`2"/> as described.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.HasNarrowingConversion(System.Type)">
            <summary>
            Determines if there exists a narrowing conversion from this <see cref="T:System.Type"/> to <paramref name="other"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <param name="other">The <see cref="T:System.Type"/> to check against.</param>
            <returns><see langword="true"/> if there exists a narrowing conversion from this <see cref="T:System.Type"/> to <paramref name="other"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.HasConsistentWideningConversion(System.Type)">
            <summary>
            Determines if there exists a consistent widening conversion (that is, a conversion that is guaranteed to not lose any information) from this <see cref="T:System.Type"/> to <paramref name="other"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <param name="other">The <see cref="T:System.Type"/> to check against.</param>
            <returns><see langword="true"/> if there exists a consistent widening conversion from this <see cref="T:System.Type"/> to <paramref name="other"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.HasLossyWideningConversion(System.Type)">
            <summary>
            Determines if there exists a lossy widening conversion (that is, a conversion that may lose information) from this <see cref="T:System.Type"/> to <paramref name="other"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <param name="other">The <see cref="T:System.Type"/> to check against.</param>
            <returns><see langword="true"/> if there exists a lossy widening conversion from this <see cref="T:System.Type"/> to <paramref name="other"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.HasWideningConversion(System.Type)">
            <summary>
            Determines if there exists a widening conversion from this <see cref="T:System.Type"/> to <paramref name="other"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <param name="other">The <see cref="T:System.Type"/> to check against.</param>
            <returns><see langword="true"/> if there exists a widening conversion from this <see cref="T:System.Type"/> to <paramref name="other"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.Reflect(LaquaiLib.Extensions.ReflectionOptions)">
            <summary>
            Reflects the entirety of this <see cref="T:System.Type"/> and generates C# code that can be used to replicate it.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to reflect.</param>
            <param name="options.Inheriting.Inheriting">Whether to make the generated type(s) inherit from the <paramref name="type"/>. If <see langword="false"/>, a private static field of type <paramref name="type"/> is generated and all method calls are redirected to that field. If <see langword="true"/>, the generated type(s) inherit from <paramref name="type"/> and all method calls are redirected to <see langword="base"/>. If <see langword="null"/>, only a skeleton of the type is generated, with all methods throwing <see cref="T:System.NotImplementedException"/>s.</param>
            <returns>A <see cref="T:System.String"/> containing the generated code.</returns>
            <remarks>
            It is almost guaranteed that this method will not generate compilable code. It is intended to be used as a starting point for replicating existing types you may not have access to.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.GetFriendlyName(System.Boolean)">
            <summary>
            Constructs a more easily readable name for the specified <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to construct a more easily readable name for.</param>
            <param name="includeNamespace">Whether to include the namespace in the name.</param>
            <returns>A more easily readable name for the specified <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.AsKeyword">
            <summary>
            Converts a <see cref="T:System.Type"/> to its C# keyword, if it exists.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to convert.</param>
            <returns>The <see cref="T:System.Type"/>'s name as a C# keyword, if it exists, otherwise the original <see cref="T:System.Type"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.IsFunc(System.Type@)">
            <summary>
            Determines whether the specified <paramref name="type"/> is assignable to a <see cref="T:System.Func`1"/> <see langword="delegate"/> overload.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <param name="returnType">An <see langword="out"/> variable that receives the <see cref="T:System.Func`1"/> <see langword="delegate"/> overload that the <paramref name="type"/> is assignable to, if any.</param>
            <returns><see langword="true"/> if the <paramref name="type"/> is assignable to a <see cref="T:System.Func`1"/> <see langword="delegate"/> overload, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.IsAction(System.Boolean@)">
            <summary>
            Determines whether the specified <paramref name="type"/> is assignable to an <see cref="T:System.Action"/> <see langword="delegate"/> overload.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to check.</param>
            <param name="takesParameters">Whether the <paramref name="type"/> takes parameters. If <see langword="false"/>, <paramref name="type"/> is not generic.</param>
            <returns><see langword="true"/> if the <paramref name="type"/> is assignable to an <see cref="T:System.Action"/> <see langword="delegate"/> overload, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.FindConstructibleSubtypes(System.Reflection.Assembly)">
            <summary>
            Finds <see cref="T:System.Type"/>s that are assignable to the specified <paramref name="type"/> and constructible (i.e. that are not <see langword="interface"/>s, <see langword="abstract"/> or <see langword="static"/>).
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to find constructible subtypes of.</param>
            <param name="assembly">The <see cref="T:System.Reflection.Assembly"/> to search in. If <see langword="null"/>, the assembly of the specified <paramref name="type"/> is used.</param>
            <returns>An <see cref="T:System.Array"/> of <see cref="T:System.Type"/>s that are assignable to the specified <paramref name="type"/> and constructible.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.New(System.Type,System.Object[])">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.New(System.Object[])"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetDefault(System.Type)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.GetDefault"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetInstanceValues(System.Type,System.Object,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.GetInstanceValues(System.Object,System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetStaticValues(System.Type,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.GetStaticValues(System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.HasNarrowingConversion(System.Type,System.Type)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.HasNarrowingConversion(System.Type)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.HasConsistentWideningConversion(System.Type,System.Type)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.HasConsistentWideningConversion(System.Type)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.HasLossyWideningConversion(System.Type,System.Type)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.HasLossyWideningConversion(System.Type)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.HasWideningConversion(System.Type,System.Type)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.HasWideningConversion(System.Type)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.Reflect(System.Type,LaquaiLib.Extensions.ReflectionOptions)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.Reflect(LaquaiLib.Extensions.ReflectionOptions)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.GetFriendlyName(System.Type,System.Boolean)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.GetFriendlyName(System.Boolean)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.AsKeyword(System.Type)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.AsKeyword"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.IsFunc(System.Type,System.Type@)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.IsFunc(System.Type@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.IsAction(System.Type,System.Boolean@)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.IsAction(System.Boolean@)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.FindConstructibleSubtypes(System.Type,System.Reflection.Assembly)">
            <inheritdoc cref="M:LaquaiLib.Extensions.TypeExtensions.<>E__0.FindConstructibleSubtypes(System.Reflection.Assembly)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.AsKeyword(System.String)">
            <summary>
            Converts a type name to its C# keyword, if it exists.
            </summary>
            <param name="type">The type name to convert.</param>
            <returns>The type name as a C# keyword, if it exists, otherwise the original type name.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.TypeExtensions.UnspeakableMemberNameRegex">
            <remarks>
            Pattern:<br/>
            <code>&lt;.*?&gt;\\p{Ll}__(\\p{L}|\\p{Nd}|\\||_)+?_\\p{Nd}+?(?=\\(.*?\\))?</code><br/>
            Options:<br/>
            <code>RegexOptions.ExplicitCapture</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '&lt;'.<br/>
            ○ Match a character other than '\n' lazily any number of times.<br/>
            ○ Match '&gt;'.<br/>
            ○ Match a character in the set [\p{Ll}].<br/>
            ○ Match the string "__".<br/>
            ○ Match a character in the set [_|\p{L}\d] lazily at least once.<br/>
            ○ Match '_'.<br/>
            ○ Match a Unicode digit lazily at least once.<br/>
            ○ Optional (greedy).<br/>
                ○ Zero-width positive lookahead.<br/>
                    ○ Match '('.<br/>
                    ○ Match a character other than '\n' lazily any number of times.<br/>
                    ○ Match ')'.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:LaquaiLib.Extensions.ReflectionOptions">
            <summary>
            Encapsulates a set of options for <see cref="M:LaquaiLib.Extensions.TypeExtensions.Reflect(System.Type,LaquaiLib.Extensions.ReflectionOptions)"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.ReflectionOptions.#ctor">
            <summary>
            Encapsulates a set of options for <see cref="M:LaquaiLib.Extensions.TypeExtensions.Reflect(System.Type,LaquaiLib.Extensions.ReflectionOptions)"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.Namespace">
            <summary>
            The namespace into which the generated type(s) should be placed. If <see langword="null"/> or empty, the code is generated without a namespace declaration.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.Inherit">
            <summary>
            How interaction with the reflected type is to be outlined in the generated code. Defaults to <see cref="F:LaquaiLib.Extensions.ReflectionOptions.InheritanceBehavior.FieldDelegation"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.IncludeHierarchy">
            <summary>
            Whether to generate code for all members <see cref="T:System.Type"/> inherits from its base types. This defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.Deep">
            <summary>
            Whether to generate code for all <see cref="T:System.Type"/>s that the original type has nested within it.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.IgnoreInaccessible">
            <summary>
            Whether to ignore members which cannot be redirected to an instance of the original type (or to <see langword="base"/> when <see cref="P:LaquaiLib.Extensions.ReflectionOptions.Inherit"/> is <see langword="true"/>). Defaults to <see langword="true"/>.
            <para/>This is ignored when <see cref="P:LaquaiLib.Extensions.ReflectionOptions.Inherit"/> is <see cref="F:LaquaiLib.Extensions.ReflectionOptions.InheritanceBehavior.None"/>.
            </summary>
            <remarks>
            Setting this to <see langword="false"/> is helpful when you intend to supply custom implementations for inaccessible members, otherwise this will pollute your generated code with <see cref="T:System.NotImplementedException"/> (inside methods which potentially cannot be called from outside the generated type).
            </remarks>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.AddXmlDocCrefs">
            <summary>
            Whether to add an XML documentation comment to the generated code. Defaults to <see langword="true"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.ReflectionOptions.Default">
            <summary>
            Returns a cached instance of <see cref="T:LaquaiLib.Extensions.ReflectionOptions"/> with the default behavior.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.ReflectionOptions.InheritanceBehavior">
            <summary>
            Specifies the behavior of inheritance for the generated type.
            </summary>
        </member>
        <member name="F:LaquaiLib.Extensions.ReflectionOptions.InheritanceBehavior.FieldDelegation">
            <summary>
            Specifies that the generated code should include a private field of the original type to which all method calls are initially redirected.
            </summary>
        </member>
        <member name="F:LaquaiLib.Extensions.ReflectionOptions.InheritanceBehavior.Inherit">
            <summary>
            Specifies that the generated code should inherit from the original type and redirect all method calls to <see langword="base"/>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Extensions.ReflectionOptions.InheritanceBehavior.None">
            <summary>
            Specifies that only a skeleton of the type should be generated, with all methods throwing <see cref="T:System.NotImplementedException"/>s.
            </summary>
        </member>
        <member name="T:LaquaiLib.Extensions.UriExtensions">
            <summary>
            Provides extension methods for the <see cref="T:System.Uri"/> Type.
            </summary>
        </member>
        <member name="P:LaquaiLib.Extensions.UriExtensions.<>E__0.Route">
            <summary>
            Returns the route component of the <see cref="T:System.Uri"/>.
            <para/>For example, if the request was made to <c>http://localhost:8080/api/v1/endpoint?param1=1&amp;param2=2</c>, this method would return <c>/api/v1/endpoint</c>.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to get the route from.</param>
            <returns>The route component of the <see cref="T:System.Uri"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.UriExtensions.<>E__0.Combine(System.ReadOnlySpan{System.Object})">
            <summary>
            Combines this <see cref="T:System.Uri"/> instance with multiple relative paths or <see cref="T:System.Uri"/>.
            This is intended to replicate <see cref="M:System.IO.Path.Combine(System.String[])"/> for <see cref="T:System.Uri"/> instances.
            </summary>
            <param name="uri">The base <see cref="T:System.Uri"/> to combine with. May also be relative.</param>
            <param name="relative">Any number of <see langword="string"/>s or relative <see cref="T:System.Uri"/>s to combine with the base <see cref="T:System.Uri"/>. Must be relative.</param>
            <returns>A new <see cref="T:System.Uri"/> instance that is the result of combining the base <see cref="T:System.Uri"/> with the relative paths or <see cref="T:System.Uri"/>s.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.UriExtensions.get_Route(System.Uri)">
            <inheritdoc cref="P:LaquaiLib.Extensions.UriExtensions.<>E__0.Route"/>
        </member>
        <member name="M:LaquaiLib.Extensions.UriExtensions.Combine(System.Uri,System.ReadOnlySpan{System.Object})">
            <inheritdoc cref="M:LaquaiLib.Extensions.UriExtensions.<>E__0.Combine(System.ReadOnlySpan{System.Object})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.UriExtensions.<>E__1.SetQueryParameter(System.String,System.Object)">
            <summary>
            Creates a new <see cref="T:System.Uri"/> with the specified query parameter set.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to set the query parameter in.</param>
            <param name="name">The name of the query parameter.</param>
            <param name="value">The value of the query parameter. If <see langword="null"/>, removes all values associated with the specified <paramref name="name"/> from the query.</param>
        </member>
        <member name="M:LaquaiLib.Extensions.UriExtensions.<>E__1.SetQueryParameters(System.ReadOnlySpan{System.ValueTuple{System.String,System.Object}})">
            <summary>
            Creates a new <see cref="T:System.Uri"/> with the specified query parameters set.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to begin with.</param>
            <param name="parameters">The parameters to set in the query.</param>
            <returns>A new <see cref="T:System.Uri"/> with the specified query parameters set.</returns>
        </member>
        <member name="M:LaquaiLib.Extensions.UriExtensions.<>E__1.SetQueryParameters(System.ReadOnlySpan{System.String})">
            <summary>
            Creates a new <see cref="T:System.Uri"/> with the specified query parameters set.
            </summary>
            <param name="uri">The <see cref="T:System.Uri"/> to begin with.</param>
            <param name="parameters">The parameters to set in the query. This must be an even number of strings, beginning with a name and followed by a value (which may be another <see langword="string"/> or <see langword="null"/>). <see langword="null"/> causes existing pairs with the same name to be removed.</param>
            <returns>A new <see cref="T:System.Uri"/> with the specified query parameters set.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the number of parameters is not even or is less than or equal to zero.</exception>
        </member>
        <member name="M:LaquaiLib.Extensions.UriExtensions.SetQueryParameter(System.Uri,System.String,System.Object)">
            <inheritdoc cref="M:LaquaiLib.Extensions.UriExtensions.<>E__1.SetQueryParameter(System.String,System.Object)"/>
        </member>
        <member name="M:LaquaiLib.Extensions.UriExtensions.SetQueryParameters(System.Uri,System.ReadOnlySpan{System.ValueTuple{System.String,System.Object}})">
            <inheritdoc cref="M:LaquaiLib.Extensions.UriExtensions.<>E__1.SetQueryParameters(System.ReadOnlySpan{System.ValueTuple{System.String,System.Object}})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.UriExtensions.SetQueryParameters(System.Uri,System.ReadOnlySpan{System.String})">
            <inheritdoc cref="M:LaquaiLib.Extensions.UriExtensions.<>E__1.SetQueryParameters(System.ReadOnlySpan{System.String})"/>
        </member>
        <member name="M:LaquaiLib.Extensions.QueryBuilder.#ctor(System.Uri,System.Boolean)">
            <summary>
            Allows creation of a <see cref="T:LaquaiLib.Extensions.QueryBuilder"/> that does not escape values for query parameters when setting them.
            </summary>
        </member>
        <member name="M:LaquaiLib.Extensions.QueryBuilder.#ctor(System.Uri)">
            <summary>
            Creates a <see cref="T:LaquaiLib.Extensions.QueryBuilder"/> that escapes values for query parameters when setting them.
            Assumes correct escaping for existing query parameters, otherwise the % signs would be escaped.
            </summary>
        </member>
        <member name="T:LaquaiLib.Interfaces.ICloneable`1">
            <summary>
            Implements a typed version of the <see cref="T:System.ICloneable"/> interface.
            </summary>
            <typeparam name="TSelf">The type of the implementing type.</typeparam>
        </member>
        <member name="M:LaquaiLib.Interfaces.ICloneable`1.Clone">
            <summary>
            Clones the current instance.
            </summary>
            <returns>A new instance of the current type with the same values as the original instance.</returns>
        </member>
        <member name="T:LaquaiLib.Interfaces.ISpanProvider`1">
            <summary>
            Defines a contract for types that provide a <see cref="T:System.Span`1"/> over an arbitrary data structure.
            </summary>
            <typeparam name="T">The type of elements in the span.</typeparam>
        </member>
        <member name="P:LaquaiLib.Interfaces.ISpanProvider`1.Span">
            <summary>
            Gets the <see cref="T:System.Span`1"/> provided by the implementing type.
            </summary>
        </member>
        <member name="T:LaquaiLib.Interfaces.IReadOnlySpanProvider`1">
            <summary>
            Defines a contract for types that provide a <see cref="T:System.ReadOnlySpan`1"/> over an arbitrary data structure.
            </summary>
            <typeparam name="T">The type of elements in the span.</typeparam>
        </member>
        <member name="P:LaquaiLib.Interfaces.IReadOnlySpanProvider`1.ReadOnlySpan">
            <summary>
            Gets the <see cref="T:System.ReadOnlySpan`1"/> provided by the implementing type.
            </summary>
        </member>
        <member name="T:LaquaiLib.Interfaces.IMemoryProvider`1">
            <summary>
            Defines a contract for types that provide a <see cref="T:System.Memory`1"/> over an arbitrary data structure.
            </summary>
            <typeparam name="T">The type of elements in the memory.</typeparam>
        </member>
        <member name="P:LaquaiLib.Interfaces.IMemoryProvider`1.Memory">
            <summary>
            Gets the <see cref="T:System.Memory`1"/> provided by the implementing type.
            </summary>
        </member>
        <member name="T:LaquaiLib.Interfaces.IReadOnlyMemoryProvider`1">
            <summary>
            Defines a contract for types that provide a <see cref="T:System.ReadOnlyMemory`1"/> over an arbitrary data structure.
            </summary>
            <typeparam name="T">The type of elements in the memory.</typeparam>
        </member>
        <member name="P:LaquaiLib.Interfaces.IReadOnlyMemoryProvider`1.ReadOnlyMemory">
            <summary>
            Gets the <see cref="T:System.ReadOnlyMemory`1"/> provided by the implementing type.
            </summary>
        </member>
        <member name="T:LaquaiLib.IO.FileSizePartitioner">
            <summary>
            Implements a <see cref="T:System.Collections.Concurrent.Partitioner`1"/> that partitions files by their size.
            </summary>
            <remarks>
            This type cannot be used as a partitioner for <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})"/> or similar calls because it does not support dynamic partitions. Instead, use <see cref="M:LaquaiLib.IO.FileSizePartitioner.GetPartitions(System.Int32)"/> to get the partitions and iterate over them manually.
            </remarks>
        </member>
        <member name="P:LaquaiLib.IO.FileSizePartitioner.TotalSize">
            <summary>
            The total size of all files in the partitioner in bytes.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.FileSizePartitioner.TotalCount">
            <summary>
            The total count of all files in the partitioner.
            </summary>
        </member>
        <member name="M:LaquaiLib.IO.FileSizePartitioner.#ctor(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.IO.FileSizePartitioner"/> using the specified file paths.
            </summary>
            <param name="paths">The paths to the files to partition.</param>
        </member>
        <member name="M:LaquaiLib.IO.FileSizePartitioner.#ctor(System.Collections.Generic.IEnumerable{System.IO.FileInfo})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.IO.FileSizePartitioner"/> using the specified <see cref="T:System.IO.FileInfo"/> instances.
            </summary>
            <param name="fileInfos">The <see cref="T:System.IO.FileInfo"/> instances to partition.</param>
        </member>
        <member name="M:LaquaiLib.IO.FileSizePartitioner.#ctor(System.IO.DirectoryInfo,System.IO.EnumerationOptions)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.IO.FileSizePartitioner"/> using the files in the specified directory.
            </summary>
            <param name="directoryInfo">The directory to partition.</param>
            <param name="enumerationOptions">An optional <see cref="T:System.IO.EnumerationOptions"/> instance that specifies how to enumerate the files in the directory.</param>
        </member>
        <member name="M:LaquaiLib.IO.FileSizePartitioner.GetPartitions(System.Int32)">
            <summary>
            Partitions the file set into at most <paramref name="partitionCount"/> partitions, accounting for the size of the files.
            The total size of the files in each partition is approximately equal, but the number of files in each partition may vary.
            </summary>
            <param name="partitionCount">The number of partitions to create.</param>
            <returns>An <see cref="T:System.Collections.Generic.IList`1"/> of <see cref="T:System.Collections.Generic.IEnumerator`1"/> instances that represent the partitions.</returns>
        </member>
        <member name="P:LaquaiLib.IO.FileSizePartitioner.SupportsDynamicPartitions">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.IO.FileSystemHelper">
            <summary>
            Provides methods and events for working with files and directories.
            </summary>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.MigrateDirectoryAsync(System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.Int32,System.IProgress{System.ValueTuple{System.Int32,System.Int32}},System.Boolean,System.Threading.CancellationToken)">
            <summary>
            In parallel, migrates the contents of a directory from one location to another.
            </summary>
            <param name="source">The directory to move.</param>
            <param name="destination">The directory that <paramref name="source"/> will be moved or copied to.</param>
            <param name="copy">Replicate the directory and its contents at the source location instead of moving it.</param>
            <param name="allowExisting">Whether to allow the destination directory to already exist and contain files and whether to allow overwriting existing files.</param>
            <param name="maxDegreeOfParallelism">The maximum number of concurrent operations to allow. Defaults to the number of logical processors on the machine.</param>
            <param name="bufferSize">The size of the buffer to use for copying files. If unset, this is calculated individually for each chunk of files.</param>
            <param name="progressSink">An <see cref="T:System.IProgress`1"/> instance to report progress to. The value is a tuple of the number of files processed and the total number of files.</param>
            <param name="restorePermissionsAndAttributes">Whether to restore the permissions and attributes of the files and directories after moving or copying them. Defaults to <see langword="false"/> and may incur a large performance penalty if <see langword="true"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <remarks>
            This method uses <see cref="T:LaquaiLib.IO.FileSizePartitioner"/> to create partitions for parallel processing that accounts for the size of the files in the directories.
            <para/>The process requires approximately <c><paramref name="maxDegreeOfParallelism"/> * 2^17 KB</c> of memory.
            </remarks>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.MigrateDirectoryAsArchiveAsync(System.String,System.String,System.Boolean,System.Boolean,System.Int32,System.IProgress{System.ValueTuple{System.Int32,System.Int32}},System.Boolean,System.IO.Compression.CompressionLevel,System.Threading.CancellationToken)">
            <summary>
            Migrates the contents of a directory from one location to another while employing the common trick of first compressing, then moving and decompressing the data.
            </summary>
            <param name="source">The directory to move.</param>
            <param name="destination">The directory that <paramref name="source"/> will be moved or copied to.</param>
            <param name="copy">Replicate the directory and its contents at the source location instead of moving it.</param>
            <param name="allowExisting">Whether to allow the destination directory to already exist and contain files and whether to allow overwriting existing files.</param>
            <param name="maxDegreeOfParallelism">The maximum number of concurrent operations to allow. Defaults to the number of logical processors on the machine.</param>
            <param name="progressSink">An <see cref="T:System.IProgress`1"/> instance to report progress to. The value is the completion progress in percent.</param>
            <param name="restorePermissionsAndAttributes">Whether to restore the permissions and attributes of the files and directories after moving or copying them. Defaults to <see langword="false"/> and may incur a large performance penalty if <see langword="true"/>.</param>
            <param name="compressionLevel">The level of compression to apply to the files. Defaults to <see cref="F:System.IO.Compression.CompressionLevel.Optimal"/>.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> to monitor for cancellation requests.</param>
            <remarks>
            This method uses <see cref="T:LaquaiLib.IO.FileSizePartitioner"/> to create partitions for parallel processing that accounts for the size of the files in the directories.
            <para/>There are few cases where this method could realistically perform better than <see cref="!:MigrateDirectoryAsync(string, string, bool, bool, int, bool, CancellationToken)"/>; the additional compression/decompression overhead will likely only pay off when transferring over a slow network or to or from very slow storage media (that is, any situation where I/O is the bottleneck, instead of CPU).
            </remarks>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.ReplacePermissions(System.IO.FileSystemInfo,System.Security.AccessControl.FileSystemSecurity)">
            <summary>
            Removes all access rules and audit rules from the specified <see cref="T:System.IO.FileSystemInfo"/> and replaces them with the rules from the specified <see cref="T:System.Security.AccessControl.FileSystemSecurity"/>.
            </summary>
            <param name="fsi">A <see cref="T:System.IO.FileInfo"/> or <see cref="T:System.IO.DirectoryInfo"/> instance to modify.</param>
            <param name="takePermissionsFrom">The <see cref="T:System.Security.AccessControl.FileSystemSecurity"/> instance to copy the permissions from.</param>
            <exception cref="T:System.PlatformNotSupportedException">Thrown when the method is called on a non-Windows platform.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the <paramref name="fsi"/> or <paramref name="takePermissionsFrom"/> is not a valid type or the combination is invalid.</exception>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.CutFile(System.String)">
            <summary>
            Reads the file at <paramref name="path"/> into a <see cref="T:System.IO.MemoryStream"/>, then deletes the file. It then only exists in memory.
            </summary>
            <param name="path">The path to the file to cut.</param>
            <returns>A <see cref="T:System.IO.MemoryStream"/> containing the file data.</returns>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.CutFileAsync(System.String)">
            <summary>
            Asynchronously reads the file at <paramref name="path"/> into a <see cref="T:System.IO.MemoryStream"/>, then deletes the file. It then only exists in memory.
            </summary>
            <param name="path">The path to the file to cut.</param>
            <returns>A <see cref="T:System.IO.MemoryStream"/> containing the file data.</returns>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.CutFile(System.String,System.IO.Stream)">
            <summary>
            Reads the file at <paramref name="path"/> into the specified <paramref name="stream"/>, then deletes the file. It then only exists in memory.
            </summary>
            <param name="path">The path to the file to cut.</param>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.CutFileAsync(System.String,System.IO.Stream)">
            <summary>
            Asynchronously reads the file at <paramref name="path"/> into the specified <paramref name="stream"/>, then deletes the file. It then only exists in memory.
            </summary>
            <param name="path">The path to the file to cut.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the operation is finished.</returns>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.EnumerateDirectoryStructureMatches(System.String,System.String,System.Nullable{System.IO.DriveType},System.Int32)">
            <summary>
            Asynchronously enumerates the file system and attempts to find a directory structure that matches the one specified.
            Generally, the more specific the directory structure, the faster the search will complete. However, this largely depends on the where the search is rooted, if at all.
            </summary>
            <param name="dirStructure">The directory structure to search for, for example <c>@"MyFolder\MySubFolder"</c>. Must be a well-formed relative path to a directory.</param>
            <param name="root">The absolute (rooted) path to the directory to start the search from. If <see langword="null"/>, the search starts from the root of each drive and returns all matches. This process may take a significant amount of time.</param>
            <param name="driveType">If <paramref name="root"/> is <see langword="null"/>, allows specifying which kinds of drives to search. The default is <see cref="F:System.IO.DriveType.Fixed"/>. Note that searching network drives may take a significant amount of time.</param>
            <param name="maxRecursionDepth">Limits the depth of recursion when searching for the directory structure. The default is <see cref="F:System.Int32.MaxValue"/>.</param>
            <returns>An <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> that enumerates the full paths of directories that match the specified structure.</returns>
            <exception cref="T:System.IO.IOException">Thrown if the root directory does not exist.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the directory structure or root directory is invalid.</exception>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.UnpackDirectory(System.String,System.Boolean,System.Boolean)">
            <summary>
            Enumerates all subdirectories of the specified <paramref name="directory"/> and moves the entire contents to the specified root.
            </summary>
            <param name="directory">The directory to process.</param>
            <param name="overwrite">Whether to allow overwriting files (not caused by the move) in the destination directory.</param>
            <param name="overwriteFromSubdirectories">If files with the same names exist on multiple levels of the directory structure, whether to allow files from more deeply nested directories to overwrite files from less deeply nested directories.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the operation is finished.</returns>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.IsBaseOf(System.String,System.String)">
            <summary>
            Determines whether the specified <paramref name="path"/> is a base of the specified <paramref name="potentialBase"/> path.
            </summary>
            <param name="path">The path to check.</param>
            <param name="potentialBase">The path to compare against.</param>
            <returns><see langword="true"/> if <paramref name="path"/> is a base of <paramref name="potentialBase"/>, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.IsEmpty(System.String,System.Boolean)">
            <summary>
            Determines whether the directory identified by the specified <paramref name="directoryPath"/> is empty.
            </summary>
            <param name="directoryPath">The path to the directory.</param>
            <param name="allowEmptyDirectories">Whether a directory is considered empty if it contains only empty directories (that is, only files are considered for the check).</param>
            <returns><see langword="true"/> if a directory at the specified path exists and is empty according to the passed arguments, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.IsEmpty(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Determines whether the directory identified by the specified <paramref name="directoryInfo"/> is empty.
            </summary>
            <param name="directoryInfo">A <see cref="T:System.IO.DirectoryInfo"/> instance that identifies the directory.</param>
            <param name="allowEmptyDirectories">Whether a directory is considered empty if it contains only empty directories (that is, only files are considered for the check).</param>
            <returns><see langword="true"/> if a directory at the specified path exists and is empty according to the passed arguments, <see langword="false"/> otherwise.</returns>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.DeleteIfEmpty(System.String,System.Boolean)">
            <summary>
            Deletes the directory at the specified <paramref name="directoryPath"/> if it is empty.
            </summary>
            <param name="directoryPath">The path to the directory.</param>
            <param name="allowEmptyDirectories">Whether to delete the directory if it contains only empty directories (that is, only files are considered for the check).</param>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.DeleteIfEmpty(System.IO.DirectoryInfo,System.Boolean)">
            <summary>
            Deletes the directory identified by the specified <paramref name="directoryInfo"/> if it is empty.
            </summary>
            <param name="directoryInfo">A <see cref="T:System.IO.DirectoryInfo"/> instance that identifies the directory.</param>
            <param name="allowEmptyDirectories">Whether to delete the directory if it contains only empty directories (that is, only files are considered for the check).</param>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.TryCopyLockedFile(System.String,System.String,System.Boolean)">
            <summary>
            Attempts to copy the file at <paramref name="source"/> to <paramref name="destination"/> even if that file is locked by another process.
            </summary>
            <param name="source">The path to the file to copy.</param>
            <param name="destination">The path to copy the file to.</param>
            <param name="overwrite">Whether to overwrite the destination file if it already exists. Defaults to <see langword="false"/>.</param>
            <returns><see langword="true"/> if the file was copied successfully, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.RemoveZoneIdentifier(System.String)">
            <summary>
            Deletes the <c>Zone.Identifier</c> alternate data stream from the specified file, if it exists.
            This has the effect of removing the "This file originated from the internet" warning (akin to right-clicking and selecting "Unblock" in Explorer).
            </summary>
            <param name="path">The path to the file to remove the zone identifier from.</param>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.OpenAlternateContentStream(System.String,System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens the alternate content stream with the specified name on the specified file.
            </summary>
            <param name="file">The path to the file to open the alternate content stream on.</param>
            <param name="acsName">The name of the alternate content stream to open.</param>
            <param name="fileMode">A <see cref="T:System.IO.FileMode"/> value that determines how the ACS is opened or created.</param>
            <param name="fileAccess">A <see cref="T:System.IO.FileAccess"/> value that determines the access rights to the ACS.</param>
            <param name="fileShare">A <see cref="T:System.IO.FileShare"/> value that determines how the ACS is shared.</param>
            <returns>A <see cref="T:System.IO.Stream"/> that represents the alternate content stream.</returns>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.ChangeName(System.String,System.String)">
            <summary>
            Changes the name of the target of a path <see langword="string"/>. Specifying an extension in <paramref name="newName"/> causes the old extension to be replaced.
            </summary>
            <param name="path">The path to change the name of.</param>
            <param name="newName">The new name to change the path to.</param>
            <returns>A new path <see langword="string"/> with the new name.</returns>
        </member>
        <member name="P:LaquaiLib.IO.FileSystemHelper.ControlCharactersSearchValues">
            <summary>
            Gets a <see cref="T:System.Buffers.SearchValues`1"/> instance enabling efficient searching for the <see langword="char"/>s in <see cref="P:LaquaiLib.IO.FileSystemHelper.ControlCharacters"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.FileSystemHelper.InvalidFileNameCharsSearchValues">
            <summary>
            Gets a <see cref="T:System.Buffers.SearchValues`1"/> instance enabling efficient searching for the <see langword="char"/>s in <see cref="P:LaquaiLib.IO.FileSystemHelper.InvalidFileNameChars"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.FileSystemHelper.InvalidPathCharsSearchValues">
            <summary>
            Gets a <see cref="T:System.Buffers.SearchValues`1"/> instance enabling efficient searching for the <see langword="char"/>s in <see cref="P:LaquaiLib.IO.FileSystemHelper.InvalidPathChars"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.FileSystemHelper.ControlCharacters">
            <summary>
            Gets all ASCII control characters (0-31) as a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.FileSystemHelper.InvalidFileNameChars">
            <summary>
            Gets a <see cref="T:System.ReadOnlySpan`1"/> containing the characters that are not allowed in file names.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.FileSystemHelper.InvalidPathChars">
            <summary>
            Gets a <see cref="T:System.ReadOnlySpan`1"/> containing the characters that are not allowed in paths.
            </summary>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.FillInvalidFileNameChars(System.Span{System.Char})">
            <summary>
            Fills the specified <see cref="T:System.Span`1"/> with the characters that are not allowed in file names. Must be at least 8 characters long.
            </summary>
            <param name="destination">The span to fill.</param>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.FillInvalidPathChars(System.Span{System.Char})">
            <summary>
            Fills the specified <see cref="T:System.Span`1"/> with the characters that are not allowed in path names. Must be at least 33 characters long.
            </summary>
            <param name="destination">The span to fill.</param>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.CopyFile(System.String,System.String,System.Boolean)">
            <summary>
            Copies a file to a new location.
            </summary>
            <param name="source">The path of the file to copy.</param>
            <param name="destination">The path to the new location for the file.</param>
            <param name="overwrite">Whether to overwrite the destination file if it already exists.</param>
            <exception cref="T:System.ArgumentException">Thrown when either path is null or whitespace, or the paths resolve to the same location.</exception>
            <exception cref="T:System.IO.IOException">Thrown when <paramref name="overwrite"/> is <see langword="false"/> and the destination file already exists.</exception>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.MoveFile(System.String,System.String,System.Boolean)">
            <summary>
            Moves a file to a new location.
            </summary>
            <param name="source">The path of the file to move.</param>
            <param name="destination">The path to the new location for the file.</param>
            <param name="overwrite">Whether to overwrite the destination file if it already exists.</param>
            <exception cref="T:System.ArgumentException">Thrown when either path is null or whitespace, or the paths resolve to the same location.</exception>
            <exception cref="T:System.IO.IOException">Thrown when <paramref name="overwrite"/> is <see langword="false"/> and the destination file already exists.</exception>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.CopyFileAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously copies a file to a new location.
            </summary>
            <param name="source">The path of the file to copy.</param>
            <param name="destination">The path to the new location for the file.</param>
            <param name="overwrite">Whether to overwrite the destination file if it already exists.</param>
            <param name="cancellationToken">A cancellation token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown when either path is null or whitespace, or the paths resolve to the same location.</exception>
            <exception cref="T:System.IO.IOException">Thrown when <paramref name="overwrite"/> is <see langword="false"/> and the destination file already exists.</exception>
        </member>
        <member name="M:LaquaiLib.IO.FileSystemHelper.MoveFileAsync(System.String,System.String,System.Boolean,System.Threading.CancellationToken)">
            <summary>
            Asynchronously moves a file to a new location.
            </summary>
            <param name="source">The path of the file to move.</param>
            <param name="destination">The path to the new location for the file.</param>
            <param name="overwrite">Whether to overwrite the destination file if it already exists.</param>
            <param name="cancellationToken">A cancellation token to monitor for cancellation requests.</param>
            <returns>A task that represents the asynchronous operation.</returns>
            <exception cref="T:System.ArgumentException">Thrown when either path is null or whitespace, or the paths resolve to the same location.</exception>
            <exception cref="T:System.IO.IOException">Thrown when <paramref name="overwrite"/> is <see langword="false"/> and the destination file already exists.</exception>
        </member>
        <member name="T:LaquaiLib.IO.ResumableDirectoryIO">
            <summary>
            Implements resumable operations for copying and moving directories.
            Multiple <see cref="T:LaquaiLib.IO.ResumableDirectoryIO"/> instances can coexist and be used simultaneously (assuming the state file path is not explicitly set to the same file path for multiple instances), but a single instance is not thread-safe. This is enforced and attempts to run multiple operations on the same instance simultaneously will result in an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="stateFilePath">Optional manual override for the state file path. At the same time, this acts as a unique identifier for a specific <see cref="T:LaquaiLib.IO.ResumableDirectoryIO"/>. If not provided, a temporary file will be used.</param>
        </member>
        <member name="M:LaquaiLib.IO.ResumableDirectoryIO.#ctor(System.String)">
            <summary>
            Implements resumable operations for copying and moving directories.
            Multiple <see cref="T:LaquaiLib.IO.ResumableDirectoryIO"/> instances can coexist and be used simultaneously (assuming the state file path is not explicitly set to the same file path for multiple instances), but a single instance is not thread-safe. This is enforced and attempts to run multiple operations on the same instance simultaneously will result in an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="stateFilePath">Optional manual override for the state file path. At the same time, this acts as a unique identifier for a specific <see cref="T:LaquaiLib.IO.ResumableDirectoryIO"/>. If not provided, a temporary file will be used.</param>
        </member>
        <member name="P:LaquaiLib.IO.ResumableDirectoryIO.ResumableDirectoryCopySerializerContext.DirectoryCopyState">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableDirectoryIO.ResumableDirectoryCopySerializerContext.FileCopyState">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableDirectoryIO.ResumableDirectoryCopySerializerContext.ListFileCopyState">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableDirectoryIO.ResumableDirectoryCopySerializerContext.ListString">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableDirectoryIO.ResumableDirectoryCopySerializerContext.DateTime">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableDirectoryIO.ResumableDirectoryCopySerializerContext.Int64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableDirectoryIO.ResumableDirectoryCopySerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableDirectoryIO.ResumableDirectoryCopySerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableDirectoryIO.ResumableDirectoryCopySerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:LaquaiLib.IO.ResumableDirectoryIO.ResumableDirectoryCopySerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.IO.ResumableDirectoryIO.ResumableDirectoryCopySerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.IO.ResumableDirectoryIO.ResumableDirectoryCopySerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.IO.ResumableDirectoryIO.CopyDirectoryAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.IProgress{System.ValueTuple{System.Int32,System.Int32,System.Int64,System.Int64,System.String}},System.Threading.CancellationToken)">
            <summary>
            Copies a directory from the source path to the destination path.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="overwrite">Whether to allow overwriting existing files in the destination directory.</param>
            <param name="preserveTimestamps">Whether to preserve the original file timestamps.</param>
            <param name="verifyFiles">Whether to verify the copied files by comparing hashes.</param>
            <param name="progressSink">An <see cref="T:System.IProgress`1"/> implementation to report progress.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task that represents the asynchronous copy operation.</returns>
        </member>
        <member name="M:LaquaiLib.IO.ResumableDirectoryIO.MoveDirectoryAsync(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,System.IProgress{System.ValueTuple{System.Int32,System.Int32,System.Int64,System.Int64,System.String}},System.Threading.CancellationToken)">
            <summary>
            Moves a directory from the source path to the destination path.
            </summary>
            <param name="sourcePath">The source directory path.</param>
            <param name="destinationPath">The destination directory path.</param>
            <param name="overwrite">Whether to allow overwriting existing files in the destination directory.</param>
            <param name="preserveTimestamps">Whether to preserve the original file timestamps.</param>
            <param name="verifyFiles">Whether to verify the copied files by comparing hashes.</param>
            <param name="progressSink">An <see cref="T:System.IProgress`1"/> implementation to report progress.</param>
            <param name="cancellationToken">An optional cancellation token.</param>
            <returns>A task that represents the asynchronous move operation.</returns>
        </member>
        <member name="M:LaquaiLib.IO.ResumableDirectoryIO.CancelAsync">
            <summary>
            Cancels any ongoing operation. If no operation is running, this method is a no-op and will complete immediately.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the cancellation request. When it completes, the operation has been canceled.</returns>
        </member>
        <member name="T:LaquaiLib.IO.ResumableFileIO">
            <summary>
            Implements resumable operations for copying and moving files.
            Multiple <see cref="T:LaquaiLib.IO.ResumableFileIO"/> instances can coexist and be used simultaneously (assuming the state file path is not explicitly set to the same file path for multiple instances), but a single instance is not thread-safe. This is enforced and attempts to run multiple operations on the same instance simultaneously will result in an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="stateFilePath">Optional manual override for the state file path. At the same time, this acts as a unique identifier for a specific <see cref="T:LaquaiLib.IO.ResumableFileIO"/>. If not provided, a temporary file will be used.</param>
        </member>
        <member name="M:LaquaiLib.IO.ResumableFileIO.#ctor(System.String)">
            <summary>
            Implements resumable operations for copying and moving files.
            Multiple <see cref="T:LaquaiLib.IO.ResumableFileIO"/> instances can coexist and be used simultaneously (assuming the state file path is not explicitly set to the same file path for multiple instances), but a single instance is not thread-safe. This is enforced and attempts to run multiple operations on the same instance simultaneously will result in an <see cref="T:System.InvalidOperationException"/>.
            </summary>
            <param name="stateFilePath">Optional manual override for the state file path. At the same time, this acts as a unique identifier for a specific <see cref="T:LaquaiLib.IO.ResumableFileIO"/>. If not provided, a temporary file will be used.</param>
        </member>
        <member name="P:LaquaiLib.IO.ResumableFileIO.ResumableFileCopySerializerContext.CopyState">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableFileIO.ResumableFileCopySerializerContext.DateTime">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableFileIO.ResumableFileCopySerializerContext.Int64">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableFileIO.ResumableFileCopySerializerContext.String">
            <summary>
            Defines the source generated JSON serialization contract metadata for a given type.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableFileIO.ResumableFileCopySerializerContext.Default">
            <summary>
            The default <see cref="T:System.Text.Json.Serialization.JsonSerializerContext"/> associated with a default <see cref="T:System.Text.Json.JsonSerializerOptions"/> instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.IO.ResumableFileIO.ResumableFileCopySerializerContext.GeneratedSerializerOptions">
            <summary>
            The source-generated options associated with this context.
            </summary>
        </member>
        <member name="M:LaquaiLib.IO.ResumableFileIO.ResumableFileCopySerializerContext.#ctor">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.IO.ResumableFileIO.ResumableFileCopySerializerContext.#ctor(System.Text.Json.JsonSerializerOptions)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.IO.ResumableFileIO.ResumableFileCopySerializerContext.GetTypeInfo(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.IO.ResumableFileIO.Cancel">
            <summary>
            Cancels any ongoing operation. If no operation is running, this method is a no-op and will complete immediately.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that represents the cancellation request. When it completes, the operation has been canceled.</returns>
        </member>
        <member name="T:LaquaiLib.Numerics.Fibonacci">
            <summary>
            A comprehensive Fibonacci calculation library that efficiently handles both one-off calculations and sequences of consecutive Fibonacci numbers.
            </summary>
        </member>
        <member name="M:LaquaiLib.Numerics.Fibonacci.GetNth(System.UInt64)">
            <summary>
            Calculates the <paramref name="n"/>th Fibonacci number.
            </summary>
            <param name="n">The position in the Fibonacci sequence (zero-based).</param>
            <returns>The <paramref name="n"/>th Fibonacci number.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Fibonacci.GenerateSequence(System.UInt64,System.UInt64)">
            <summary>
            Generates a sequence of consecutive Fibonacci numbers from start to end (inclusive).
            Optimized for calculating multiple sequential values with O(end-start) time complexity.
            </summary>
            <param name="start">The starting position (zero-based, inclusive)</param>
            <param name="end">The ending position (zero-based, inclusive)</param>
            <returns>An enumerable of consecutive Fibonacci numbers</returns>
            <exception cref="T:System.ArgumentException">Thrown when end is less than start</exception>
        </member>
        <member name="M:LaquaiLib.Numerics.Fibonacci.IterativeSequence(System.UInt64,System.UInt64)">
            <summary>
            Helper method that generates Fibonacci sequence using the simple iterative approach.
            </summary>
        </member>
        <member name="M:LaquaiLib.Numerics.Fibonacci.MatrixPower(System.UInt64)">
            <summary>
            Uses fast matrix exponentiation to compute Fibonacci numbers.
            Based on the matrix identity:
            [1 1]^n = [F(n+1) F(n)  ]
            [1 0]     [F(n)   F(n-1)]
            </summary>
        </member>
        <member name="M:LaquaiLib.Numerics.Fibonacci.MultiplyMatrix(System.Numerics.BigInteger[0:,0:],System.Numerics.BigInteger[0:,0:])">
            <summary>
            Multiplies two 2x2 matrices efficiently.
            </summary>
        </member>
        <member name="T:LaquaiLib.Numerics.Matrix`1">
            <summary>
            Represents a 2-dimensional matrix of arbitrary sizes.
            </summary>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.#ctor(System.ReadOnlySpan{LaquaiLib.Numerics.Vector{`0}})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Numerics.Matrix`1"/> using the specified <see cref="T:LaquaiLib.Numerics.Vector`1"/>s.
            The number of vectors dictates the width of the matrix and the length of the longest vector dictates the height. All missing values are filled with the default value of <typeparamref name="T"/>.
            </summary>
            <param name="vectors">The vectors to use for the matrix.</param>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.#ctor(`0[][])">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Numerics.Matrix`1"/> using the specified arrays of <typeparamref name="T"/>.
            The number of arrays dictates the height of the matrix and the length of the longest array dictates the width. All missing values are filled with the default value of <typeparamref name="T"/>.
            </summary>
            <param name="arrays">The arrays to use for the matrix.</param>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.#ctor(`0[0:,0:])">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Numerics.Matrix`1"/> using the specified 2D array of <typeparamref name="T"/>.
            </summary>
            <param name="data">The 2D array to use for the matrix.</param>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.#ctor(System.Int32,System.Int32,`0[])">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Numerics.Matrix`1"/> of size <c><paramref name="rows"/> x <paramref name="columns"/></c> and <paramref name="values"/> as the elements, distributed row-wise.
            </summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <param name="values">The values to use for the matrix.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the number of values does not match the size of the matrix.</exception>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.#ctor(System.Int32,System.Int32,System.ReadOnlySpan{`0})">
            <inheritdoc cref="M:LaquaiLib.Numerics.Matrix`1.#ctor(System.Int32,System.Int32,`0[])"/>"
        </member>
        <member name="P:LaquaiLib.Numerics.Matrix`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets the value at the specified <paramref name="row"/> and <paramref name="column"/> in the matrix.
            </summary>
            <param name="row">The row to get the value from.</param>
            <param name="column">The column to get the value from.</param>
            <returns>The value at the specified <paramref name="row"/> and <paramref name="column"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.GetRow(System.Int32)">
            <summary>
            Extracts a row from the matrix.
            </summary>
            <param name="row">The row to extract.</param>
            <returns>The row as an array.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.GetColumn(System.Int32)">
            <summary>
            Extracts a column from the matrix.
            </summary>
            <param name="column">The column to extract.</param>
            <returns>The column as an array.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.GetColumnAsVector(System.Int32)">
            <summary>
            Extracts a column from the matrix and wraps it in a <see cref="T:LaquaiLib.Numerics.Vector`1"/>.
            </summary>
            <param name="column">The column to extract.</param>
            <returns>The column as a <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.GetRows">
            <summary>
            Gets all rows in the matrix as arrays.
            </summary>
            <returns>All rows in the matrix as arrays.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.GetColumns">
            <summary>
            Gets all columns in the matrix as arrays.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.GetColumnsAsVectors">
            <summary>
            Gets all columns in the matrix as <see cref="T:LaquaiLib.Numerics.Vector`1"/>s.
            </summary>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.ToArray">
            <summary>
            Gets a copy of entire backing store of the matrix as a 2D array.
            </summary>
            <returns>A copy of the backing store of the matrix as a 2D array.</returns>
        </member>
        <member name="P:LaquaiLib.Numerics.Matrix`1.Columns">
            <summary>
            Gets the number of columns in the matrix.
            </summary>
        </member>
        <member name="P:LaquaiLib.Numerics.Matrix`1.Rows">
            <summary>
            Gets the number of rows in the matrix.
            </summary>
        </member>
        <member name="P:LaquaiLib.Numerics.Matrix`1.Rank">
            <summary>
            Gets the rank of the matrix (that is, the number of linearly independent rows or columns, or equivalently, the number of non-zero rows in the row-echelon form).
            </summary>
        </member>
        <member name="P:LaquaiLib.Numerics.Matrix`1.IsSquare">
            <summary>
            Gets whether the matrix is square.
            </summary>
        </member>
        <member name="P:LaquaiLib.Numerics.Matrix`1.IsUpperTriangularForm">
            <summary>
            Gets whether the matrix is in upper-triangular form (that is, all elements below the diagonal are zero).
            </summary>
        </member>
        <member name="P:LaquaiLib.Numerics.Matrix`1.IsLowerTriangularForm">
            <summary>
            Gets whether the matrix is in lower-triangular form (that is, all elements above the diagonal are zero).
            </summary>
        </member>
        <member name="P:LaquaiLib.Numerics.Matrix`1.IsRowEchelonForm">
            <summary>
            Gets whether the matrix is in row-echelon form.
            </summary>
        </member>
        <member name="P:LaquaiLib.Numerics.Matrix`1.IsReducedRowEchelonForm">
            <summary>
            Gets whether the matrix is in reduced row-echelon form (that is, it must be in row-echelon form and all leading coefficients must be <c>1</c>).
            All matrices in reduced row-echelon form are also in row-echelon form, but not vice versa.
            </summary>
        </member>
        <member name="P:LaquaiLib.Numerics.Matrix`1.Determinant">
            <summary>
            Calculates the determinant of the matrix.
            Invariably throws an <see cref="T:System.InvalidOperationException"/> if this instance does not represent a square matrix.
            </summary>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.op_Addition(LaquaiLib.Numerics.Matrix{`0},LaquaiLib.Numerics.Matrix{`0})">
            <summary>
            Adds two <see cref="T:LaquaiLib.Numerics.Matrix`1"/>s.
            </summary>
            <param name="left">The first matrix to add.</param>
            <param name="right">The second matrix to add.</param>
            <returns>The result of the addition.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.op_Subtraction(LaquaiLib.Numerics.Matrix{`0},LaquaiLib.Numerics.Matrix{`0})">
            <summary>
            Subtracts a <see cref="T:LaquaiLib.Numerics.Matrix`1"/> from another.
            </summary>
            <param name="left">The matrix to subtract from.</param>
            <param name="right">The matrix to subtract.</param>
            <returns>The result of the subtraction.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.op_Multiply(LaquaiLib.Numerics.Matrix{`0},LaquaiLib.Numerics.Matrix{`0})">
            <summary>
            Multiplies two <see cref="T:LaquaiLib.Numerics.Matrix`1"/>s.
            The number of columns in the left matrix must be equal to the number of rows in the right matrix.
            </summary>
            <param name="left">The first matrix to multiply.</param>
            <param name="right">The second matrix to multiply.</param>
            <returns></returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.op_Multiply(LaquaiLib.Numerics.Matrix{`0},`0)">
            <summary>
            Multiplies a <see cref="T:LaquaiLib.Numerics.Matrix`1"/> by a scalar.
            </summary>
            <param name="left">The matrix to multiply.</param>
            <param name="right">The scalar to multiply by.</param>
            <returns>The result of the multiplication.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.op_Equality(LaquaiLib.Numerics.Matrix{`0},LaquaiLib.Numerics.Matrix{`0})">
            <summary>
            Determines if this <see cref="T:LaquaiLib.Numerics.Matrix`1"/> is equal to another.
            </summary>
            <param name="left">The first <see cref="T:LaquaiLib.Numerics.Matrix`1"/>.</param>
            <param name="right">The second <see cref="T:LaquaiLib.Numerics.Matrix`1"/>.</param>
            <returns><see langword="true"/> if the matrices are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.op_Inequality(LaquaiLib.Numerics.Matrix{`0},LaquaiLib.Numerics.Matrix{`0})">
            <summary>
            Determines if this <see cref="T:LaquaiLib.Numerics.Matrix`1"/> is not equal to another.
            </summary>
            <param name="left">The first <see cref="T:LaquaiLib.Numerics.Matrix`1"/>.</param>
            <param name="right">The second <see cref="T:LaquaiLib.Numerics.Matrix`1"/>.</param>
            <returns><see langword="true"/> if the matrices are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.op_Division(LaquaiLib.Numerics.Matrix{`0},LaquaiLib.Numerics.Matrix{`0})">
            <summary>
            "Divides" a <see cref="T:LaquaiLib.Numerics.Matrix`1"/> by another.
            </summary>
            <param name="left">The matrix to divide.</param>
            <param name="right">The matrix to divide by.</param>
            <returns>The result of the division.</returns>
            <remarks>
            Since matrix division is not well defined, this is equivalent to multiplying the left matrix by the inverse of the right matrix.
            This fails if the right matrix is not invertible.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.op_Division(LaquaiLib.Numerics.Matrix{`0},`0)">
            <summary>
            "Divides" a <see cref="T:LaquaiLib.Numerics.Matrix`1"/> by a scalar.
            </summary>
            <param name="left">The matrix to divide.</param>
            <param name="right">The scalar to divide by.</param>
            <returns>The result of the division.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.Identity(System.Int32)">
            <summary>
            Creates an identity matrix of the specified size (that is, a square matrix with ones on the diagonal and zeros elsewhere).
            </summary>
            <param name="size">The size of the identity matrix.</param>
            <returns>An identity matrix of the specified size.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.Zero(System.Int32,System.Int32)">
            <summary>
            Creates a zero matrix of the specified size (that is, a matrix with all elements set to zero).
            </summary>
            <param name="rows">The number of rows in the matrix.</param>
            <param name="columns">The number of columns in the matrix.</param>
            <returns>A zero matrix of the specified size.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.GetRowEchelonForm">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Matrix`1"/> by bringing this matrix into row-echelon form.
            This does not reduce the rows; see <see cref="M:LaquaiLib.Numerics.Matrix`1.GetReducedRowEchelonForm"/> for that.
            </summary>
            <returns>The row-echelon form of this matrix.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.GetReducedRowEchelonForm">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Matrix`1"/> by bringing this matrix into reduced row-echelon form.
            </summary>
            <returns>The row-echelon form of this matrix.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.MultiplyElementWise(LaquaiLib.Numerics.Matrix{`0})">
            <summary>
            Performs element-wise ("Hadamard") multiplication of this matrix with another.
            The matrices must have the same size.
            </summary>
            <param name="other">The matrix to multiply with.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Matrix`1"/> representing the element-wise product of this matrix and <paramref name="other"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.Transpose">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Matrix`1"/> that is the transpose of this <see cref="T:LaquaiLib.Numerics.Matrix`1"/> (that is, the rows become columns and vice versa).
            </summary>
            <returns>The transpose of this <see cref="T:LaquaiLib.Numerics.Matrix`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.Inverse">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Matrix`1"/> that is the inverse of this <see cref="T:LaquaiLib.Numerics.Matrix`1"/>.
            </summary>
            <returns>The inverse of this <see cref="T:LaquaiLib.Numerics.Matrix`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.SwapRows(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Matrix`1"/> that is the result of swapping two rows in this matrix.
            </summary>
            <param name="row1">The first row to swap.</param>
            <param name="row2">The second row to swap.</param>
            <returns>The matrix with the specified rows swapped.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.SwapColumns(System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Matrix`1"/> that is the result of swapping two columns in this matrix.
            </summary>
            <param name="column1">The first column to swap.</param>
            <param name="column2">The second column to swap.</param>
            <returns>The matrix with the specified columns swapped.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.GetLeadingCoefficients">
            <summary>
            Gets the leading coefficients of the matrix.
            </summary>
            <returns>An array of the leading coefficients of the matrix.</returns>
            <remarks>
            While generally always usable, the leading coefficients are really only useful when obtained from a matrix that is in row-echelon form.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.Equals(LaquaiLib.Numerics.Matrix{`0})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.Equals(System.ReadOnlySpan{LaquaiLib.Numerics.Matrix{`0}})">
            <summary>
            Checks if all passed <see cref="T:LaquaiLib.Numerics.Matrix`1"/>s are equal to this matrix (and as such, each other).
            </summary>
            <param name="others">The <see cref="T:LaquaiLib.Numerics.Matrix`1"/>s to check for equality.</param>
            <returns><see langword="true"/> if all <see cref="T:LaquaiLib.Numerics.Matrix`1"/> are equal to this matrix, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Numerics.Matrix`1.Clone">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Numerics.Vector`1">
            <summary>
            Represents the concept of a geometric vector of arbitrary dimensions.
            <typeparamref name="T"/> must implement <see cref="T:System.Numerics.ISignedNumber`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Numerics.Vector`1.Item(System.Int32)">
            <summary>
            Gets the coordinate at the specified <paramref name="index"/>.
            </summary>
            <param name="index">The index of the coordinate to get.</param>
            <returns>The coordinate at the specified <paramref name="index"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Numerics.Vector`1.Dimension">
            <summary>
            Gets the dimensionality of the <see cref="T:LaquaiLib.Numerics.Vector`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Numerics.Vector`1.IsZero">
            <summary>
            Gets whether this <see cref="T:LaquaiLib.Numerics.Vector`1"/> is equivalent to a null vector (that is, all values are zero).
            </summary>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.#ctor(`0[])">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Vector`1"/> using the specified values.
            </summary>
            <param name="values">The coordinates of the vector.</param>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Vector`1"/> using the specified values.
            </summary>
            <param name="values">The coordinates of the vector.</param>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.#ctor(System.ReadOnlySpan{`0})">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Vector`1"/> using the specified values.
            </summary>
            <param name="values">The coordinates of the vector.</param>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.ToArray">
            <summary>
            Creates a copy of the <see cref="T:LaquaiLib.Numerics.Vector`1"/>'s coordinates and returns them as an array.
            </summary>
            <returns>A copy of the <see cref="T:LaquaiLib.Numerics.Vector`1"/>'s coordinates as an array.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.op_Addition(LaquaiLib.Numerics.Vector{`0},LaquaiLib.Numerics.Vector{`0})">
            <summary>
            Adds two <see cref="T:LaquaiLib.Numerics.Vector`1"/>s.
            </summary>
            <param name="left">The first vector to add.</param>
            <param name="right">The second vector to add.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that is the result of the addition.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.op_Subtraction(LaquaiLib.Numerics.Vector{`0},LaquaiLib.Numerics.Vector{`0})">
            <summary>
            Subtracts a <see cref="T:LaquaiLib.Numerics.Vector`1"/> from another.
            </summary>
            <param name="left">The vector to subtract from.</param>
            <param name="right">The vector to subtract.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that is the result of the subtraction.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.op_Multiply(LaquaiLib.Numerics.Vector{`0},LaquaiLib.Numerics.Vector{`0})">
            <summary>
            Throws a <see cref="T:System.NotSupportedException"/> as vector multiplication has two definitions.
            </summary>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.op_Multiply(LaquaiLib.Numerics.Vector{`0},`0)">
            <summary>
            Multiplies a <see cref="T:LaquaiLib.Numerics.Vector`1"/> by a scalar.
            </summary>
            <param name="left">The vector to multiply.</param>
            <param name="right">The scalar to multiply by.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that is the result of the multiplication.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.op_Division(LaquaiLib.Numerics.Vector{`0},`0)">
            <summary>
            Divides a <see cref="T:LaquaiLib.Numerics.Vector`1"/> by a scalar.
            </summary>
            <param name="left">The vector to divide.</param>
            <param name="right">The scalar to divide by.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that is the result of the division.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.op_Equality(LaquaiLib.Numerics.Vector{`0},LaquaiLib.Numerics.Vector{`0})">
            <summary>
            Determines if this <see cref="T:LaquaiLib.Numerics.Vector`1"/> is equal to another.
            </summary>
            <param name="left">The first <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</param>
            <param name="right">The second <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</param>
            <returns><see langword="true"/> if the vectors are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.op_Inequality(LaquaiLib.Numerics.Vector{`0},LaquaiLib.Numerics.Vector{`0})">
            <summary>
            Determines if this <see cref="T:LaquaiLib.Numerics.Vector`1"/> is not equal to another.
            </summary>
            <param name="left">The first <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</param>
            <param name="right">The second <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</param>
            <returns><see langword="true"/> if the vectors are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.Zero(System.Int32)">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Vector`1"/> with all values set to zero (a zero vector) of the specified dimension.
            </summary>
            <param name="dimensions">The number of dimensions the new <see cref="T:LaquaiLib.Numerics.Vector`1"/> should have.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> with all values set to zero.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.CrossProduct(LaquaiLib.Numerics.Vector{`0})">
            <summary>
            Calculates the cross product (vector product) of this <see cref="T:LaquaiLib.Numerics.Vector`1"/> and another.
            </summary>
            <param name="other">The <see cref="T:LaquaiLib.Numerics.Vector`1"/> to calculate the cross product with.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that is the result of the cross product.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.DotProduct(LaquaiLib.Numerics.Vector{`0})">
            <summary>
            Calculates the dot product (scalar product) of this <see cref="T:LaquaiLib.Numerics.Vector`1"/> and another.
            </summary>
            <param name="other">The <see cref="T:LaquaiLib.Numerics.Vector`1"/> to calculate the dot product with.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that is the result of the dot product.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.DotProductUnequal(LaquaiLib.Numerics.Vector{`0})">
            <summary>
            Calculates the dot product (scalar product) of this <see cref="T:LaquaiLib.Numerics.Vector`1"/> and another, allowing for <see cref="T:LaquaiLib.Numerics.Vector`1"/>s of different dimensions.
            The missing values are filled with <see cref="P:System.Numerics.INumberBase`1.Zero"/> of <typeparamref name="T"/>.
            </summary>
            <param name="other">The <see cref="T:LaquaiLib.Numerics.Vector`1"/> to calculate the dot product with.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that is the result of the dot product.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.TripleProduct(LaquaiLib.Numerics.Vector{`0},LaquaiLib.Numerics.Vector{`0})">
            <summary>
            Calculates the triple product of this <see cref="T:LaquaiLib.Numerics.Vector`1"/> and two others.
            </summary>
            <param name="a">The first <see cref="T:LaquaiLib.Numerics.Vector`1"/> to calculate the triple product with.</param>
            <param name="b">The second <see cref="T:LaquaiLib.Numerics.Vector`1"/> to calculate the triple product with.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that is the result of the triple product.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.IsLinearlyDependent(LaquaiLib.Numerics.Vector{`0})">
            <summary>
            Determines if this and the passed <see cref="T:LaquaiLib.Numerics.Vector`1"/> are linearly dependent.
            </summary>
            <param name="comp">The first <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</param>
            <returns><see langword="true"/> if the vectors are linearly dependent, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.IsLinearlyDependent(LaquaiLib.Numerics.Vector{`0},LaquaiLib.Numerics.Vector{`0})">
            <summary>
            Determines if this and the two passed <see cref="T:LaquaiLib.Numerics.Vector`1"/> are linearly dependent.
            </summary>
            <param name="first">The first <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</param>
            <param name="second">The second <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</param>
            <returns><see langword="true"/> if the vectors are linearly dependent, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.IsLinearlyDependent(LaquaiLib.Numerics.Vector{`0},LaquaiLib.Numerics.Vector{`0},LaquaiLib.Numerics.Vector{`0})">
            <summary>
            Determines if this and the three passed <see cref="T:LaquaiLib.Numerics.Vector`1"/> are linearly dependent.
            This always returns <see langword="true"/> in 3D space.
            </summary>
            <param name="first">The first <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</param>
            <param name="second">The second <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</param>
            <param name="third">The third <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</param>
            <returns><see langword="true"/> if the vectors are linearly dependent, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.Expand(System.Int32)">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that has the same values as this <see cref="T:LaquaiLib.Numerics.Vector`1"/>, with the specified number of dimensions.
            All missing values are filled with the default value of <typeparamref name="T"/>.
            </summary>
            <param name="dimensions">The number of dimensions the new <see cref="T:LaquaiLib.Numerics.Vector`1"/> should have.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that has the same values as this <see cref="T:LaquaiLib.Numerics.Vector`1"/>, with the specified number of dimensions.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.Expand(`0[])">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that has the same values as this <see cref="T:LaquaiLib.Numerics.Vector`1"/>, with the specified values appended.
            </summary>
            <param name="values">The values to append to the new <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that has the same values as this <see cref="T:LaquaiLib.Numerics.Vector`1"/>, with the specified values appended.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.Expand(System.Collections.Generic.IEnumerable{`0})">
            <inheritdoc cref="M:LaquaiLib.Numerics.Vector`1.Expand(`0[])"/>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.Expand(System.ReadOnlySpan{`0})">
            <inheritdoc cref="M:LaquaiLib.Numerics.Vector`1.Expand(`0[])"/>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.Simplify">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that has its coordinates reduced as much as possible.
            This is really only helpful for normal vectors of surfaces or the <see cref="M:LaquaiLib.Numerics.Vector`1.CrossProduct(LaquaiLib.Numerics.Vector{`0})"/> of two vectors if used for the sole purpose of finding a perpendicular vector, for example.
            </summary>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that has its coordinates reduced as much as possible.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.Reduce(System.Int32)">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that has the last <paramref name="count"/> coordinates removed.
            </summary>
            <param name="count">The number of dimensions to remove.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that has the last <paramref name="count"/> coordinates removed.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.ReduceTo(System.Int32)">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that contains only the first <paramref name="count"/> coordinates.
            </summary>
            <param name="count">The number of dimensions to keep.</param>
            <returns>A new <see cref="T:LaquaiLib.Numerics.Vector`1"/> that contains only the first <paramref name="count"/> coordinates.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.Abs">
            <summary>
            Calculates the absolute value of this <see cref="T:LaquaiLib.Numerics.Vector`1"/> (that is, the distance from the origin).
            </summary>
            <returns>The absolute value of this <see cref="T:LaquaiLib.Numerics.Vector`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.Equals(LaquaiLib.Numerics.Vector{`0})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.Equals(System.ReadOnlySpan{LaquaiLib.Numerics.Vector{`0}})">
            <summary>
            Checks if all passed <see cref="T:LaquaiLib.Numerics.Vector`1"/> are equal to this vector (and as such, each other).
            </summary>
            <param name="others">The <see cref="T:LaquaiLib.Numerics.Vector`1"/> to check for equality.</param>
            <returns><see langword="true"/> if all <see cref="T:LaquaiLib.Numerics.Vector`1"/> are equal to this vector, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Numerics.Vector`1.Clone">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.RandomMath">
            <summary>
            Contains methods for various mathematical operations.
            </summary>
        </member>
        <member name="M:LaquaiLib.RandomMath.Sum``1(``0,``0,System.Func{``0,``0})">
            <summary>
            Calculates the sum of a series of output values of a function.
            </summary>
            <typeparam name="T">The type of the input and output values of the function.</typeparam>
            <param name="x">The first input value to the function.</param>
            <param name="n">The last input value to the function.</param>
            <param name="fn">The function that calculates the output values given the input values.</param>
            <returns>The sum of the values returned by <paramref name="fn"/> for each input value between <paramref name="x"/> and <paramref name="n"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.Product``1(``0,``0,System.Func{``0,``0})">
            <summary>
            Calculates the product of a series of output values of a function.
            </summary>
            <typeparam name="T">The type of the input and output values of the function.</typeparam>
            <param name="x">The first input value to the function.</param>
            <param name="n">The last input value to the function.</param>
            <param name="fn">The function that calculates the output values given the input values.</param>
            <returns>The product of the values returned by <paramref name="fn"/> for each input value between <paramref name="x"/> and <paramref name="n"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.Sum``2(``0,``0,System.Func{``0,``1})">
            <summary>
            Calculates the sum of a series of output values of a function.
            </summary>
            <typeparam name="TArgument">The type of the input values to the function.</typeparam>
            <typeparam name="TResult">The type of the output values of the function.</typeparam>
            <param name="x">The first input value to the function.</param>
            <param name="n">The last input value to the function.</param>
            <param name="fn">The function that calculates the output values given the input values.</param>
            <returns>The sum of the values returned by <paramref name="fn"/> for each input value between <paramref name="x"/> and <paramref name="n"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.Product``2(``0,``0,System.Func{``0,``1})">
            <summary>
            Calculates the product of a series of output values of a function.
            </summary>
            <typeparam name="TArgument">The type of the input values to the function.</typeparam>
            <typeparam name="TResult">The type of the output values of the function.</typeparam>
            <param name="x">The first input value to the function.</param>
            <param name="n">The last input value to the function.</param>
            <param name="fn">The function that calculates the output values given the input values.</param>
            <returns>The product of the values returned by <paramref name="fn"/> for each input value between <paramref name="x"/> and <paramref name="n"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.GCD``1(System.ReadOnlySpan{``0})">
            <summary>
            Determines the greatest common divisor of a series of numbers.
            </summary>
            <param name="numbers">The numbers to determine the GCD of.</param>
            <returns>The GCD of the given <paramref name="numbers"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.LCM``1(System.ReadOnlySpan{``0})">
            <summary>
            Calculates the least common multiple of a series of numbers.
            </summary>
            <typeparam name="T">The type of the numbers to calculate the LCM of.</typeparam>
            <param name="numbers">The numbers to calculate the LCM of.</param>
            <returns>The LCM of the given <paramref name="numbers"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.RuleOfThree``1(``0,``0,``0)">
            <summary>
            Calculates the slope of a linear function that passes through two points and inputs another value for <c>x</c>.
            </summary>
            <typeparam name="T">The type of the values to calculate the slope with.</typeparam>
            <param name="x">The <c>x</c>-coordinate of the first point.</param>
            <param name="y">The <c>y</c>-coordinate of the first point.</param>
            <param name="targetX">The <c>x</c>-coordinate of the point to calculate the <c>y</c>-coordinate for.</param>
            <returns>The <c>y</c>-coordinate of the point with the <c>x</c>-coordinate <paramref name="targetX"/> on the line that passes through the points <c>(<paramref name="x"/>, <paramref name="y"/>)</c> and <c>(<paramref name="targetX"/>, ?)</c>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.RoundToMultiple(System.Double,System.Double)">
            <summary>
            Rounds a <paramref name="number"/> to the nearest <paramref name="multiple"/> of a given number.
            </summary>
            <param name="number">The number to round.</param>
            <param name="multiple">The number a multiple of which <paramref name="number"/> is to be rounded to.</param>
            <returns><paramref name="number"/> rounded to a multiple of <paramref name="multiple"/>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.InterpolateLinear(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Smooths two functions over a given interval using a smoothing function that is a linear combination of the two functions.
            </summary>
            <param name="f">The first function to use when constructing the output function.</param>
            <param name="g">The second function to use when constructing the output function.</param>
            <param name="smoothFunc">The custom smoothing function to use.</param>
            <param name="xStart">The start of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <param name="xEnd">The end of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <returns>A function that returns the result of <paramref name="f"/> when the input parameter is less than <paramref name="xStart"/>, the result of <paramref name="g"/> when the input parameter is greater than <paramref name="xEnd"/> and the result of <paramref name="smoothFunc"/> that combines the results of <paramref name="f"/> and <paramref name="g"/> otherwise.</returns>
            <exception cref="T:System.ArgumentException"><paramref name="xStart"/> was greater than <paramref name="xEnd"/>.</exception>
        </member>
        <member name="M:LaquaiLib.RandomMath.InterpolateLinear(System.Func{System.Double,System.Double},System.Func{System.Double,System.Double},System.Double,System.Double)">
            <summary>
            Smooths two functions over a given interval by returning a new function that is a linear combination of the two functions within a that interval.
            </summary>
            <param name="f">The first function to use when constructing the output function.</param>
            <param name="g">The second function to use when constructing the output function.</param>
            <param name="xStart">The start of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <param name="xEnd">The end of the interval over which to smooth <paramref name="f"/> into <paramref name="g"/>.</param>
            <returns>A function that returns the result of <paramref name="f"/> when the input parameter is less than <paramref name="xStart"/>, the result of <paramref name="g"/> when the input parameter is greater than <paramref name="xEnd"/> and the result of a smoothing function that combines the results of <paramref name="f"/> and <paramref name="g"/> otherwise.</returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="T:LaquaiLib.RandomMath.Trigonometry">
            <summary>
            Contains methods that use trigonometric functions.
            </summary>
        </member>
        <member name="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the <c>sin</c> and <c>cos</c> functions that, together, trace an ellipse with specified sine and cosine radii and a given smoothness around a point.
            </summary>
            <param name="x">The <c>x</c>-coordinate of the point to trace the ellipse around.</param>
            <param name="y">The <c>y</c>-coordinate of the point to trace the ellipse around.</param>
            <param name="rSin">The "horizontal" radius of the ellipse. If equal to <paramref name="rCos"/>, the ellipse is a circle. In that case, use <see cref="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double)"/> instead.</param>
            <param name="rCos">The "vertical" radius of the ellipse. If equal to <paramref name="rSin"/>, the ellipse is a circle. In that case, use <see cref="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double)"/> instead.</param>
            <param name="resolution">How many degrees / points constitute a full rotation around the circle.</param>
            <returns>A <see cref="T:System.Tuple`2"/> with the <c>Sin</c> and <c>Cos</c> functions that, together, trace an ellipse with the specified radii <paramref name="rSin"/> and <paramref name="rCos"/> and <paramref name="resolution"/> around the point <c>(<paramref name="x"/>, <paramref name="y"/>)</c>.</returns>
        </member>
        <member name="M:LaquaiLib.RandomMath.Trigonometry.EllipseAround(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Returns the <c>sin</c> and <c>cos</c> functions that, together, trace a circle with specified radius and a given smoothness around a point.
            </summary>
            <param name="x">The <c>x</c>-coordinate of the point to trace the circle around.</param>
            <param name="y">The <c>y</c>-coordinate of the point to trace the circle around.</param>
            <param name="radius">The radius of the circle.</param>
            <param name="resolution">How many degrees / points constitute a full rotation around the circle.</param>
            <returns>A <see cref="T:System.ValueTuple`2"/> with the <c>Sin</c> and <c>Cos</c> functions that, together, trace an circle with the specified <paramref name="radius"/> and <paramref name="resolution"/> around the point <c>(<paramref name="x"/>, <paramref name="y"/>)</c>.</returns>
        </member>
        <member name="T:LaquaiLib.Streams.MemoryOrFileStream">
            <summary>
            Contains factory methods that produce either <see cref="T:System.IO.MemoryStream"/> or <see cref="T:System.IO.FileStream"/> instances, depending on the size of the data expected to be written to it.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MemoryOrFileStream.Cutoff">
            <summary>
            The number of bytes at which the stream will switch from a <see cref="T:System.IO.MemoryStream"/> to a <see cref="T:System.IO.FileStream"/>.
            </summary>
            <remarks>
            You may freely change this value at runtime. Its initial value is 64 MB.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.ResetCutoff">
            <summary>
            Resets the <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Cutoff"/> to the initial value.
            </summary>
            <returns>The new value of <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Cutoff"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.Create(System.Int32)">
            <summary>
            Creates a new <see cref="T:System.IO.Stream"/> with the given expected payload size.
            </summary>
            <param name="payloadSize">The expected size of the payload to be written to this stream. If it exceeds a set <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Cutoff"/>, the internal <see cref="T:System.IO.Stream"/> is created as a <see cref="T:System.IO.FileStream"/>.</param>
            <returns>The created <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.Create(System.IO.Stream,System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.IO.Stream"/> from the specified <paramref name="other"/> <see cref="T:System.IO.Stream"/>.
            Its data from its current position to the end will be copied to the new <see cref="T:System.IO.Stream"/>. Both streams' positions will be advanced by the number of bytes copied.
            </summary>
            <param name="other">The <see cref="T:System.IO.Stream"/> to copy the data from.</param>
            <param name="fromBeginning">Whether to seek <paramref name="other"/> to its beginning before copying the data.</param>
            <returns>The created <see cref="T:System.IO.Stream"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Streams.MemoryOrFileStream.Create(System.Byte[],System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Creates a new <see cref="T:System.IO.Stream"/> from the specified <paramref name="buffer"/>.
            Its data is copied to the new <see cref="T:System.IO.Stream"/> and its position advanced by the number of bytes copied.
            </summary>
            <param name="buffer">The buffer to copy the data from.</param>
            <param name="offset">The index in <paramref name="buffer"/> at which to start copying.</param>
            <param name="length">The number of bytes to copy from <paramref name="buffer"/>.</param>
            <param name="canResize">If the created <see cref="T:System.IO.Stream"/> is a <see cref="T:System.IO.MemoryStream"/>, whether it can resize itself if the data exceeds its initial capacity.</param>
            <param name="canWrite">If the created <see cref="T:System.IO.Stream"/> is a <see cref="T:System.IO.MemoryStream"/>, whether it is created as writable.</param>
            <returns>The created <see cref="T:System.IO.Stream"/>.</returns>
            <remarks>
            <para/><paramref name="canResize"/> and <paramref name="canWrite"/> are ignored if the number of bytes that would be copied exceeds <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Cutoff"/>.
            <para/>Calling this constructor with just <paramref name="buffer"/> matches the behavior of <see cref="M:System.IO.MemoryStream.#ctor(System.Byte[])"/>, except if its length exceeds <see cref="P:LaquaiLib.Streams.MemoryOrFileStream.Cutoff"/>, in which case a <see cref="T:System.IO.FileStream"/> is created.
            </remarks>
        </member>
        <member name="T:LaquaiLib.Streams.MultiStream">
            <summary>
            Represents a wrapper for multiple <see cref="T:System.IO.Stream"/> instances to be written to as one.
            The order in which writes are performed is undefined.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.#ctor(System.ReadOnlySpan{System.IO.Stream})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Streams.MultiStream"/> with the given <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="streams">A collection of <see cref="T:System.IO.Stream"/> instances that are to be written to simultaneously.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.#ctor(System.Collections.Generic.IEnumerable{System.IO.Stream})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Streams.MultiStream"/> with the given <see cref="T:System.IO.Stream"/>s.
            </summary>
            <param name="streams">A collection of <see cref="T:System.IO.Stream"/> instances that are to be written to simultaneously.</param>
        </member>
        <member name="P:LaquaiLib.Streams.MultiStream.CanRead">
            <summary>
            A value that indicates whether all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance can be read from.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MultiStream.CanSeek">
            <summary>
            A value that indicates whether all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance can be seeked.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MultiStream.CanWrite">
            <summary>
            A value that indicates whether all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance can be written to.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MultiStream.Lengths">
            <summary>
            A collection of <see cref="T:System.Int64"/>s that indicate the lengths of the <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MultiStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.MultiStream.Positions">
            <summary>
            A collection of <see cref="T:System.Int64"/>s taht indicate the current positions of the <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.MultiStream.Position">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Flush">
            <summary>
            Flushes all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
            <param name="offset">The offset to seek by.</param>
            <param name="origin">A <see cref="T:System.IO.SeekOrigin"/> value that indicates the reference point used to obtain the new position.</param>
            <returns>-1. Use <see cref="P:LaquaiLib.Streams.MultiStream.Positions"/> to obtain the new positions of the <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.SetLengths(System.Int64)">
            <summary>
            Sets a new length for all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
            <param name="value">The new length for the <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance and advances the current position within the <see cref="T:System.IO.Stream"/>s by the number of <see cref="T:System.Byte"/>s written.
            </summary>
            <param name="buffer">The buffer containing the data to write.</param>
            <param name="offset">The offset in the buffer at which to begin writing.</param>
            <param name="count">The number of <see cref="T:System.Byte"/>s to write.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Write(System.ReadOnlySpan{System.Byte})">
            <summary>
            Writes a sequence of bytes to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance and advances the current position within the <see cref="T:System.IO.Stream"/>s by the number of <see cref="T:System.Byte"/>s written.
            </summary>
            <param name="buffer">A region of memory to copy to all <see cref="T:System.IO.Stream"/>s wrapped by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Unconditionally throws an <see cref="T:System.InvalidOperationException"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.SetLength(System.Int64)">
            <inheritdoc cref="M:LaquaiLib.Streams.MultiStream.SetLengths(System.Int64)"/>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Dispose(System.Boolean)">
            <summary>
            Releases the unmanaged and optionally the managed resources used by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
            <param name="disposing">Whether to release the managed resources used by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.</param>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance, releasing any unmanaged resources.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.MultiStream.Dispose">
            <summary>
            Releases the managed and unmanaged resources used by this <see cref="T:LaquaiLib.Streams.MultiStream"/> instance.
            </summary>
        </member>
        <member name="T:LaquaiLib.Streams.NullStream">
            <summary>
            Implements <see cref="T:System.IO.Stream"/> without a backing store. All operations are allowed and are no-ops.
            This can be useful when authoring <see cref="T:System.IO.Stream"/> types that only support particular operations.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.NullStream.Instance">
            <summary>
            Returns a singleton instance of <see cref="T:LaquaiLib.Streams.NullStream"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.NullStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.NullStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.NullStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.NullStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.NullStream.Position">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.NullStream.CanTimeout">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.NullStream.ReadTimeout">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.NullStream.WriteTimeout">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.NullStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.NullStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.NullStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.NullStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.NullStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Streams.ExceptStream">
            <summary>
            Implements <see cref="T:System.IO.Stream"/> without a backing store. Except for zero reads and writes, all operations throw <see cref="T:System.NotSupportedException"/>.
            This can be useful when authoring <see cref="T:System.IO.Stream"/> types that only support particular operations.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.ExceptStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.ExceptStream.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.ExceptStream.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.ExceptStream.Length">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.ExceptStream.Position">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.ExceptStream.CanTimeout">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.ExceptStream.ReadTimeout">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.ExceptStream.WriteTimeout">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ExceptStream.Flush">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ExceptStream.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ExceptStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ExceptStream.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ExceptStream.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Streams.ObservableStream`1">
            <summary>
            Implements a <see cref="T:System.IO.Stream"/> that provides  by wrapping another.
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="P:LaquaiLib.Streams.ObservableStream`1.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.ObservableStream`1.CanSeek">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.ObservableStream`1.CanWrite">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.ObservableStream`1.Length">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.ObservableStream`1.Position">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.Flush">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.FlushAsync(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.Read(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.ReadAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.ReadAsync(System.Memory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.ReadByte">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.Seek(System.Int64,System.IO.SeekOrigin)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.SetLength(System.Int64)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.Write(System.Byte[],System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.WriteAsync(System.Byte[],System.Int32,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.Write(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.WriteAsync(System.ReadOnlyMemory{System.Byte},System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.WriteByte(System.Byte)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.CopyTo(System.IO.Stream,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.CopyToAsync(System.IO.Stream,System.Int32,System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.ToString">
            <inheritdoc/>
        </member>
        <member name="E:LaquaiLib.Streams.ObservableStream`1.Flushed">
            <summary>
            Occurs when the stream is flushed.
            </summary>
        </member>
        <member name="E:LaquaiLib.Streams.ObservableStream`1.DataRead">
            <summary>
            Occurs when data is read from the stream.
            </summary>
        </member>
        <member name="E:LaquaiLib.Streams.ObservableStream`1.Seeked">
            <summary>
            Occurs when the stream is seeked, irrespective of whether this was part of a write or read operation, a call to <see cref="M:LaquaiLib.Streams.ObservableStream`1.Seek(System.Int64,System.IO.SeekOrigin)"/> or a direct change of the <see cref="P:LaquaiLib.Streams.ObservableStream`1.Position"/> property.
            </summary>
        </member>
        <member name="E:LaquaiLib.Streams.ObservableStream`1.DataWritten">
            <summary>
            Occurs when data is written to the stream.
            </summary>
        </member>
        <member name="E:LaquaiLib.Streams.ObservableStream`1.Resized">
            <summary>
            Occurs when the stream is resized, that is, an operation causes <see cref="P:LaquaiLib.Streams.ObservableStream`1.Length"/> to change.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.#ctor(`0)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Streams.ObservableStream`1"/> instance by wrapping an existing <see cref="T:System.IO.Stream"/>.
            </summary>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to wrap.</param>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStream`1.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Streams.ObservableStreamFactory">
            <summary>
            Provides factory methods for <see cref="T:LaquaiLib.Streams.ObservableStream`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStreamFactory.Create``1">
            <summary>
            Creates an <see cref="T:LaquaiLib.Streams.ObservableStream`1"/> by creating a new instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of <see cref="T:System.IO.Stream"/> to create. Must have a public parameterless constructor.</typeparam>
            <returns>The created <see cref="T:LaquaiLib.Streams.ObservableStream`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStreamFactory.Create``1(``0)">
            <summary>
            Creates an <see cref="T:LaquaiLib.Streams.ObservableStream`1"/> from an existing <see cref="T:System.IO.Stream"/>.
            </summary>
            <typeparam name="T">The type of the <see cref="T:System.IO.Stream"/> to wrap.</typeparam>
            <param name="stream">The <see cref="T:System.IO.Stream"/> to wrap.</param>
            <returns>The created <see cref="T:LaquaiLib.Streams.ObservableStream`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStreamFactory.Create(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Creates an <see cref="T:LaquaiLib.Streams.ObservableStream`1"/> from a portion of a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="data">The <see cref="T:System.Byte"/> array to create the <see cref="T:System.IO.MemoryStream"/> from.</param>
            <param name="offset">The offset in the <see cref="T:System.Byte"/> array to start reading from.</param>
            <param name="length">The number of bytes to read from the <see cref="T:System.Byte"/> array.</param>
            <param name="canResize">Whether the underlying <see cref="T:System.IO.MemoryStream"/> should be made resizable.</param>
            <returns>The created <see cref="T:LaquaiLib.Streams.ObservableStream`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStreamFactory.Create(System.String,System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Creates an <see cref="T:LaquaiLib.Streams.ObservableStream`1"/> that wraps a <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="path">The path to the file to open.</param>
            <param name="fileMode">A <see cref="T:System.IO.FileMode"/> enum value that specifies how the operating system should open the file.</param>
            <param name="fileAccess">A <see cref="T:System.IO.FileAccess"/> enum value that specifies the access level.</param>
            <param name="fileShare">A <see cref="T:System.IO.FileShare"/> enum value that specifies the sharing mode of the file.</param>
            <returns>The created <see cref="T:LaquaiLib.Streams.ObservableStream`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Streams.ObservableStreamFactory.Create(System.String,System.IO.FileStreamOptions)">
            <summary>
            Creates an <see cref="T:LaquaiLib.Streams.ObservableStream`1"/> that wraps a <see cref="T:System.IO.FileStream"/>.
            </summary>
            <param name="path">The path to the file to open.</param>
            <param name="fileStreamOptions">A <see cref="T:System.IO.FileStreamOptions"/> instance that specifies how the <see cref="T:System.IO.FileStream"/> is opened.</param>
            <returns>The created <see cref="T:LaquaiLib.Streams.ObservableStream`1"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Streams.WrittenEventArgs">
            <summary>
            Provides data for the <see cref="E:LaquaiLib.Streams.ObservableStream`1.DataWritten"/> event.
            </summary>
            <param name="Data">A readonly view of the data that was written.</param>
        </member>
        <member name="M:LaquaiLib.Streams.WrittenEventArgs.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Provides data for the <see cref="E:LaquaiLib.Streams.ObservableStream`1.DataWritten"/> event.
            </summary>
            <param name="Data">A readonly view of the data that was written.</param>
        </member>
        <member name="P:LaquaiLib.Streams.WrittenEventArgs.Data">
            <summary>A readonly view of the data that was written.</summary>
        </member>
        <member name="T:LaquaiLib.Streams.SeekedEventArgs">
            <summary>
            Provides data about the <see cref="E:LaquaiLib.Streams.ObservableStream`1.Seeked"/> event.
            </summary>
            <param name="OldPosition">The old position of the stream before the seek operation.</param>
            <param name="NewPosition">The new position of the stream after the seek operation.</param>
        </member>
        <member name="M:LaquaiLib.Streams.SeekedEventArgs.#ctor(System.Int64,System.Int64)">
            <summary>
            Provides data about the <see cref="E:LaquaiLib.Streams.ObservableStream`1.Seeked"/> event.
            </summary>
            <param name="OldPosition">The old position of the stream before the seek operation.</param>
            <param name="NewPosition">The new position of the stream after the seek operation.</param>
        </member>
        <member name="P:LaquaiLib.Streams.SeekedEventArgs.OldPosition">
            <summary>The old position of the stream before the seek operation.</summary>
        </member>
        <member name="P:LaquaiLib.Streams.SeekedEventArgs.NewPosition">
            <summary>The new position of the stream after the seek operation.</summary>
        </member>
        <member name="T:LaquaiLib.Streams.ResizedEventArgs">
            <summary>
            Provides data for the <see cref="E:LaquaiLib.Streams.ObservableStream`1.Resized"/> event.
            </summary>
            <param name="OldLength">The old length of the stream before the resize operation.</param>
            <param name="NewLength">The new length of the stream after the resize operation.</param>
        </member>
        <member name="M:LaquaiLib.Streams.ResizedEventArgs.#ctor(System.Int64,System.Int64)">
            <summary>
            Provides data for the <see cref="E:LaquaiLib.Streams.ObservableStream`1.Resized"/> event.
            </summary>
            <param name="OldLength">The old length of the stream before the resize operation.</param>
            <param name="NewLength">The new length of the stream after the resize operation.</param>
        </member>
        <member name="P:LaquaiLib.Streams.ResizedEventArgs.OldLength">
            <summary>The old length of the stream before the resize operation.</summary>
        </member>
        <member name="P:LaquaiLib.Streams.ResizedEventArgs.NewLength">
            <summary>The new length of the stream after the resize operation.</summary>
        </member>
        <member name="T:LaquaiLib.Streams.ReadEventArgs">
            <summary>
            Provides data for the <see cref="E:LaquaiLib.Streams.ObservableStream`1.DataRead"/> event.
            </summary>
            <param name="Data">A readonly view of the data that was read.</param>
        </member>
        <member name="M:LaquaiLib.Streams.ReadEventArgs.#ctor(System.ReadOnlyMemory{System.Byte})">
            <summary>
            Provides data for the <see cref="E:LaquaiLib.Streams.ObservableStream`1.DataRead"/> event.
            </summary>
            <param name="Data">A readonly view of the data that was read.</param>
        </member>
        <member name="P:LaquaiLib.Streams.ReadEventArgs.Data">
            <summary>A readonly view of the data that was read.</summary>
        </member>
        <member name="T:LaquaiLib.Streams.RandomStreams.CryptographicRandomStream">
            <summary>
            Implements <see cref="T:LaquaiLib.Streams.RandomStreams.RandomStream"/> with a cryptographic random number generator.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.RandomStreams.CryptographicRandomStream.#ctor">
            <summary>
            Implements <see cref="T:LaquaiLib.Streams.RandomStreams.RandomStream"/> with a cryptographic random number generator.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.RandomStreams.CryptographicRandomStream.Read(System.Span{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.RandomStreams.CryptographicRandomStream.ReadByte">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Streams.RandomStreams.CryptographicRandomStream.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Streams.RandomStreams.RandomStream">
            <summary>
            Represents a <see cref="T:System.IO.Stream"/> that generates random bytes upon reading from it.
            It comes in two variants: <see cref="T:LaquaiLib.Streams.RandomStreams.RandomStream"/> for applications that do not require cryptographic security and <see cref="T:LaquaiLib.Streams.RandomStreams.CryptographicRandomStream"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.RandomStreams.RandomStream.CanRead">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Streams.RandomStreams.RandomStream.Random">
            <summary>
            Exposes a <see cref="T:System.Random"/> instance derived types may use.
            If unused, should be set to <see langword="null"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.RandomStreams.RandomStream.#ctor">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Streams.RandomStreams.RandomStream"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.RandomStreams.RandomStream.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Streams.RandomStreams.RandomStream"/> with the specified seed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.RandomStreams.RandomStream.#ctor(System.Random)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Streams.RandomStreams.RandomStream"/> with the specified <see cref="T:System.Random"/> instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.RandomStreams.RandomStream.Length">
            <summary>
            The length of the <see cref="T:System.IO.Stream"/>. This is irrelevant for <see cref="T:LaquaiLib.Streams.RandomStreams.RandomStream"/>. Its length will never change.
            </summary>
        </member>
        <member name="P:LaquaiLib.Streams.RandomStreams.RandomStream.Position">
            <summary>
            The position in the <see cref="T:System.IO.Stream"/>. This is irrelevant for <see cref="T:LaquaiLib.Streams.RandomStreams.RandomStream"/>. Its position will never change.
            </summary>
        </member>
        <member name="M:LaquaiLib.Streams.RandomStreams.RandomStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Fills the specified buffer with random bytes.
            </summary>
            <param name="buffer">The buffer to fill with random bytes.</param>
            <param name="offset">The offset in the buffer at which to start writing.</param>
            <param name="count">The number of bytes to write.</param>
            <returns>The number of bytes written, which is always equal to <paramref name="count"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Streams.RandomStreams.RandomStream.Read(System.Span{System.Byte})">
            <summary>
            Fills the specified buffer with random bytes.
            </summary>
            <param name="buffer">The buffer to fill with random bytes.</param>
            <returns>The number of bytes written, which is always equal to the length of the buffer.</returns>
        </member>
        <member name="M:LaquaiLib.Streams.RandomStreams.RandomStream.ReadByte">
            <summary>
            Returns a random <see langword="byte"/> value.
            </summary>
            <returns>The random <see langword="byte"/> value.</returns>
        </member>
        <member name="T:LaquaiLib.Text.BufferTextWriter">
            <summary>
            Implements a <see cref="T:System.IO.TextWriter"/> that uses an <see cref="T:System.Buffers.ArrayBufferWriter`1"/> to buffer the written characters.
            </summary>
            <param name="capacity">A starting capacity for the internal buffer.</param>
            <param name="encoding">The encoding to use for the <see cref="T:System.IO.TextWriter"/>. Defaults to <see cref="P:System.Text.Encoding.Default"/>.</param>
        </member>
        <member name="M:LaquaiLib.Text.BufferTextWriter.#ctor(System.Int32)">
            <summary>
            Implements a <see cref="T:System.IO.TextWriter"/> that uses an <see cref="T:System.Buffers.ArrayBufferWriter`1"/> to buffer the written characters.
            </summary>
            <param name="capacity">A starting capacity for the internal buffer.</param>
            <param name="encoding">The encoding to use for the <see cref="T:System.IO.TextWriter"/>. Defaults to <see cref="P:System.Text.Encoding.Default"/>.</param>
        </member>
        <member name="P:LaquaiLib.Text.BufferTextWriter.Span">
            <summary>
            Gets a <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/> around the characters written so far.
            </summary>
            <returns>The <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Text.BufferTextWriter.Memory">
            <summary>
            Gets a <see cref="T:System.ReadOnlyMemory`1"/> of <see langword="char"/> around the characters written so far.
            </summary>
            <returns>The <see cref="T:System.ReadOnlyMemory`1"/> of <see langword="char"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Text.BufferTextWriter.Encoding">
            <summary>
            Always returns <see langword="null"/>. <see cref="T:System.Text.Encoding"/> is not supported when writing <see langword="char"/>s.
            </summary>
        </member>
        <member name="P:LaquaiLib.Text.BufferTextWriter.NullString">
            <summary>
            Gets or sets the <see langword="string"/> that is written to the buffer when a <see cref="!:null"/> value is written.
            Defaults to <c>"null"</c>. If explicitly set to <see langword="null"/>, an exception is thrown when attempting to write a <see langword="null"/> value.
            </summary>
        </member>
        <member name="M:LaquaiLib.Text.BufferTextWriter.Write(System.ReadOnlyMemory{System.Char})">
            <inheritdoc cref="M:LaquaiLib.Text.BufferTextWriter.Write(System.ReadOnlySpan{System.Char})"/>
        </member>
        <member name="T:LaquaiLib.Text.Json.DateTimeFromUnixConverter">
            <summary>
            Implements a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> that is able to read and write <see cref="T:System.DateTime"/> values as Unix timestamps.
            </summary>
        </member>
        <member name="T:LaquaiLib.Text.Json.FlexibleUnmanagedTypeConverter`1">
            <summary>
            Implements a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> that is able to read and write most numeric or otherwise <see cref="T:System.IParsable`1"/> and <see cref="T:System.IConvertible"/> values.
            </summary>
            <typeparam name="T">The type of the value to convert.</typeparam>
        </member>
        <member name="T:LaquaiLib.Text.Json.TimeSpanFromSecondsConverter">
            <summary>
            Implements a <see cref="T:System.Text.Json.Serialization.JsonConverter`1"/> that is able to read and write <see cref="T:System.TimeSpan"/> values as seconds.
            Values are subject to the (im)precision of <see cref="T:System.Double"/> (accurate to the nearest millisecond).
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.NaturalStringComparer">
            <summary>
            Implements an <see cref="T:System.Collections.Generic.IComparer`1"/> that compares <see langword="string"/>s and <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/> using a natural sort order, that is, like Windows Explorer sorts file names.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.NaturalStringComparer.Default">
            <summary>
            Gets the default instance of <see cref="T:LaquaiLib.Util.NaturalStringComparer"/>. Character comparisons are done using case-insensitive ordinal rules.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.NaturalStringComparer.LenientEquality">
            <summary>
            Gets an instance of <see cref="T:LaquaiLib.Util.NaturalStringComparer"/> that compares all non-digit, non-letter and non-Roman numeral characters as equal.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.NaturalStringComparer.#ctor">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.NaturalStringComparer"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.NaturalStringComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.NaturalStringComparer"/> with the specified <paramref name="lenientEquality"/> mode. See <see cref="P:LaquaiLib.Util.NaturalStringComparer.LenientEquality"/>.
            </summary>
            <param name="lenientEquality">Whether to treat all non-digit, non-letter and non-Roman numeral characters as equal.</param>
        </member>
        <member name="M:LaquaiLib.Util.NaturalStringComparer.Compare(System.String,System.String)">
            <summary>
            Compares two <see langword="string"/>s and returns a value indicating whether one is less than, equal to, or greater than the other.
            Empty <see langword="string"/>s are sorted to the bottom.
            </summary>
            <param name="x">The first <see langword="string"/> to compare.</param>
            <param name="y">The second <see langword="string"/> to compare.</param>
            <returns>A signed integer that indicates the result of the comparison. A negative value indicates that <paramref name="x"/> is less than <paramref name="y"/>, zero indicates that they are equal, and a positive value indicates that <paramref name="x"/> is greater than <paramref name="y"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.NaturalStringComparer.Compare(System.ReadOnlySpan{System.Char},System.ReadOnlySpan{System.Char})">
            <summary>
            Compares two <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/> and returns a value indicating whether one is less than, equal to, or greater than the other.
            Empty spans are sorted to the bottom.
            </summary>
            <param name="x">The first <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/> to compare.</param>
            <param name="y">The second <see cref="T:System.ReadOnlySpan`1"/> of <see langword="char"/> to compare.</param>
            <returns>A signed integer that indicates the result of the comparison. A negative value indicates that <paramref name="x"/> is less than <paramref name="y"/>, zero indicates that they are equal, and a positive value indicates that <paramref name="x"/> is greater than <paramref name="y"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.NaturalStringComparer.IsRomanNumeral(System.ReadOnlySpan{System.Char},System.Int32)">
            <summary>
            Checks if the characters starting at the given index form a Roman numeral.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.NaturalStringComparer.GetRomanValue(System.ReadOnlySpan{System.Char},System.Int32@)">
            <summary>
            Extracts and computes the value of a Roman numeral from a string starting at the specified index.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.NaturalStringComparer.RomanToInt(System.ReadOnlySpan{System.Char})">
            <summary>
            Converts a Roman numeral string to an integer.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.NaturalStringComparer.IsValidRomanNumeral(System.ReadOnlySpan{System.Char})">
            <summary>
            Validates that a string is a properly formatted Roman numeral.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.NaturalStringComparer.RomanNumeralRegex">
            <remarks>
            Pattern:<br/>
            <code>^M{0,4}(CM|CD|D?C{0,3})(XC|XL|L?X{0,3})(IX|IV|V?I{0,3})$</code><br/>
            Options:<br/>
            <code>RegexOptions.ExplicitCapture</code><br/>
            Explanation:<br/>
            <code>
            ○ Match if at the beginning of the string.<br/>
            ○ Match 'M' atomically at most 4 times.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match 'C'.<br/>
                    ○ Match a character in the set [DM].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match 'D' atomically, optionally.<br/>
                    ○ Match 'C' atomically at most 3 times.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match 'X'.<br/>
                    ○ Match a character in the set [CL].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match 'L' atomically, optionally.<br/>
                    ○ Match 'X' atomically at most 3 times.<br/>
            ○ Match with 2 alternative expressions.<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match 'I'.<br/>
                    ○ Match a character in the set [VX].<br/>
                ○ Match a sequence of expressions.<br/>
                    ○ Match 'V' atomically, optionally.<br/>
                    ○ Match 'I' atomically at most 3 times.<br/>
            ○ Match if at the end of the string or if before an ending newline.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:LaquaiLib.Util.ArrayHelper">
            <summary>
            Contains helper methods for arrays and spans.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.Sort``2(``0[],``1[][])">
            <summary>
            According to an array of <paramref name="keys"/>, sorts an arbitrary number of <typeparamref name="TValue"/> arrays using the default comparer for <typeparamref name="TKey"/> in ascending order.
            </summary>
            <param name="keys">The array of keys to sort by.</param>
            <param name="itemsArrays">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.Sort``2(``0[],System.Collections.Generic.IComparer{``0},``1[][])">
            <summary>
            According to an array of <paramref name="keys"/>, sorts an arbitrary number of <typeparamref name="TValue"/> arrays using the specified <paramref name="comparer"/> in ascending order.
            </summary>
            <param name="keys">The array of keys to sort by.</param>
            <param name="comparer">The comparer to use for sorting the keys.</param>
            <param name="itemsArrays">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.Sort``3(``0[],System.Func{``0,``1},``2[][])">
            <summary>
            According to an array of keys produced using the specified <paramref name="selector"/> function, sorts an arbitrary number of <typeparamref name="TValue"/> arrays using the default comparer for <typeparamref name="TCompare"/> in ascending order.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TCompare">The type of the keys produced by the <paramref name="selector"/> function.</typeparam>
            <typeparam name="TValue">The type of the items in the arrays to sort.</typeparam>
            <param name="items">The array of keys to sort by.</param>
            <param name="selector">The function to produce the keys to sort by.</param>
            <param name="itemsArray">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.Sort``3(``0[],System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``2[][])">
            <summary>
            According to an array of keys produced using the specified <paramref name="selector"/> function, sorts an arbitrary number of <typeparamref name="TValue"/> arrays using the specified <paramref name="comparer"/> in ascending order.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TCompare">The type of the keys produced by the <paramref name="selector"/> function.</typeparam>
            <typeparam name="TValue">The type of the items in the arrays to sort.</typeparam>
            <param name="items">The array of keys to sort by.</param>
            <param name="selector">The function to produce the keys to sort by.</param>
            <param name="comparer">The comparer to use for sorting the keys.</param>
            <param name="itemsArrays">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.SortDescending``2(``0[],``1[][])">
            <summary>
            According to an array of <paramref name="keys"/>, sorts an arbitrary number of <typeparamref name="TValue"/> arrays using the default comparer for <typeparamref name="TKey"/> in descending order.
            </summary>
            <param name="keys">The array of keys to sort by.</param>
            <param name="itemsArrays">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.SortDescending``2(``0[],System.Collections.Generic.IComparer{``0},``1[][])">
            <summary>
            According to an array of <paramref name="keys"/>, sorts an arbitrary number of <typeparamref name="TValue"/> arrays using the specified <paramref name="comparer"/> in descending order.
            </summary>
            <param name="keys">The array of keys to sort by.</param>
            <param name="comparer">The comparer to use for sorting the keys.</param>
            <param name="itemsArrays">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.SortDescending``3(``0[],System.Func{``0,``1},``2[][])">
            <summary>
            According to an array of keys produced using the specified <paramref name="selector"/> function, sorts an arbitrary number of <typeparamref name="TValue"/> arrays using the default comparer for <typeparamref name="TCompare"/> in descending order.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TCompare">The type of the keys produced by the <paramref name="selector"/> function.</typeparam>
            <typeparam name="TValue">The type of the items in the arrays to sort.</typeparam>
            <param name="items">The array of keys to sort by.</param>
            <param name="selector">The function to produce the keys to sort by.</param>
            <param name="itemsArray">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.SortDescending``3(``0[],System.Func{``0,``1},System.Collections.Generic.IComparer{``1},``2[][])">
            <summary>
            According to an array of keys produced using the specified <paramref name="selector"/> function, sorts an arbitrary number of <typeparamref name="TValue"/> arrays using the specified <paramref name="comparer"/> in descending order.
            </summary>
            <typeparam name="TKey">The type of the keys.</typeparam>
            <typeparam name="TCompare">The type of the keys produced by the <paramref name="selector"/> function.</typeparam>
            <typeparam name="TValue">The type of the items in the arrays to sort.</typeparam>
            <param name="items">The array of keys to sort by.</param>
            <param name="selector">The function to produce the keys to sort by.</param>
            <param name="comparer">The comparer to use for sorting the keys.</param>
            <param name="itemsArrays">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.Sort(System.Array,System.Array[])">
            <summary>
            According to an array of <paramref name="keys"/>, sorts an arbitrary number of items arrays with unspecified types using the default comparer.
            Note that this method is significantly slower than the generic version, but does allow for sorting arbitrarily typed arrays.
            </summary>
            <param name="keys">The array of keys to sort by.</param>
            <param name="itemsArrays">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.Sort(System.Array,System.Collections.IComparer,System.Array[])">
            <summary>
            According to an array of <paramref name="keys"/>, sorts an arbitrary number of items arrays with unspecified types using the specified <paramref name="comparer"/>.
            </summary>
            <param name="keys">The array of keys to sort by.</param>
            <param name="comparer">The comparer to use for sorting the keys.</param>
            <param name="itemsArrays">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.Sort(System.Array,System.Func{System.Object,System.Object},System.Array[])">
            <summary>
            According to an array of keys produced using the specified <paramref name="selector"/> function, sorts an arbitrary number of <typeparamref name="TValue"/> arrays using the default comparer for <typeparamref name="TCompare"/> in ascending order.
            </summary>
            <param name="keys">The array of keys to sort by.</param>
            <param name="selector">The function to produce the keys to sort by.</param>
            <param name="itemsArray">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.Sort(System.Array,System.Func{System.Object,System.Object},System.Collections.IComparer,System.Array[])">
            <summary>
            According to an array of keys produced using the specified <paramref name="selector"/> function, sorts an arbitrary number of <typeparamref name="TValue"/> arrays using the specified <paramref name="comparer"/> in ascending order.
            </summary>
            <param name="keys">The array of keys to sort by.</param>
            <param name="selector">The function to produce the keys to sort by.</param>
            <param name="comparer">The comparer to use for sorting the keys.</param>
            <param name="itemsArrays">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.SortDescending(System.Array,System.Array[])">
            <summary>
            According to an array of <paramref name="keys"/>, sorts an arbitrary number of items arrays with unspecified types using the default comparer.
            Note that this method is significantly slower than the generic version, but does allow for sorting arbitrarily typed arrays.
            </summary>
            <param name="keys">The array of keys to sort by.</param>
            <param name="itemsArrays">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.SortDescending(System.Array,System.Collections.IComparer,System.Array[])">
            <summary>
            According to an array of <paramref name="keys"/>, sorts an arbitrary number of items arrays with unspecified types using the specified <paramref name="comparer"/>.
            </summary>
            <param name="keys">The array of keys to sort by.</param>
            <param name="comparer">The comparer to use for sorting the keys.</param>
            <param name="itemsArrays">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.SortDescending(System.Array,System.Func{System.Object,System.Object},System.Array[])">
            <summary>
            According to an array of keys produced using the specified <paramref name="selector"/> function, sorts an arbitrary number of <typeparamref name="TValue"/> arrays using the default comparer for <typeparamref name="TCompare"/> in ascending order.
            </summary>
            <param name="keys">The array of keys to sort by.</param>
            <param name="selector">The function to produce the keys to sort by.</param>
            <param name="itemsArray">The arrays of items to sort.</param>
        </member>
        <member name="M:LaquaiLib.Util.ArrayHelper.SortDescending(System.Array,System.Func{System.Object,System.Object},System.Collections.IComparer,System.Array[])">
            <summary>
            According to an array of keys produced using the specified <paramref name="selector"/> function, sorts an arbitrary number of <typeparamref name="TValue"/> arrays using the specified <paramref name="comparer"/> in ascending order.
            </summary>
            <param name="keys">The array of keys to sort by.</param>
            <param name="selector">The function to produce the keys to sort by.</param>
            <param name="comparer">The comparer to use for sorting the keys.</param>
            <param name="itemsArrays">The arrays of items to sort.</param>
        </member>
        <member name="T:LaquaiLib.Util.CharComparer">
            <summary>
            Implements a <see cref="T:System.StringComparer"/> equivalent for <see cref="T:System.Char"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.CharComparer.FromComparison(System.StringComparison)">
            <summary>
            Gets a <see cref="T:LaquaiLib.Util.CharComparer"/> that compares according to the rules of the specified <see cref="T:System.StringComparison"/>.
            </summary>
            <param name="comparison">The <see cref="T:System.StringComparison"/> to get a <see cref="T:LaquaiLib.Util.CharComparer"/> for.</param>
            <returns>The <see cref="T:LaquaiLib.Util.CharComparer"/> equivalent to the specified <see cref="T:System.StringComparison"/>.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="comparison"/> is not a valid (named) <see cref="T:System.StringComparison"/>.</exception>
        </member>
        <member name="P:LaquaiLib.Util.CharComparer.CurrentCulture">
            <summary>
            Gets a <see cref="T:LaquaiLib.Util.CharComparer"/> that compares according to the rules of the current culture.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.CharComparer.CurrentCultureIgnoreCase">
            <summary>
            Gets a <see cref="T:LaquaiLib.Util.CharComparer"/> that compares according to the rules of the current culture, ignoring case.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.CharComparer.InvariantCulture">
            <summary>
            Gets a <see cref="T:LaquaiLib.Util.CharComparer"/> that compares according to the rules of the invariant culture.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.CharComparer.InvariantCultureIgnoreCase">
            <summary>
            Gets a <see cref="T:LaquaiLib.Util.CharComparer"/> that compares according to the rules of the invariant culture, ignoring case.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.CharComparer.Ordinal">
            <summary>
            Gets a <see cref="T:LaquaiLib.Util.CharComparer"/> that performs a case-sensitive ordinal comparison.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.CharComparer.OrdinalIgnoreCase">
            <summary>
            Gets a <see cref="T:LaquaiLib.Util.CharComparer"/> that performs a case-insensitive ordinal comparison.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.CharComparer.CurrentCultureCharComparer.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:LaquaiLib.Util.CharComparer.CurrentCultureCharComparer"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.CharComparer.CurrentCultureIgnoreCaseCharComparer.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:LaquaiLib.Util.CharComparer.CurrentCultureIgnoreCaseCharComparer"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.CharComparer.InvariantCultureCharComparer.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:LaquaiLib.Util.CharComparer.InvariantCultureCharComparer"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.CharComparer.InvariantCultureIgnoreCaseCharComparer.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:LaquaiLib.Util.CharComparer.InvariantCultureIgnoreCaseCharComparer"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.CharComparer.OrdinalCharComparer.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:LaquaiLib.Util.CharComparer.OrdinalCharComparer"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.CharComparer.OrdinalIgnoreCaseCharComparer.Instance">
            <summary>
            Gets the singleton instance of the <see cref="T:LaquaiLib.Util.CharComparer.OrdinalIgnoreCaseCharComparer"/>.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.DelayingHttpMessageHandler">
            <summary>
            Implements a <see cref="T:System.Net.Http.HttpMessageHandler"/> that delays requests by a minimum amount of time. Useful for preventing rate limiting.
            </summary>
            <remarks>
            The delay specified is applied immediately before <i>sending</i> the request, not after receiving the response. As such, the delay will never be exact and the contacted server may disagree. Plan for this according to application load, for example using a higher delay than strictly necessary or when running into 429 or 503 responses.
            </remarks>
            <remarks>
            Initializes a new <see cref="T:LaquaiLib.Util.DelayingHttpMessageHandler"/> with the specified minimum delay between requests that uses the specified <paramref name="innerHandler"/> to delegate requests to.
            </remarks>
            <param name="minimumDelay">The minimum delay between requests.</param>
            <param name="innerHandler">The inner handler to delegate sending requests to.</param>
            <param name="asGlobalHandler">Whether to observe a global semaphore for all instances created with this set to <see langword="true"/> or observe a local semaphore for this instance.</param>
            <remarks>
            This constructor is useful when many <see cref="T:System.Net.Http.HttpClient"/>s target the same server and should share the same delay between requests. Setting <paramref name="asGlobalHandler"/> to <see langword="true"/> synchronizes the delay between all instances created this way.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Util.DelayingHttpMessageHandler.#ctor(System.TimeSpan,System.Net.Http.HttpMessageHandler,System.Boolean)">
            <summary>
            Implements a <see cref="T:System.Net.Http.HttpMessageHandler"/> that delays requests by a minimum amount of time. Useful for preventing rate limiting.
            </summary>
            <remarks>
            The delay specified is applied immediately before <i>sending</i> the request, not after receiving the response. As such, the delay will never be exact and the contacted server may disagree. Plan for this according to application load, for example using a higher delay than strictly necessary or when running into 429 or 503 responses.
            </remarks>
            <remarks>
            Initializes a new <see cref="T:LaquaiLib.Util.DelayingHttpMessageHandler"/> with the specified minimum delay between requests that uses the specified <paramref name="innerHandler"/> to delegate requests to.
            </remarks>
            <param name="minimumDelay">The minimum delay between requests.</param>
            <param name="innerHandler">The inner handler to delegate sending requests to.</param>
            <param name="asGlobalHandler">Whether to observe a global semaphore for all instances created with this set to <see langword="true"/> or observe a local semaphore for this instance.</param>
            <remarks>
            This constructor is useful when many <see cref="T:System.Net.Http.HttpClient"/>s target the same server and should share the same delay between requests. Setting <paramref name="asGlobalHandler"/> to <see langword="true"/> synchronizes the delay between all instances created this way.
            </remarks>
        </member>
        <member name="P:LaquaiLib.Util.DelayingHttpMessageHandler.MinimumDelay">
            <summary>
            The minimum delay between requests.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.DelayingHttpMessageHandler.NextCallAllowed">
            <summary>
            Gets a <see cref="T:System.DateTime"/> representing the next time a request is allowed.
            Do not use this to guard <see cref="M:LaquaiLib.Util.DelayingHttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)"/> or <see cref="M:LaquaiLib.Util.DelayingHttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)"/> calls, since those employ waiting themselves.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.DelayingHttpMessageHandler.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.DelayingHttpMessageHandler"/> with the specified minimum delay between requests that uses a default <see cref="T:System.Net.Http.HttpClientHandler"/> to delegate requests to.
            </summary>
            <param name="minimumDelay">The minimum delay between requests.</param>
        </member>
        <member name="M:LaquaiLib.Util.DelayingHttpMessageHandler.#ctor(System.TimeSpan,System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.DelayingHttpMessageHandler"/> with the specified minimum delay between requests that uses the specified <paramref name="innerHandler"/> to delegate requests to.
            </summary>
            <param name="minimumDelay">The minimum delay between requests.</param>
            <param name="innerHandler">The inner handler to delegate sending requests to.</param>
        </member>
        <member name="M:LaquaiLib.Util.DelayingHttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Sleeps the current thread until the minimum time since the last request has passed, then sends the request.
            Note that the <paramref name="cancellationToken"/> is capable of cancelling the request itself, but not the thread sleep. If it is cancelled during the sleep, the request will not be made and the next request is allowed immediately.
            </summary>
            <param name="request">The request to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe for cancellation requests.</param>
            <returns>The response to the request.</returns>
        </member>
        <member name="M:LaquaiLib.Util.DelayingHttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)">
            <summary>
            Asynchronously waits until the minimum time since the last request has passed, then sends the request.
            </summary>
            <param name="request">The request to send.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe for cancellation requests.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that resolves to the response to the request.</returns>
        </member>
        <member name="M:LaquaiLib.Util.DelayingHttpMessageHandler.Wait">
            <summary>
            Sleeps the current thread until the minimum time since the last request has passed.
            Consumers should never guard <see cref="M:LaquaiLib.Util.DelayingHttpMessageHandler.Send(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)"/> calls using this method, since that method would then reevaluate the wait unnecessarily.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.DelayingHttpMessageHandler.WaitAsync(System.Threading.CancellationToken)">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task"/> that completes when the minimum time since the last request has passed.
            Consumers should never guard <see cref="M:LaquaiLib.Util.DelayingHttpMessageHandler.SendAsync(System.Net.Http.HttpRequestMessage,System.Threading.CancellationToken)"/> calls using this method, since that method would then reevaluate the wait unnecessarily.
            </summary>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> to observe for cancellation requests.</param>
            <returns>The created <see cref="T:System.Threading.Tasks.Task"/> or <see cref="P:System.Threading.Tasks.Task.CompletedTask"/> if the delay has already passed.</returns>
        </member>
        <member name="T:LaquaiLib.Util.ExceptionManagement.Assert">
            <summary>
            Contains methods to assert conditions which throw an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the condition is not met.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.That(System.Func{System.Boolean})">
            <summary>
            Asserts that a specified condition is <see langword="true"/>. If not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown.
            </summary>
            <param name="condition">The condition to assert to be <see langword="true"/>.</param>
            <returns>The result of the invocation of <paramref name="condition"/> if it is <see langword="true"/>, otherwise an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.That(System.Func{System.Boolean},System.String)">
            <summary>
            Asserts that a specified condition is <see langword="true"/>. If not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <param name="condition">The condition to assert to be <see langword="true"/>.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails.</param>
            <returns>The result of the invocation of <paramref name="condition"/> if it is <see langword="true"/>, otherwise an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.That(System.Boolean)">
            <summary>
            Asserts that a specified condition is <see langword="true"/>. If not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown.
            </summary>
            <param name="condition">The condition to assert to be <see langword="true"/>.</param>
            <returns>The result of the invocation of <paramref name="condition"/> if it is <see langword="true"/>, otherwise an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.That(System.Boolean,System.String)">
            <summary>
            Asserts that a specified condition is <see langword="true"/>. If not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <param name="condition">The condition to assert to be <see langword="true"/>.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails.</param>
            <returns><see langword="true"/> if <paramref name="condition"/> is <see langword="true"/>, otherwise an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNull``1(``0,System.String)">
            <summary>
            Asserts that a specified value is <see langword="null"/>.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be not <see langword="null"/>.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNotNull``1(``0,System.String)">
            <summary>
            Asserts that a specified value is not <see langword="null"/>.
            If it is, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be not <see langword="null"/>.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsGreaterThan``1(``0,``0,System.String)">
            <summary>
            Asserts that a specified value is greater than another value.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be greater than <paramref name="other"/>.</param>
            <param name="other">The value to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
            <exception cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1">Thrown if <paramref name="value" /> is not greater than <paramref name="other"/>.</exception>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsGreaterThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that a specified value is greater than or equal to another value.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be greater than or equal to <paramref name="other"/>.</param>
            <param name="other">The value to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsLessThan``1(``0,``0,System.String)">
            <summary>
            Asserts that a specified value is less than another value.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be less than <paramref name="other"/>.</param>
            <param name="other">The value to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsLessThanOrEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that a specified value is less than or equal to another value.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be less than or equal to <paramref name="other"/>.</param>
            <param name="other">The value to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that a specified value is equal to another value.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be equal to <paramref name="other"/>.</param>
            <param name="other">The value to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNotEqualTo``1(``0,``0,System.String)">
            <summary>
            Asserts that a specified value is in a specified range.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be greater than or equal to <paramref name="other"/>.</param>
            <param name="other">The value to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsInRange``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that a specified value is not equal to another value.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be within the range of <paramref name="min"/> and <paramref name="max"/>.</param>
            <param name="min">The inclusive lower bound of the range to compare <paramref name="value"/> to.</param>
            <param name="max">The inclusive upper bound of the range to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNotInRange``1(``0,``0,``0,System.String)">
            <summary>
            Asserts that a specified value is not in a specified range.
            If it is, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the values to operate on.</typeparam>
            <param name="value">The value to assert to be outside the range of <paramref name="min"/> and <paramref name="max"/>.</param>
            <param name="min">The inclusive lower bound of the range to compare <paramref name="value"/> to.</param>
            <param name="max">The inclusive upper bound of the range to compare <paramref name="value"/> to.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsPositive``1(``0,System.String)">
            <summary>
            Asserts that a specified value is positive.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be positive.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNegative``1(``0,System.String)">
            <summary>
            Asserts that a specified value is negative.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be negative.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsZero``1(``0,System.String)">
            <summary>
            Asserts that a specified value is zero.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be zero.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNonZero``1(``0,System.String)">
            <summary>
            Asserts that a specified value is not zero.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be not equal to zero.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsDefault``1(``0,System.String)">
            <summary>
            Asserts that a specified value is the <see langword="default"/> for its type, i.e. precisely the result of the expression <c><see langword="default"/>(TSelf)</c>.
            If it is not, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be positive.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Assert.IsNotDefault``1(``0,System.String)">
            <summary>
            Asserts that a specified value is not the <see langword="default"/> for its type, i.e. precisely the result of the expression <c><see langword="default"/>(TSelf)</c>.
            If it is, an <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> is thrown with the specified message.
            </summary>
            <typeparam name="T">The type of the value to operate on.</typeparam>
            <param name="value">The value to assert to be positive.</param>
            <param name="message">The message to include in the <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> if the assertion fails. May be <see langword="null"/> or empty to use the default message.</param>
            <returns><paramref name="value"/> if the assertion succeeds, otherwise the method will not return.</returns>
        </member>
        <member name="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1">
            <summary>
            The exception that is thrown when an assertion fails.
            </summary>
            <remarks>
            Initializes a new <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> with the value that failed an assertion and a message.
            </remarks>
            <param name="value">The value that caused an assertion to fail.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="message">A message that described the assertion failure.</param>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1.#ctor(`0,System.Exception,System.String)">
            <summary>
            The exception that is thrown when an assertion fails.
            </summary>
            <remarks>
            Initializes a new <see cref="T:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1"/> with the value that failed an assertion and a message.
            </remarks>
            <param name="value">The value that caused an assertion to fail.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
            <param name="message">A message that described the assertion failure.</param>
        </member>
        <member name="P:LaquaiLib.Util.ExceptionManagement.AssertionFailureException`1.Value">
            <summary>
            The value that caused an assertion to fail.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.ExceptionManagement.FirstChanceException">
            <summary>
            The exception that is thrown when an unhandled exception is wrapped or otherwise handled in a <see cref="T:LaquaiLib.Util.ExceptionManagement.FirstChanceExceptionHandlers"/> method.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.FirstChanceException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.ExceptionManagement.FirstChanceException"/>.
            </summary>
            <param name="message">A message that describes the error.</param>
            <param name="innerException">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:LaquaiLib.Util.ExceptionManagement.FirstChanceExceptionHandlers">
            <summary>
            Exposes <see cref="T:System.EventHandler`1"/> instances registerable for the <see cref="E:System.AppDomain.FirstChanceException"/> event.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.FirstChanceExceptionHandlers.RegisterAll">
            <summary>
            Registers all <see cref="T:System.EventHandler`1"/> instances in the <see cref="T:LaquaiLib.Util.ExceptionManagement.FirstChanceExceptionHandlers"/> class for the <see cref="E:System.AppDomain.FirstChanceException"/> event.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.FirstChanceExceptionHandlers.WrapEntryPointNotFoundException(System.Object,System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs)">
            <summary>
            Wraps <see cref="T:System.EntryPointNotFoundException"/>s in a <see cref="T:LaquaiLib.Util.ExceptionManagement.FirstChanceException"/> with additional information about the DLL and entry point.
            <para/>Rethrows the original exception if no additional information could be gathered.
            </summary>
            <param name="sender">Ignored.</param>
            <param name="e">The <see cref="T:System.Runtime.ExceptionServices.FirstChanceExceptionEventArgs"/> instance containing the event data.</param>
            <exception cref="T:LaquaiLib.Util.ExceptionManagement.FirstChanceException">Thrown when an <see cref="T:System.EntryPointNotFoundException"/> is caught. Contains additional information about the DLL and entry point.</exception>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.FirstChanceExceptionHandlers.EntryPointNotFoundExceptionDataRegex">
            <remarks>
            Pattern:<br/>
            <code>Unable to find an entry point named '(?&lt;entryPoint&gt;[^']+)' in DLL '(?&lt;dllName&gt;[^']+)'\\.</code><br/>
            Options:<br/>
            <code>RegexOptions.ExplicitCapture</code><br/>
            Explanation:<br/>
            <code>
            ○ Match the string "Unable to find an entry point named '".<br/>
            ○ "entryPoint" capture group.<br/>
                ○ Match a character other than '\'' atomically at least once.<br/>
            ○ Match the string "' in DLL '".<br/>
            ○ "dllName" capture group.<br/>
                ○ Match a character other than '\'' atomically at least once.<br/>
            ○ Match the string "'.".<br/>
            </code>
            </remarks>
        </member>
        <member name="T:LaquaiLib.Util.ExceptionManagement.HResults">
            <summary>
            Defines constants for some common HResults.
            Stolen straight from the .NET runtime source (see <see href="https://github.com/dotnet/runtime/blob/main/src/libraries/Common/src/System/HResults.cs"/>.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.ExceptionManagement.Try">
            <summary>
            Provides static methods that wrap <c>try-catch</c> blocks.
            </summary>
            <remarks>All methods in this class explicitly allow <see langword="null"/> returns.</remarks>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.ExecuteOrDefault``1(``0,System.Func{``0})">
            <summary>
            Attempts to execute the given parameterless <see cref="T:System.Func`1"/> and propagates its return value if it succeeds, otherwise returning <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="T">The Type of the value returned by <paramref name="method"/>.</typeparam>
            <param name="defaultValue">The value to return if <paramref name="method"/> fails.</param>
            <param name="method">The <see cref="T:System.Func`1"/> to execute.</param>
            <returns>The value returned by <paramref name="method"/> if it succeeds, otherwise <typeparamref name="T"/>'s <c>default</c> value.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.ExecuteOrDefault``1(System.Func{``0},System.Func{``0})">
            <summary>
            Attempts to execute the given parameterless <see cref="T:System.Func`1"/> and propagates its return value if it succeeds, otherwise returning the value produced by <paramref name="defaultValueFactory"/>.
            </summary>
            <typeparam name="T">The Type of the value returned by <paramref name="method"/>.</typeparam>
            <param name="defaultValueFactory">The <see cref="T:System.Func`1"/> that returns the default value to propagate if <paramref name="method"/> throws an exception.</param>
            <param name="method">The <see cref="T:System.Func`1"/> to execute.</param>
            <returns>The value returned by <paramref name="method"/> if it succeeds, otherwise the value produced by <paramref name="defaultValueFactory"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.First``1(System.ReadOnlySpan{System.Func{``0}})">
            <summary>
            Attempts to execute the given parameterless <see cref="T:System.Func`1"/>s and propagates its return value if it succeeds, otherwise throwing an <see cref="T:System.AggregateException"/> composed of all exceptions thrown by the <paramref name="methods"/>.
            </summary>
            <typeparam name="T">The Type of the value that is ultimately returned.</typeparam>
            <param name="methods">The methods to try.</param>
            <returns>The value of the first method that doesn't throw an exception.</returns>
            <exception cref="T:System.AggregateException">Thrown if all methods throw an exception.</exception>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.First``1(System.Action{``0},System.ReadOnlySpan{``0})">
            <summary>
            Tests each item in <paramref name="items"/> using <paramref name="test"/> and returns the first item which <paramref name="test"/> does not throw an exception for, otherwise throwing an <see cref="T:System.AggregateException"/> composed of all exceptions thrown by <paramref name="test"/>.
            </summary>
            <typeparam name="T">The Type of the items to test.</typeparam>
            <param name="test">The <see cref="T:System.Action`1"/> to test each item with.</param>
            <param name="items">The items to test.</param>
            <returns>The first item in <paramref name="items"/> that <paramref name="test"/> does not throw an exception for.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(``0,System.ReadOnlySpan{System.Func{``0}})">
            <summary>
            Attempts to execute the given parameterless <see cref="T:System.Func`1"/>s and propagates the return value of the first succeeds, otherwise returning <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="T">The Type of the value that is ultimately returned.</typeparam>
            <param name="defaultValue">The default value to return if all methods throw an exception.</param>
            <param name="methods">The methods to try.</param>
            <returns>The first value returned by a method that doesn't throw an exception, or the default value if all methods throw an exception.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(System.Func{``0},System.ReadOnlySpan{System.Func{``0}})">
            <summary>
            Attempts to execute the given parameterless <see cref="T:System.Func`1"/>s and propagates the return value of the first one that succeeds, otherwise returning the value produced by <paramref name="defaultValueFactory"/>.
            </summary>
            <typeparam name="T">The Type of the value that is ultimately returned.</typeparam>
            <param name="defaultValueFactory">The <see cref="T:System.Func`1"/> that returns the default value to propagate if all <paramref name="methods"/> throw an exception. This is executed outside of the <c>try-catch</c> block and so is expected to always succeed.</param>
            <param name="methods">The methods to try.</param>
            <returns>The first value returned by a method that doesn't throw an exception, otherwise the value produced by <paramref name="defaultValueFactory"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(``0,System.Action{``0},System.ReadOnlySpan{``0})">
            <summary>
            Tests each item in <paramref name="items"/> using <paramref name="test"/> and returns the first item which <paramref name="test"/> does not throw an exception for, otherwise returning <paramref name="defaultValue"/>.
            </summary>
            <typeparam name="T">The Type of the items to test.</typeparam>
            <param name="defaultValue">The default value to return if all items throw an exception.</param>
            <param name="test">The <see cref="T:System.Action`1"/> to test each item with.</param>
            <param name="items">The items to test.</param>
            <returns>The first item in <paramref name="items"/> that <paramref name="test"/> does not throw an exception for, otherwise <paramref name="defaultValue"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ExceptionManagement.Try.FirstOrDefault``1(System.Func{``0},System.Action{``0},System.ReadOnlySpan{``0})">
            <summary>
            Tests each item in <paramref name="items"/> using <paramref name="test"/> and returns the first item which <paramref name="test"/> does not throw an exception for, otherwise returning the value produced by <paramref name="defaultValueFactory"/>.
            </summary>
            <typeparam name="T">The Type of the items to test.</typeparam>
            <param name="defaultValueFactory">The <see cref="T:System.Func`1"/> that returns the default value to propagate if all <paramref name="items"/> cause an exception in <paramref name="test"/>. This is executed outside of the <c>try-catch</c> block and so is expected to always succeed.</param>
            <param name="test">The <see cref="T:System.Action`1"/> to test each item with.</param>
            <param name="items">The items to test.</param>
            <returns>The first item in <paramref name="items"/> that <paramref name="test"/> does not throw an exception for, otherwise returning the value produced by <paramref name="defaultValueFactory"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Util.Logging.AsyncLogger">
            <summary>
            Represents a logger that writes messages to the <see cref="T:System.Console"/> in a separate thread to avoid blocking operations on the main thread. This type self-initializes when it is first used, that is, when the first message is queued. Before that, the background thread is not running.
            </summary>
            <remarks>
            This type is thread-safe.
            </remarks>
        </member>
        <member name="P:LaquaiLib.Util.Logging.AsyncLogger.IsBackground">
            <summary>
            Gets or sets a value indicating whether the <see cref="T:LaquaiLib.Util.Logging.AsyncLogger"/> should run in the background.
            If <see langword="true"/>, the <see cref="T:LaquaiLib.Util.Logging.AsyncLogger"/> will exit when the parent thread exits.
            By default, this is <see langword="true"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Logging.AsyncLogger.Target">
            <summary>
            The target <see cref="T:System.IO.TextWriter"/> to write messages to.
            Changing this while messages are being processed is not recommended.
            If this is <see cref="P:System.Console.Out"/>, output colorization is supported automatically through <see cref="P:LaquaiLib.Util.Logging.LoggerMessage.Type"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Logging.AsyncLogger.Processing">
            <summary>
            Gets a value indicating whether the <see cref="T:LaquaiLib.Util.Logging.AsyncLogger"/> is currently processing messages, that is, the message queue is not empty.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.Initialize">
            <summary>
            Initializes the <see cref="T:LaquaiLib.Util.Logging.AsyncLogger"/>.
            It exits when the parent thread (the thread calling this method) exits.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.Initialize(System.Threading.Thread)">
            <summary>
            Initializes the <see cref="T:LaquaiLib.Util.Logging.AsyncLogger"/> using the given <paramref name="thread"/> as its parent.
            </summary>
            <param name="thread">The thread to use as the parent thread. May be <see langword="null"/> to explicitly leave the <see cref="T:LaquaiLib.Util.Logging.AsyncLogger"/> running, even after all other threads have exited.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.QueueMessage(System.Object,LaquaiLib.Util.Logging.MessageType)">
            <summary>
            Creates and queues a new <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given <paramref name="message"/> and <paramref name="type"/>. Its <see cref="P:LaquaiLib.Util.Logging.LoggerMessage.Timestamp"/> is set to <see cref="P:System.DateTime.Now"/>.
            </summary>
            <param name="message">The object to convert to a string and use as the text of the message.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.QueueMessage(System.Object,System.DateTime,LaquaiLib.Util.Logging.MessageType)">
            <summary>
            Creates and queues a new <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given <paramref name="message"/>, <paramref name="timestamp"/> and <paramref name="type"/>.
            </summary>
            <param name="message">The object to convert to a string and use as the text of the message.</param>
            <param name="timestamp">The timestamp of the message.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.QueueMessage(System.String,LaquaiLib.Util.Logging.MessageType)">
            <summary>
            Creates and queues a new <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given <paramref name="message"/> and <paramref name="type"/>. Its <see cref="P:LaquaiLib.Util.Logging.LoggerMessage.Timestamp"/> is set to <see cref="P:System.DateTime.Now"/>.
            </summary>
            <param name="message">The text of the message.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.QueueMessage(System.String,System.DateTime,LaquaiLib.Util.Logging.MessageType)">
            <summary>
            Creates and queues a new <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given <paramref name="message"/>, <paramref name="timestamp"/> and <paramref name="type"/>.
            </summary>
            <param name="message">The text of the message.</param>
            <param name="timestamp">The timestamp of the message.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.QueueMessage(System.ReadOnlySpan{System.String},LaquaiLib.Util.Logging.MessageType)">
            <summary>
            Creates and queues a new multi-line <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given <paramref name="lines"/> and <paramref name="type"/>.
            </summary>
            <param name="lines">The lines of the message.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.QueueMessage(System.ReadOnlySpan{System.String},System.DateTime,LaquaiLib.Util.Logging.MessageType)">
            <summary>
            Creates and queues a new multi-line <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given <paramref name="lines"/>, <paramref name="timestamp"/> and <paramref name="type"/>.
            </summary>
            <param name="lines">The lines of the message.</param>
            <param name="timestamp">The timestamp of the message.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.QueueMessage(LaquaiLib.Util.Logging.LoggerMessage)">
            <summary>
            Queues the given <paramref name="message"/>.
            </summary>
            <param name="message">The <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> to queue.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.FlushAsync">
            <summary>
            Creates a <see cref="T:System.Threading.Tasks.Task"/> that completes when the message queue is empty.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Logging.AsyncLogger.Flush">
            <summary>
            Blocks the calling thread until the message queue is empty.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Logging.LoggerMessage">
            <summary>
            Represents an immutable message that can be queued for logging.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Logging.LoggerMessage.Message">
            <summary>
            The text of the message.
            If explicitly <see langword="null"/>, an empty line is written (i.e. without the default formatting including a timestamp).
            If this contains multiple lines, each line is written separately. For each but the first, padding is added to align the text with the first line, after the timestamp.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Logging.LoggerMessage.Timestamp">
            <summary>
            The timestamp of the message.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.Logging.LoggerMessage.Type">
            <summary>
            The type of the message.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given <paramref name="message"/>.
            The default <see cref="T:LaquaiLib.Util.Logging.MessageType"/> is <see cref="F:LaquaiLib.Util.Logging.MessageType.Info"/> and its <see cref="P:LaquaiLib.Util.Logging.LoggerMessage.Timestamp"/> is set to <see cref="P:System.DateTime.Now"/>.
            </summary>
            <param name="message">The text of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.#ctor(System.String,LaquaiLib.Util.Logging.MessageType)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given <paramref name="message"/> and <paramref name="type"/>.
            </summary>
            <param name="message">The text of the message.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.#ctor(System.String,System.DateTime,LaquaiLib.Util.Logging.MessageType)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> with the given data.
            </summary>
            <param name="message">The text of the message.</param>
            <param name="timestamp">The timestamp of the message.</param>
            <param name="type">The type of the message.</param>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.Equals(LaquaiLib.Util.Logging.LoggerMessage)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.op_Equality(LaquaiLib.Util.Logging.LoggerMessage,LaquaiLib.Util.Logging.LoggerMessage)">
            <summary>
            Indicates whether two <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>s are equal.
            </summary>
            <param name="left">The first <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>.</param>
            <param name="right">The second <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>.</param>
            <returns><see langword="true"/> if the two <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>s are equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Logging.LoggerMessage.op_Inequality(LaquaiLib.Util.Logging.LoggerMessage,LaquaiLib.Util.Logging.LoggerMessage)">
            <summary>
            Indicates whether two <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>s are not equal.
            </summary>
            <param name="left">The first <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>.</param>
            <param name="right">The second <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>.</param>
            <returns><see langword="true"/> if the two <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>s are not equal, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="T:LaquaiLib.Util.Logging.MessageType">
            <summary>
            Identifies the type of a <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Logging.MessageType.Info">
            <summary>
            Indicates that the <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> is informational.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Logging.MessageType.Warning">
            <summary>
            Indicates that the <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> is a warning.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Logging.MessageType.Error">
            <summary>
            Indicates that the <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> is an error.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Logging.MessageType.Success">
            <summary>
            Indicates that the <see cref="T:LaquaiLib.Util.Logging.LoggerMessage"/> is a success message.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Meta.Architecture">
            <summary>
            Specifies the architecture(s) of an app or tool that should be included in the search.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.Architecture.x86">
            <summary>
            Indicates that x86 apps or tools should be included in the search.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.Architecture.x64">
            <summary>
            Indicates that x64 apps or tools should be included in the search.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.Architecture.Any">
            <summary>
            Indicates that any architecture is included in the search.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Meta.MetaHelpers">
            <summary>
            Provides utility methods for meta-metaprogramming, finding Visual Studio paths, etc.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.MetaHelpers.UNIVERSAL">
            <summary>
            A <see cref="T:System.Reflection.BindingFlags"/> value that returns members regardless of access level and instance/static status.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Meta.MetaHelpers.FindInstallations(LaquaiLib.Util.Meta.VSVersion,LaquaiLib.Util.Meta.VSEdition,LaquaiLib.Util.Meta.Architecture)">
            <summary>
            Enumerates Visual Studio installations that are located in default installation directories, constrained by the specified parameters.
            </summary>
            <param name="versions">The version(s) of Visual Studio that should be included in the search.</param>
            <param name="edition">The edition(s) of Visual Studio that should be included in the search.</param>
            <param name="architecture">The architecture(s) of an app or tool that should be included in the search.</param>
            <returns>The paths of the Visual Studio installations that were found.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Meta.MetaHelpers.FindTool(LaquaiLib.Util.Meta.MetaTool,LaquaiLib.Util.Meta.VSVersion,LaquaiLib.Util.Meta.VSEdition,LaquaiLib.Util.Meta.Architecture)">
            <summary>
            Attempts to find a tool in Visual Studio installations that are located in default installation directories, constrained by the specified parameters.
            </summary>
            <param name="tool">The tool that should be searched for.</param>
            <param name="versions">The version(s) of Visual Studio that should be included in the search.</param>
            <param name="edition">The edition(s) of Visual Studio that should be included in the search.</param>
            <param name="architecture">The architecture(s) of an app or tool that should be included in the search.</param>
            <returns>The paths of the tool that matched.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Meta.MetaHelpers.FindTool(System.String,LaquaiLib.Util.Meta.VSVersion,LaquaiLib.Util.Meta.VSEdition,LaquaiLib.Util.Meta.Architecture)">
            <summary>
            Attempts to find a file in Visual Studio installations that are located in default installation directories, constrained by the specified parameters.
            </summary>
            <param name="fileName">The name of the file that should be searched for.</param>
            <param name="versions">The version(s) of Visual Studio that should be included in the search.</param>
            <param name="edition">The edition(s) of Visual Studio that should be included in the search.</param>
            <param name="architecture">The architecture(s) of an app or tool that should be included in the search.</param>
            <returns>The paths of the file that matched.</returns>
        </member>
        <member name="T:LaquaiLib.Util.Meta.MetaTool">
            <summary>
            Specifies the tool that should be searched for.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.MetaTool.MSBuild">
            <summary>
            Indicates that <c>msbuild.exe</c> should be searched for.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.MetaTool.Dumpbin">
            <summary>
            Indicates that <c>dumpbin.exe</c> should be searched for.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.MetaTool.Csc">
            <summary>
            Indicates that <c>csc.exe</c> should be searched for.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Meta.VSEdition">
            <summary>
            Specifies the edition(s) of Visual Studio that should be included in the search.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.VSEdition.Community">
            <summary>
            Indicates that Community editions of Visual Studio should be included in the search.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.VSEdition.Professional">
            <summary>
            Indicates that Professional editions of Visual Studio should be included in the search.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.VSEdition.Enterprise">
            <summary>
            Indicates that Enterprise editions of Visual Studio should be included in the search.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.VSEdition.Preview">
            <summary>
            Indicates that Preview editions of Visual Studio should be included in the search.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.VSEdition.Any">
            <summary>
            Indicates that any edition of Visual Studio is included in the search.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Meta.VSVersion">
            <summary>
            Specifies the version(s) of Visual Studio that should be included in the search.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.VSVersion.VS2017">
            <summary>
            Indicates that Visual Studio 2017 installations should be included in the search.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.VSVersion.VS2019">
            <summary>
            Indicates that Visual Studio 2019 installations should be included in the search.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.VSVersion.VS2022">
            <summary>
            Indicates that Visual Studio 2022 installations should be included in the search.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.Meta.VSVersion.Any">
            <summary>
            Indicates that any version of Visual Studio is included in the search.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.Miscellaneous">
            <summary>
            Contains miscellaneous functionality.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Miscellaneous.Range``1(``0,``0)">
            <summary>
            Compiles an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>s from <c>0</c> to <paramref name="stop"/> with a step width of <paramref name="step"/>.
            </summary>
            <typeparam name="T">The type of the items in the created sequence.</typeparam>
            <param name="stop">The end of the range.</param>
            <param name="step">The step width of the range.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/> as described.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="step"/> evaluates to a value equivalent to <c>0</c>.</exception>
        </member>
        <member name="M:LaquaiLib.Util.Miscellaneous.Range``1(``0)">
            <summary>
            Compiles an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>s from <c>0</c> to <paramref name="stop"/> - 1 with a step width of <c>1</c>.
            </summary>
            <typeparam name="T">The type of the items in the created sequence.</typeparam>
            <param name="stop">The end of the range.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/> as described.</returns>
        </member>
        <member name="M:LaquaiLib.Util.Miscellaneous.Range``1(``0,``0,``0)">
            <summary>
            Compiles an <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/>s from <paramref name="start"/> to <paramref name="stop"/> with a step width of <paramref name="step"/>.
            </summary>
            <typeparam name="T">The type of the items in the created sequence.</typeparam>
            <param name="start">The inclusive start of the range.</param>
            <param name="stop">The exclusive end of the range.</param>
            <param name="step">The step width of the range.</param>
            <returns>An <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <typeparamref name="T"/> as described.</returns>
            <exception cref="T:System.ArgumentException">Thrown if <paramref name="step"/> evaluates to a value equivalent to <c>0</c>.</exception>
        </member>
        <member name="T:LaquaiLib.Util.Misc.AsyncEnumerableWrapper`1">
            <summary>
            Wraps an <see cref="T:System.Collections.Generic.IEnumerable`1"/> as an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to allow asynchronous consumption.
            Every <c>MoveNextAsync</c> call of the underlying enumerator is awaited in a new <see cref="T:System.Threading.Tasks.Task" />.
            May be useful in scenarios when the time between iterations may be long, such as when reading from a network stream or when every enumerator step is expensive.
            <para/><b>Warning!</b> Do NOT use this <see langword="struct"/> right before an aggregating operation. Instead, use the corresponding aggregation methods from <see cref="!:Extensions.ALinq.IEnumerableExtensions"/>. This method is intended for use when <c>MoveNext</c> calls on an <see cref="T:System.Collections.Generic.IEnumerator`1"/> are expected to be computationally expensive or time-consuming; every <c>MoveNext</c> call is wrapped in a new <see cref="T:System.Threading.Tasks.Task"/> and <see langword="await"/>ed. To reduce overhead, usage of the asynchronous methods in <see cref="!:Extensions.ALinq.IEnumerableExtensions"/> is recommended (which batch the entire enumeration and potential allocation of the aggregation result into a single <see cref="T:System.Threading.Tasks.Task"/>).
            </summary>
            <typeparam name="T">The Type of elements the <see cref="T:System.Collections.Generic.IEnumerable`1"/> yields.</typeparam>
            <param name="from">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to wrap.</param>
            <remarks>
            <see cref="T:System.Linq.ParallelQuery`1"/> is supported.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Util.Misc.AsyncEnumerableWrapper`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Wraps an <see cref="T:System.Collections.Generic.IEnumerable`1"/> as an <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to allow asynchronous consumption.
            Every <c>MoveNextAsync</c> call of the underlying enumerator is awaited in a new <see cref="T:System.Threading.Tasks.Task" />.
            May be useful in scenarios when the time between iterations may be long, such as when reading from a network stream or when every enumerator step is expensive.
            <para/><b>Warning!</b> Do NOT use this <see langword="struct"/> right before an aggregating operation. Instead, use the corresponding aggregation methods from <see cref="!:Extensions.ALinq.IEnumerableExtensions"/>. This method is intended for use when <c>MoveNext</c> calls on an <see cref="T:System.Collections.Generic.IEnumerator`1"/> are expected to be computationally expensive or time-consuming; every <c>MoveNext</c> call is wrapped in a new <see cref="T:System.Threading.Tasks.Task"/> and <see langword="await"/>ed. To reduce overhead, usage of the asynchronous methods in <see cref="!:Extensions.ALinq.IEnumerableExtensions"/> is recommended (which batch the entire enumeration and potential allocation of the aggregation result into a single <see cref="T:System.Threading.Tasks.Task"/>).
            </summary>
            <typeparam name="T">The Type of elements the <see cref="T:System.Collections.Generic.IEnumerable`1"/> yields.</typeparam>
            <param name="from">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to wrap.</param>
            <remarks>
            <see cref="T:System.Linq.ParallelQuery`1"/> is supported.
            </remarks>
        </member>
        <member name="P:LaquaiLib.Util.Misc.AsyncEnumerableWrapper`1.Empty">
            <summary>
            Gets an empty <see cref="T:LaquaiLib.Util.Misc.AsyncEnumerableWrapper`1"/> (that is, an instance that yields no elements).
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Misc.AsyncEnumerableWrapper`1.GetAsyncEnumerator(System.Threading.CancellationToken)">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Util.Misc.AsyncEnumeratorWrapper`1">
            <summary>
            Wraps an <see cref="T:System.Collections.Generic.IEnumerator`1"/> as an <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> to allow asynchronous consumption.
            Every <see cref="M:LaquaiLib.Util.Misc.AsyncEnumeratorWrapper`1.MoveNextAsync"/> call is awaited in a new <see cref="T:System.Threading.Tasks.Task" />.
            May be useful in scenarios when the time between iterations may be long, such as when reading from a network stream or when every enumerator step is expensive.
            <para/><b>Warning!</b> Do NOT use this <see langword="struct"/> right before an aggregating operation. Instead, use the corresponding aggregation methods from <see cref="!:Extensions.ALinq.IEnumerableExtensions"/>. This method is intended for use when <c>MoveNext</c> calls on an <see cref="T:System.Collections.Generic.IEnumerator`1"/> are expected to be computationally expensive or time-consuming; every <c>MoveNext</c> call is wrapped in a new <see cref="T:System.Threading.Tasks.Task"/> and <see langword="await"/>ed. To reduce overhead, usage of the asynchronous methods in <see cref="!:Extensions.ALinq.IEnumerableExtensions"/> is recommended (which batch the entire enumeration and potential allocation of the aggregation result into a single <see cref="T:System.Threading.Tasks.Task"/>).
            </summary>
            <typeparam name="T">The Type of elements the <see cref="T:System.Collections.Generic.IEnumerator`1"/> yields.</typeparam>
            <param name="from">The <see cref="T:System.Collections.Generic.IEnumerator`1"/> to wrap.</param>
        </member>
        <member name="M:LaquaiLib.Util.Misc.AsyncEnumeratorWrapper`1.#ctor(System.Collections.Generic.IEnumerator{`0},System.Threading.CancellationToken)">
            <summary>
            Wraps an <see cref="T:System.Collections.Generic.IEnumerator`1"/> as an <see cref="T:System.Collections.Generic.IAsyncEnumerator`1"/> to allow asynchronous consumption.
            Every <see cref="M:LaquaiLib.Util.Misc.AsyncEnumeratorWrapper`1.MoveNextAsync"/> call is awaited in a new <see cref="T:System.Threading.Tasks.Task" />.
            May be useful in scenarios when the time between iterations may be long, such as when reading from a network stream or when every enumerator step is expensive.
            <para/><b>Warning!</b> Do NOT use this <see langword="struct"/> right before an aggregating operation. Instead, use the corresponding aggregation methods from <see cref="!:Extensions.ALinq.IEnumerableExtensions"/>. This method is intended for use when <c>MoveNext</c> calls on an <see cref="T:System.Collections.Generic.IEnumerator`1"/> are expected to be computationally expensive or time-consuming; every <c>MoveNext</c> call is wrapped in a new <see cref="T:System.Threading.Tasks.Task"/> and <see langword="await"/>ed. To reduce overhead, usage of the asynchronous methods in <see cref="!:Extensions.ALinq.IEnumerableExtensions"/> is recommended (which batch the entire enumeration and potential allocation of the aggregation result into a single <see cref="T:System.Threading.Tasks.Task"/>).
            </summary>
            <typeparam name="T">The Type of elements the <see cref="T:System.Collections.Generic.IEnumerator`1"/> yields.</typeparam>
            <param name="from">The <see cref="T:System.Collections.Generic.IEnumerator`1"/> to wrap.</param>
        </member>
        <member name="P:LaquaiLib.Util.Misc.AsyncEnumeratorWrapper`1.Empty">
            <summary>
            Gets an empty <see cref="T:LaquaiLib.Util.Misc.AsyncEnumeratorWrapper`1"/> (that is, an instance that yields no elements).
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Misc.AsyncEnumeratorWrapper`1.#ctor(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Util.Misc.AsyncEnumeratorWrapper`1"/> <see langword="struct"/> using an <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <param name="from">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to wrap.</param>
            <remarks>
            <see cref="T:System.Linq.ParallelQuery`1"/> is supported.
            </remarks>
        </member>
        <member name="P:LaquaiLib.Util.Misc.AsyncEnumeratorWrapper`1.Current">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.Misc.AsyncEnumeratorWrapper`1.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.Misc.AsyncEnumeratorWrapper`1.MoveNextAsync">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Util.Misc.DelegateProgress">
            <summary>
            Contains static factory methods for creating <see cref="T:LaquaiLib.Util.Misc.DelegateProgress`1"/> instances.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.Misc.DelegateProgress.Create``1(System.Action{``0})">
            <summary>
            Creates a new instance of <see cref="T:LaquaiLib.Util.Misc.DelegateProgress`1"/> using the specified delegate.
            </summary>
            <typeparam name="T">The type of progress value.</typeparam>
            <param name="action">The delegate to proxy <see cref="M:System.IProgress`1.Report(`0)"/> invocations to.</param>
            <returns>The created <see cref="T:LaquaiLib.Util.Misc.DelegateProgress`1"/> instance.</returns>
        </member>
        <member name="T:LaquaiLib.Util.Misc.DelegateProgress`1">
            <summary>
            Implements <see cref="T:System.IProgress`1"/> using a delegate.
            </summary>
            <typeparam name="T">The type of progress value.</typeparam>
            <param name="action">The delegate to proxy <see cref="M:LaquaiLib.Util.Misc.DelegateProgress`1.Report(`0)"/> invocations to.</param>
        </member>
        <member name="M:LaquaiLib.Util.Misc.DelegateProgress`1.#ctor(System.Action{`0})">
            <summary>
            Implements <see cref="T:System.IProgress`1"/> using a delegate.
            </summary>
            <typeparam name="T">The type of progress value.</typeparam>
            <param name="action">The delegate to proxy <see cref="M:LaquaiLib.Util.Misc.DelegateProgress`1.Report(`0)"/> invocations to.</param>
        </member>
        <member name="M:LaquaiLib.Util.Misc.DelegateProgress`1.Report(`0)">
            <summary>
            Reports the specified <paramref name="progress"/> value.
            </summary>
            <param name="progress">The value to report.</param>
        </member>
        <member name="T:LaquaiLib.Util.ShellInterfaces.CommandDispatchResult">
            <summary>
            Encapsulates a command dispatch result; that is, a command sent to a <see cref="T:LaquaiLib.Util.ShellInterfaces.IShellInterface"/> implementation and the output produced by the script that received the command in response to it.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.CommandDispatchResult.Input">
            <summary>
            The input sent to the <see cref="T:LaquaiLib.Util.ShellInterfaces.IShellInterface"/> implementation that produced this output.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.CommandDispatchResult.Output">
            <summary>
            The output produced by the script that received the <see cref="P:LaquaiLib.Util.ShellInterfaces.CommandDispatchResult.Input"/>.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.ShellInterfaces.CommandInterface">
            <summary>
            Implements <see cref="T:LaquaiLib.Util.ShellInterfaces.IShellInterface"/> using a <c>cmd.exe</c> instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.CommandInterface.Process">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.CommandInterface.Ready">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.CommandInterface.StdOut">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.CommandInterface.StdErr">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.CommandInterface.Exists">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.CommandInterface.SupportsMultilineCommands">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.CommandInterface.CreateInstanceAsync">
            <summary>
            Asynchronously creates and configures a new instance of <see cref="T:LaquaiLib.Util.ShellInterfaces.CommandInterface"/>.
            </summary>
            <returns>The configured instance of <see cref="T:LaquaiLib.Util.ShellInterfaces.CommandInterface"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.CommandInterface.DispatchAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.CommandInterface.Close">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.CommandInterface.WhenReady">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.CommandInterface.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Util.ShellInterfaces.IShellInterface">
            <summary>
            Defines a type that interfaces and handles communication with a shell (such as PowerShell).
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.IShellInterface.Process">
            <summary>
            Gets the <see cref="T:System.Diagnostics.Process"/> component that represents the underlying shell.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.IShellInterface.StdOut">
            <summary>
            Gets the standard output stream of the underlying PowerShell instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.IShellInterface.StdErr">
            <summary>
            Gets the standard error stream of the underlying PowerShell instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.IShellInterface.Ready">
            <summary>
            Indicates whether the underlying shell is ready to receive input.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.IShellInterface.Exists">
            <summary>
            Indicates whether the underlying shell still exists.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.IShellInterface.SupportsMultilineCommands">
            <summary>
            Indicates whether the underlying shell supports multiline commands; that is, whether the underlying shell behaves correctly when being passed a multiline command through <see cref="M:LaquaiLib.Util.ShellInterfaces.IShellInterface.DispatchAsync(System.String)"/>, OR whether that method preprocesses the input to ensure that the shell behaves correctly. This may include wrapping the input in a block, using a different method to send the input or splitting the input into multiple commands.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.IShellInterface.DispatchAsync(System.String)">
            <summary>
            Sends a string to the standard input of the underlying shell, then closes the input stream to allow the script to execute.
            </summary>
            <param name="input">The string to send. See remarks for further information.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that completes when the command has been dispatched and the output has been received.</returns>
            <remarks>
            Before sending multiline input, ensure that the shell you are sending to supports this. For example, a multiline PowerShell block must be enclosed in a block: <c>&amp; { }</c>
            <para/>
            </remarks>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.IShellInterface.Close">
            <summary>
            Requests that the interactive shell represented by this instance terminate at the earliest opportunity.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> that completes when the shell has terminated.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.IShellInterface.WhenReady">
            <summary>
            Returns a <see cref="T:System.Threading.Tasks.Task"/> that completes when the shell is ready to receive input.
            Note that it may never complete if the shell has been disposed or is uninitialized.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.Task"/> as described.</returns>
        </member>
        <member name="T:LaquaiLib.Util.ShellInterfaces.PowerShellInterface">
            <summary>
            Implements <see cref="T:LaquaiLib.Util.ShellInterfaces.IShellInterface"/> using a PowerShell instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.PowerShellInterface.Process">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.PowerShellInterface.Ready">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.PowerShellInterface.StdOut">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.PowerShellInterface.StdErr">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.PowerShellInterface.Exists">
            <inheritdoc/>
        </member>
        <member name="P:LaquaiLib.Util.ShellInterfaces.PowerShellInterface.SupportsMultilineCommands">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.PowerShellInterface.CreateInstanceAsync">
            <summary>
            Asynchronously creates and configures a new instance of <see cref="T:LaquaiLib.Util.ShellInterfaces.PowerShellInterface"/>.
            </summary>
            <returns>The configured instance of <see cref="T:LaquaiLib.Util.ShellInterfaces.PowerShellInterface"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.PowerShellInterface.DispatchAsync(System.String)">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.PowerShellInterface.Close">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.PowerShellInterface.WhenReady">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Util.ShellInterfaces.PowerShellInterface.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBox">
            <summary>
            Provides message box functionality to non-WinForms or WPF applications through P/Invoke.
            The <see langword="static"/> methods in this <see langword="class"/> simply delegate to the default <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/> instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBox.Factory">
            <summary>
            Gets the <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/> any <see cref="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBox.Show(System.String)"/> method overloads use by default.
            To ignore these defaults, create and use a custom <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/> instance.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBox.Show(System.Nullable{System.IntPtr},System.String,System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <inheritdoc cref="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.Nullable{System.IntPtr},System.String,System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32})"/>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBox.Show(System.String)">
            <inheritdoc cref="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String)"/>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBox.Show(System.String,System.String)">
            <inheritdoc cref="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String,System.String)"/>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBox.Show(System.String,System.String,System.UInt32)">
            <inheritdoc cref="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String,System.String,System.UInt32)"/>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBox.Show(System.String,System.String,System.UInt32,System.UInt32)">
            <inheritdoc cref="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String,System.String,System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBox.Show(System.String,System.String,System.UInt32,System.UInt32,System.UInt32)">
            <inheritdoc cref="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String,System.String,System.UInt32,System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBox.Show(System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <inheritdoc cref="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBox.Show(System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <inheritdoc cref="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)"/>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBox.Show(LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration)">
            <inheritdoc cref="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration)"/>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxButton">
            <summary>
            Specifies the buttons that are displayed on a message box.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxButton.OK">
            <summary>
            Specifies that only an "OK" button is displayed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxButton.OKCancel">
            <summary>
            Specifies that "OK" and "Cancel" buttons are displayed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxButton.AbortRetryIgnore">
            <summary>
            Specifies that "Abort", "Retry", and "Ignore" buttons are displayed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxButton.YesNoCancel">
            <summary>
            Specifies that "Yes" and "No" buttons are displayed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxButton.YesNo">
            <summary>
            Specifies that "Yes" and "No" buttons are displayed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxButton.RetryCancel">
            <summary>
            Specifies that "Retry" and "Cancel" buttons are displayed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxButton.CancelTryAgainContinue">
            <summary>
            Specifies that "Cancel", "Try Again", and "Continue" buttons are displayed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxButton.HelpButton">
            <summary>
            Specifies that a "Help" button is displayed in the message box, <i>in addition</i> to any other buttons specified.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration">
            <summary>
            Encapsulates configuration values for <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBox"/> and <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>.
            After creation, an instance of this <see langword="class"/> is immutable.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Default">
            <summary>
            Gets the default <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration"/> instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.OwnerHwnd">
            <summary>
            Gets the HWND of the owner window used to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Text">
            <summary>
            Gets the text to display in message boxes if none is specified.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Caption">
            <summary>
            Gets the caption to display in message boxes if none is specified.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Button">
            <summary>
            Gets the <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxButton"/> used to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.DefaultButton">
            <summary>
            Gets the <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxDefaultButton"/> used to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Icon">
            <summary>
            Gets the <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon"/> used to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Modality">
            <summary>
            Gets the <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxModality"/> used to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.OtherOptions">
            <summary>
            Gets the <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxOtherOptions"/> used to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.TypeParameterValue">
            <summary>
            Bitwise-ORs all the properties of this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration"/> instance and returns the result.
            </summary>
            <returns>The result of the bitwise-OR operation on all properties of this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.#ctor(System.UInt32)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration"/> by reconstructing the properties from an existing <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.TypeParameterValue"/>. This does not preserve <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.OwnerHwnd"/>, <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Text"/> or <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Caption"/>, which are set to their respective default values.
            </summary>
            <param name="typeParameterValue">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.TypeParameterValue"/> to reconstruct the properties from.</param>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.#ctor(LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration"/> by copying the properties from an existing <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration"/>.
            </summary>
            <param name="other">The <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration"/> to copy from.</param>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.#ctor(System.IntPtr,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration"/> with the specified properties. Any are omissible and will default to their respective default values.
            </summary>
            <param name="ownerHwnd">The HWND of the owner window to use.</param>
            <param name="text">The text to use.</param>
            <param name="caption">The caption to use.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Button"/> value to use.</param>
            <param name="defaultButton">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.DefaultButton"/> value to use.</param>
            <param name="icon">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Icon"/> value to use.</param>
            <param name="modality">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Modality"/> value to use.</param>
            <param name="otherOptions">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.OtherOptions"/> value to use.</param>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxDefaultButton">
            <summary>
            Specifies the default button on a message box.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxDefaultButton.Button1">
            <summary>
            Specifies that the first button on the message box is the default button. This is the default.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxDefaultButton.Button2">
            <summary>
            Specifies that the second button on the message box is the default button.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxDefaultButton.Button3">
            <summary>
            Specifies that the third button on the message box is the default button.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxDefaultButton.ButtonHelp">
            <summary>
            Specifies that the fourth button on the message box is the default button. This requires the Help button to be present (<see cref="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxButton.HelpButton"/>).
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory">
            <summary>
            Provides a factory that creates message boxes using non-standard default values.
            After creation, an instance of this <see langword="class"/> is immutable.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Default">
            <summary>
            Gets the default <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/> instance.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration">
            <summary>
            Gets the entire <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration"/> instance this factory uses to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.OwnerHwnd">
            <summary>
            Gets the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.OwnerHwnd"/> value in the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance this factory uses to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Text">
            <summary>
            Gets the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Text"/> value in the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance this factory uses to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Caption">
            <summary>
            Gets the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Caption"/> value in the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance this factory uses to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button">
            <summary>
            Gets the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Button"/> value in the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance this factory uses to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.DefaultButton">
            <summary>
            Gets the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.DefaultButton"/> value in the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance this factory uses to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Icon">
            <summary>
            Gets the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Icon"/> value in the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance this factory uses to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Modality">
            <summary>
            Gets the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.Modality"/> value in the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance this factory uses to create message boxes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.OtherOptions">
            <summary>
            Gets the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration.OtherOptions"/> value in the <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance this factory uses to create message boxes.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.#ctor(LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory)">
            <summary>
            Initialies a new <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/> with the same default values as <paramref name="other"/>.
            </summary>
            <param name="other">The <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/> to copy from.</param>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.#ctor(LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/> with the specified <paramref name="config"/>.
            </summary>
            <param name="config">The <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration"/> to use.</param>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.#ctor(System.IntPtr,System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/> with the specified parameters. Any are omissible and will default to their respective default values.
            </summary>
            <param name="ownerHwnd">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.OwnerHwnd"/> value to use.</param>
            <param name="text">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Text"/> value to use.</param>
            <param name="caption">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Caption"/> value to use.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <param name="defaultButton">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.DefaultButton"/> value to use.</param>
            <param name="icon">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Icon"/> value to use.</param>
            <param name="modality">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Modality"/> value to use.</param>
            <param name="otherOptions">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.OtherOptions"/> value to use.</param>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.Nullable{System.IntPtr},System.String,System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Shows a message box with the specified properties. Any are omissible and will default to their respective default value configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="ownerHwnd">The HWND of the owner window to associate the message box with.</param>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <param name="defaultButton">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.DefaultButton"/> value to use.</param>
            <param name="icon">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Icon"/> value to use.</param>
            <param name="modality">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Modality"/> value to use.</param>
            <param name="otherOptions">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.OtherOptions"/> value to use.</param>
            <returns>The result of the message box.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String)">
            <summary>
            Shows a message box with the specified <paramref name="text"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <returns>The result of the message box.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String,System.String)">
            <summary>
            Shows a message box with the specified <paramref name="text"/> and <paramref name="caption"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <returns>The result of the message box.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String,System.String,System.UInt32)">
            <summary>
            Shows a message box with the specified <paramref name="text"/>, <paramref name="caption"/> and <paramref name="button"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <returns>The result of the message box.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
            Shows a message box with the specified <paramref name="text"/>, <paramref name="caption"/>, <paramref name="button"/> and <paramref name="defaultButton"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <param name="defaultButton">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.DefaultButton"/> value to use.</param>
            <returns>The result of the message box.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String,System.String,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Shows a message box with the specified <paramref name="text"/>, <paramref name="caption"/>, <paramref name="button"/>, <paramref name="defaultButton"/> and <paramref name="icon"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <param name="defaultButton">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.DefaultButton"/> value to use.</param>
            <param name="icon">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Icon"/> value to use.</param>
            <returns>The result of the message box.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Shows a message box with the specified <paramref name="text"/>, <paramref name="caption"/>, <paramref name="button"/>, <paramref name="defaultButton"/>, <paramref name="icon"/> and <paramref name="modality"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <param name="defaultButton">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.DefaultButton"/> value to use.</param>
            <param name="icon">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Icon"/> value to use.</param>
            <param name="modality">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Modality"/> value to use.</param>
            <returns>The result of the message box.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Shows a message box with the specified <paramref name="text"/>, <paramref name="caption"/>, <paramref name="button"/>, <paramref name="defaultButton"/>, <paramref name="icon"/>, <paramref name="modality"/> and <paramref name="otherOptions"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <param name="defaultButton">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.DefaultButton"/> value to use.</param>
            <param name="icon">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Icon"/> value to use.</param>
            <param name="modality">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Modality"/> value to use.</param>
            <param name="otherOptions">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.OtherOptions"/> value to use.</param>
            <returns>The result of the message box.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Show(LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration)">
            <summary>
            Shows a message box using the specified <paramref name="configuration"/>.
            </summary>
            <param name="configuration">The <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration"/> to use.</param>
            <returns>The result of the message box.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.ShowAsync(System.Nullable{System.IntPtr},System.String,System.String,System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32},System.Nullable{System.UInt32})">
            <summary>
            Asynchronously shows a message box with the specified properties. Any are omissible and will default to their respective default value configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="ownerHwnd">The HWND of the owner window to associate the message box with.</param>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <param name="defaultButton">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.DefaultButton"/> value to use.</param>
            <param name="icon">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Icon"/> value to use.</param>
            <param name="modality">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Modality"/> value to use.</param>
            <param name="otherOptions">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.OtherOptions"/> value to use.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the user's interaction with the message box. It's <see cref="P:System.Threading.Tasks.Task`1.Result"/> is the result of that interaction.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.ShowAsync(System.String)">
            <summary>
            Asynchronously shows a message box with the specified <paramref name="text"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the user's interaction with the message box. It's <see cref="P:System.Threading.Tasks.Task`1.Result"/> is the result of that interaction.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.ShowAsync(System.String,System.String)">
            <summary>
            Asynchronously shows a message box with the specified <paramref name="text"/> and <paramref name="caption"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the user's interaction with the message box. It's <see cref="P:System.Threading.Tasks.Task`1.Result"/> is the result of that interaction.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.ShowAsync(System.String,System.String,System.UInt32)">
            <summary>
            Asynchronously shows a message box with the specified <paramref name="text"/>, <paramref name="caption"/> and <paramref name="button"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the user's interaction with the message box. It's <see cref="P:System.Threading.Tasks.Task`1.Result"/> is the result of that interaction.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.ShowAsync(System.String,System.String,System.UInt32,System.UInt32)">
            <summary>
            Asynchronously shows a message box with the specified <paramref name="text"/>, <paramref name="caption"/>, <paramref name="button"/> and <paramref name="defaultButton"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <param name="defaultButton">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.DefaultButton"/> value to use.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the user's interaction with the message box. It's <see cref="P:System.Threading.Tasks.Task`1.Result"/> is the result of that interaction.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.ShowAsync(System.String,System.String,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Asynchronously shows a message box with the specified <paramref name="text"/>, <paramref name="caption"/>, <paramref name="button"/>, <paramref name="defaultButton"/> and <paramref name="icon"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <param name="defaultButton">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.DefaultButton"/> value to use.</param>
            <param name="icon">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Icon"/> value to use.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the user's interaction with the message box. It's <see cref="P:System.Threading.Tasks.Task`1.Result"/> is the result of that interaction.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.ShowAsync(System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Asynchronously shows a message box with the specified <paramref name="text"/>, <paramref name="caption"/>, <paramref name="button"/>, <paramref name="defaultButton"/>, <paramref name="icon"/> and <paramref name="modality"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <param name="defaultButton">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.DefaultButton"/> value to use.</param>
            <param name="icon">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Icon"/> value to use.</param>
            <param name="modality">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Modality"/> value to use.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the user's interaction with the message box. It's <see cref="P:System.Threading.Tasks.Task`1.Result"/> is the result of that interaction.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.ShowAsync(System.String,System.String,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Asynchronously shows a message box with the specified <paramref name="text"/>, <paramref name="caption"/>, <paramref name="button"/>, <paramref name="defaultButton"/>, <paramref name="icon"/>, <paramref name="modality"/> and <paramref name="otherOptions"/>. All other properties will use the defaults configured in this <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory"/>'s <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Configuration"/> instance.
            </summary>
            <param name="text">The text to display.</param>
            <param name="caption">The caption to display.</param>
            <param name="button">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Button"/> value to use.</param>
            <param name="defaultButton">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.DefaultButton"/> value to use.</param>
            <param name="icon">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Icon"/> value to use.</param>
            <param name="modality">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.Modality"/> value to use.</param>
            <param name="otherOptions">The <see cref="P:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.OtherOptions"/> value to use.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the user's interaction with the message box. It's <see cref="P:System.Threading.Tasks.Task`1.Result"/> is the result of that interaction.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxFactory.ShowAsync(LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration)">
            <summary>
            Asynchronously shows a message box using the specified <paramref name="configuration"/>.
            </summary>
            <param name="configuration">The <see cref="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxConfiguration"/> to use.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task`1"/> that represents the user's interaction with the message box. It's <see cref="P:System.Threading.Tasks.Task`1.Result"/> is the result of that interaction.</returns>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon">
            <summary>
            Specifies the icon that is displayed in a message box.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.None">
            <summary>
            Specifies that the message box contain no symbols.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.Hand">
            <summary>
            Specifies that the message box contain a symbol consisting of a white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.Question">
            <summary>
            Specifies that the message box contain a symbol consisting of white X in a circle with a red background.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.Exclamation">
            <summary>
            Specifies that the message box contain a symbol consisting of an exclamation point in a triangle with a yellow background.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.Asterisk">
            <summary>
            Specifies that the message box contain a symbol consisting of a lowercase letter i in a circle.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.Stop">
            <summary>
            Same as <see cref="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.Hand"/>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.Error">
            <summary>
            Same as <see cref="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.Hand"/>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.Warning">
            <summary>
            Same as <see cref="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.Exclamation"/>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.Information">
            <summary>
            Same as <see cref="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxIcon.Asterisk"/>.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxModality">
            <summary>
            Specifies the modality of a message box.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxModality.Application">
            <summary>
            Specifies that the message box is application modal. This blocks interaction with the associated owner window of the message box, if it has one, but windows belonging to other threads can be interacted with. This is the default.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxModality.System">
            <summary>
            Specifies that the message box is system modal. Behaves exactly like <see cref="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxModality.Application"/>, but promotes the message box's window to be always-on-top.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxModality.Task">
            <summary>
            Specifies that the message box is task modal. Behaves exactly like <see cref="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxModality.Application"/>, but blocks interaction with all windows belonging to the creating thread, if it has no owner window.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxOtherOptions">
            <summary>
            Specifies miscellaneous options for a message box.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxOtherOptions.SetForeground">
            <summary>
            Specifies that the message box should become the foreground window upon creation.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxOtherOptions.DefaultDesktopOnly">
            <summary>
            Specifies that, if the current input desktop is not the default desktop, the call to <c>MessageBox</c> will not return until the user switches to the default desktop.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxOtherOptions.Topmost">
            <summary>
            Specifies that the message box is created with the <c>WS_EX_TOPMOST</c> window style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxOtherOptions.RightJustify">
            <summary>
            Specifies that the message box display its contents right-justified.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxOtherOptions.RtlReading">
            <summary>
            Specifies that the message box use right-to-left reading layout for Hebrew and Arabic systems.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxOtherOptions.ServiceNotification">
            <summary>
            Specifies that the creating thread is a service notifying the user of an event. The message box is displayed on the current active desktop, even if there is no user logged on to the computer. This requires the owner HWND to be <see langword="null"/>.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxResult">
            <summary>
            Specifies the return value a message box interaction produced.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxResult.OK">
            <summary>
            The "OK" button was selected.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxResult.Cancel">
            <summary>
            The "Cancel" button was selected.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxResult.Abort">
            <summary>
            The "Abort" button was selected.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxResult.Retry">
            <summary>
            The "Retry" button was selected.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxResult.Ignore">
            <summary>
            The "Ignore" button was selected.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxResult.Yes">
            <summary>
            The "Yes" button was selected.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxResult.No">
            <summary>
            The "No" button was selected.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxResult.Continue">
            <summary>
            The "Continue" button was selected.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.MessageBox.MessageBoxResult.TryAgain">
            <summary>
            The "Try Again" button was selected.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.ToolTip">
            <summary>
            Provides tooltip functionality to non-WinForms or WPF applications through P/Invoke, even without a window to host it.
            <b>The current implementation is not functional.</b>
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.ToolTip.ShowTooltip(System.String)">
            <summary>
            Displays a tooltip with the specified <paramref name="text"/> at the cursor's position (plus the default offset of 5 pixels down and right) for its default lifetime of 1 second.
            </summary>
            <param name="text">The text to display in the tooltip.</param>
            <returns>A <see cref="T:LaquaiLib.Util.WpfForms.ToolTipHandle"/> that allows monitoring the tooltip's lifetime.</returns>
            <remarks>
            This method behaves like a <c>Begin*</c> method in that it returns immediately after displaying the tooltip. The tooltip will be removed from the screen after the specified <see cref="P:LaquaiLib.Util.WpfForms.ToolTipHandle.DisplayTask"/> completes.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.ToolTip.ShowTooltip(System.String,LaquaiLib.Util.WpfForms.ToolTipDisplay)">
            <summary>
            Displays a tooltip with the specified <paramref name="text"/> using the specified <paramref name="displayMode"/> which controls where the tooltip is displayed (plus the default offset of 5 pixels down and right) for its default lifetime of 1 second.
            </summary>
            <param name="text">The text to display in the tooltip.</param>
            <param name="displayMode">A <see cref="T:LaquaiLib.Util.WpfForms.ToolTipDisplay"/> value that specifies where the tooltip should be displayed.</param>
            <returns>A <see cref="T:LaquaiLib.Util.WpfForms.ToolTipHandle"/> that allows monitoring the tooltip's lifetime.</returns>
            <remarks>
            This method behaves like a <c>Begin*</c> method in that it returns immediately after displaying the tooltip. The tooltip will be removed from the screen after the specified <see cref="P:LaquaiLib.Util.WpfForms.ToolTipHandle.DisplayTask"/> completes.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.ToolTip.ShowTooltip(System.String,System.TimeSpan)">
            <summary>
            Displays a tooltip with the specified <paramref name="text"/> at the cursor's position (plus the default offset of 5 pixels down and right) for the specified <paramref name="displayTime"/>.
            </summary>
            <param name="text">The text to display in the tooltip.</param>
            <param name="displayTime">A <see cref="T:System.TimeSpan"/> value that specifies how long the tooltip should be displayed for.</param>
            <returns>A <see cref="T:LaquaiLib.Util.WpfForms.ToolTipHandle"/> that allows monitoring the tooltip's lifetime.</returns>
            <remarks>
            This method behaves like a <c>Begin*</c> method in that it returns immediately after displaying the tooltip. The tooltip will be removed from the screen after the specified <see cref="P:LaquaiLib.Util.WpfForms.ToolTipHandle.DisplayTask"/> completes.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.ToolTip.ShowTooltip(System.String,LaquaiLib.Util.WpfForms.ToolTipDisplay,System.Nullable{System.TimeSpan})">
            <summary>
            Displays a tooltip with the specified <paramref name="text"/> using the specified <paramref name="displayMode"/> which controls where the tooltip is displayed for the specified <paramref name="displayTime"/>.
            </summary>
            <param name="text">The text to display in the tooltip.</param>
            <param name="displayMode">A <see cref="T:LaquaiLib.Util.WpfForms.ToolTipDisplay"/> value that specifies where the tooltip should be displayed.</param>
            <param name="displayTime">A <see cref="T:System.TimeSpan"/> value that specifies how long the tooltip should be displayed for.</param>
            <returns>A <see cref="T:LaquaiLib.Util.WpfForms.ToolTipHandle"/> that allows monitoring the tooltip's lifetime.</returns>
            <remarks>
            This method behaves like a <c>Begin*</c> method in that it returns immediately after displaying the tooltip. The tooltip will be removed from the screen after the specified <see cref="P:LaquaiLib.Util.WpfForms.ToolTipHandle.DisplayTask"/> completes.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.ToolTip.ShowTooltip(System.String,LaquaiLib.Util.WpfForms.ToolTipDisplay,System.Nullable{System.TimeSpan},System.Nullable{System.Int32},System.Nullable{System.Int32})">
            <summary>
            Displays a tooltip with the specified <paramref name="text"/> using the specified <paramref name="displayMode"/> which controls where the tooltip is displayed for the specified <paramref name="displayTime"/> at the specified <paramref name="x"/> and <paramref name="y"/> position.
            </summary>
            <param name="text">The text to display in the tooltip.</param>
            <param name="displayMode">A <see cref="T:LaquaiLib.Util.WpfForms.ToolTipDisplay"/> value that specifies where the tooltip should be displayed.</param>
            <param name="displayTime">A <see cref="T:System.TimeSpan"/> value that specifies how long the tooltip should be displayed for.</param>
            <param name="x">The <c>x</c>-coordinate of the tooltip's position if <c><paramref name="displayMode"/> == <see cref="F:LaquaiLib.Util.WpfForms.ToolTipDisplay.Absolute"/></c>, otherwise the horizontal offset from the cursor's position.</param>
            <param name="y">The <c>y</c>-coordinate of the tooltip's position if <c><paramref name="displayMode"/> == <see cref="F:LaquaiLib.Util.WpfForms.ToolTipDisplay.Absolute"/></c>, otherwise the vertical offset from the cursor's position.</param>
            <returns>A <see cref="T:LaquaiLib.Util.WpfForms.ToolTipHandle"/> that allows monitoring the tooltip's lifetime.</returns>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="displayMode"/> is <see cref="F:LaquaiLib.Util.WpfForms.ToolTipDisplay.Absolute"/> and <paramref name="x"/> or <paramref name="y"/> are not specified.</exception>
            <exception cref="T:System.ArgumentException">Thrown when an unsupported <see cref="T:LaquaiLib.Util.WpfForms.ToolTipDisplay"/> value is specified for <paramref name="displayMode"/>.</exception>
            <remarks>
            This method behaves like a <c>Begin*</c> method in that it returns immediately after displaying the tooltip. The tooltip will be removed from the screen after the specified <see cref="P:LaquaiLib.Util.WpfForms.ToolTipHandle.DisplayTask"/> completes.
            </remarks>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.ToolTipDisplay">
            <summary>
            Specifies how a tooltip should be displayed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.ToolTipDisplay.Cursor">
            <summary>
            Specifies that the tooltip should be displayed at the cursor's position.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.ToolTipDisplay.Center">
            <summary>
            Specifies that the tooltip should be displayed at the center of the screen on which the cursor is located.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.ToolTipDisplay.Absolute">
            <summary>
            Specifies that the tooltip should be displayed at the specified absolute position.
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.ToolTipHandle">
            <summary>
            Represents a P/Invoke handle to a tooltip.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.ToolTipHandle.IsDisposed">
            <summary>
            Gets whether this <see cref="T:LaquaiLib.Util.WpfForms.ToolTipHandle"/> has been disposed; that is, whether the tooltip has been removed from the screen.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.ToolTipHandle.DisplayTask">
            <summary>
            Gets a <see cref="T:System.Threading.Tasks.Task"/> that completes when the tooltip is no longer displayed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.ToolTipHandle.#ctor(System.IntPtr,System.IntPtr,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Util.WpfForms.ToolTipHandle"/> <see langword="struct"/>.
            </summary>
            <param name="tooltipHwnd">The unmanaged handle to the tooltip window.</param>
            <param name="lpszText">The unmanaged handle to the tooltip text.</param>
            <param name="displayTime">The length of time to display the tooltip for. The instance of <see cref="T:LaquaiLib.Util.WpfForms.ToolTipHandle"/> initialized with this value will automatically dispose after this time has elapsed.</param>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.VirtualKey">
            <summary>
            Provides the virtual key code constants without requiring WPF or Forms references.
            Taken directly from <seealso href="https://learn.microsoft.com/en-us/windows/win32/inputdev/virtual-key-codes"/>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_LBUTTON">
            <summary>
            Left mouse button
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_RBUTTON">
            <summary>
            Right mouse button
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_CANCEL">
            <summary>
            Control-break processing
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_MBUTTON">
            <summary>
            Middle mouse button
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_XBUTTON1">
            <summary>
            X1 mouse button
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_XBUTTON2">
            <summary>
            X2 mouse button
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_BACK">
            <summary>
            BACKSPACE key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_TAB">
            <summary>
            TAB key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_CLEAR">
            <summary>
            CLEAR key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_RETURN">
            <summary>
            ENTER key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_SHIFT">
            <summary>
            SHIFT key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_CONTROL">
            <summary>
            CTRL key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_MENU">
            <summary>
            ALT key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_PAUSE">
            <summary>
            PAUSE key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_CAPITAL">
            <summary>
            CAPS LOCK key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_KANA">
            <summary>
            IME Kana mode
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_HANGUL">
            <summary>
            IME Hangul mode
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_IME_ON">
            <summary>
            IME On
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_JUNJA">
            <summary>
            IME Junja mode
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_FINAL">
            <summary>
            IME final mode
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_HANJA">
            <summary>
            IME Hanja mode
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_KANJI">
            <summary>
            IME Kanji mode
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_IME_OFF">
            <summary>
            IME Off
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_ESCAPE">
            <summary>
            ESC key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_CONVERT">
            <summary>
            IME convert
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NONCONVERT">
            <summary>
            IME nonconvert
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_ACCEPT">
            <summary>
            IME accept
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_MODECHANGE">
            <summary>
            IME mode change request
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_SPACE">
            <summary>
            SPACEBAR
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_PRIOR">
            <summary>
            PAGE UP key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NEXT">
            <summary>
            PAGE DOWN key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_END">
            <summary>
            END key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_HOME">
            <summary>
            HOME key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_LEFT">
            <summary>
            LEFT ARROW key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_UP">
            <summary>
            UP ARROW key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_RIGHT">
            <summary>
            RIGHT ARROW key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_DOWN">
            <summary>
            DOWN ARROW key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_SELECT">
            <summary>
            SELECT key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_PRINT">
            <summary>
            PRINT key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_EXECUTE">
            <summary>
            EXECUTE key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_SNAPSHOT">
            <summary>
            PRINT SCREEN key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_INSERT">
            <summary>
            INS key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_DELETE">
            <summary>
            DEL key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_HELP">
            <summary>
            HELP key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_0">
            <summary>
            0 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_1">
            <summary>
            1 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_2">
            <summary>
            2 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_3">
            <summary>
            3 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_4">
            <summary>
            4 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_5">
            <summary>
            5 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_6">
            <summary>
            6 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_7">
            <summary>
            7 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_8">
            <summary>
            8 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_9">
            <summary>
            9 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.A">
            <summary>
            A key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.B">
            <summary>
            B key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.C">
            <summary>
            C key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.D">
            <summary>
            D key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.E">
            <summary>
            E key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.F">
            <summary>
            F key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.G">
            <summary>
            G key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.H">
            <summary>
            H key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.I">
            <summary>
            I key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.J">
            <summary>
            J key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.K">
            <summary>
            K key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.L">
            <summary>
            L key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.M">
            <summary>
            M key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.N">
            <summary>
            N key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.O">
            <summary>
            O key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.P">
            <summary>
            P key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.Q">
            <summary>
            Q key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.R">
            <summary>
            R key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.S">
            <summary>
            S key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.T">
            <summary>
            TSelf key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.U">
            <summary>
            U key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.V">
            <summary>
            V key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.W">
            <summary>
            W key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.X">
            <summary>
            X key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.Y">
            <summary>
            Y key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.Z">
            <summary>
            Z key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_LWIN">
            <summary>
            Left Windows key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_RWIN">
            <summary>
            Right Windows key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_APPS">
            <summary>
            Applications key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_SLEEP">
            <summary>
            Computer Sleep key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NUMPAD0">
            <summary>
            Numeric keypad 0 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NUMPAD1">
            <summary>
            Numeric keypad 1 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NUMPAD2">
            <summary>
            Numeric keypad 2 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NUMPAD3">
            <summary>
            Numeric keypad 3 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NUMPAD4">
            <summary>
            Numeric keypad 4 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NUMPAD5">
            <summary>
            Numeric keypad 5 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NUMPAD6">
            <summary>
            Numeric keypad 6 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NUMPAD7">
            <summary>
            Numeric keypad 7 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NUMPAD8">
            <summary>
            Numeric keypad 8 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NUMPAD9">
            <summary>
            Numeric keypad 9 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_MULTIPLY">
            <summary>
            Multiply key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_ADD">
            <summary>
            Add key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_SEPARATOR">
            <summary>
            Separator key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_SUBTRACT">
            <summary>
            Subtract key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_DECIMAL">
            <summary>
            Decimal key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_DIVIDE">
            <summary>
            Divide key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F1">
            <summary>
            F1 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F2">
            <summary>
            F2 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F3">
            <summary>
            F3 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F4">
            <summary>
            F4 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F5">
            <summary>
            F5 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F6">
            <summary>
            F6 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F7">
            <summary>
            F7 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F8">
            <summary>
            F8 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F9">
            <summary>
            F9 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F10">
            <summary>
            F10 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F11">
            <summary>
            F11 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F12">
            <summary>
            F12 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F13">
            <summary>
            F13 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F14">
            <summary>
            F14 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F15">
            <summary>
            F15 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F16">
            <summary>
            F16 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F17">
            <summary>
            F17 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F18">
            <summary>
            F18 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F19">
            <summary>
            F19 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F20">
            <summary>
            F20 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F21">
            <summary>
            F21 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F22">
            <summary>
            F22 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F23">
            <summary>
            F23 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_F24">
            <summary>
            F24 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NUMLOCK">
            <summary>
            NUM LOCK key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_SCROLL">
            <summary>
            SCROLL LOCK key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_LSHIFT">
            <summary>
            Left SHIFT key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_RSHIFT">
            <summary>
            Right SHIFT key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_LCONTROL">
            <summary>
            Left CONTROL key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_RCONTROL">
            <summary>
            Right CONTROL key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_LMENU">
            <summary>
            Left ALT key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_RMENU">
            <summary>
            Right ALT key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_BROWSER_BACK">
            <summary>
            Browser Back key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_BROWSER_FORWARD">
            <summary>
            Browser Forward key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_BROWSER_REFRESH">
            <summary>
            Browser Refresh key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_BROWSER_STOP">
            <summary>
            Browser Stop key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_BROWSER_SEARCH">
            <summary>
            Browser Search key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_BROWSER_FAVORITES">
            <summary>
            Browser Favorites key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_BROWSER_HOME">
            <summary>
            Browser Start and Home key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_VOLUME_MUTE">
            <summary>
            Volume Mute key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_VOLUME_DOWN">
            <summary>
            Volume Down key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_VOLUME_UP">
            <summary>
            Volume Up key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_MEDIA_NEXT_TRACK">
            <summary>
            Next Track key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_MEDIA_PREV_TRACK">
            <summary>
            Previous Track key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_MEDIA_STOP">
            <summary>
            Stop Media key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_MEDIA_PLAY_PAUSE">
            <summary>
            Play/Pause Media key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_LAUNCH_MAIL">
            <summary>
            Start Mail key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_LAUNCH_MEDIA_SELECT">
            <summary>
            Select Media key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_LAUNCH_APP1">
            <summary>
            Start Application 1 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_LAUNCH_APP2">
            <summary>
            Start Application 2 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_1">
            <summary>
            Varies by keyboard. Call <see cref="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetOemKeyData(LaquaiLib.Util.WpfForms.VirtualKey,System.Globalization.CultureInfo)"/> for more information.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_PLUS">
            <summary>
            For any country/region, the + key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_COMMA">
            <summary>
            For any country/region, the , key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_MINUS">
            <summary>
            For any country/region, the - key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_PERIOD">
            <summary>
            For any country/region, the . key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_2">
            <summary>
            Varies by keyboard. Call <see cref="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetOemKeyData(LaquaiLib.Util.WpfForms.VirtualKey,System.Globalization.CultureInfo)"/> for more information.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_3">
            <summary>
            Varies by keyboard. Call <see cref="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetOemKeyData(LaquaiLib.Util.WpfForms.VirtualKey,System.Globalization.CultureInfo)"/> for more information.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_4">
            <summary>
            Varies by keyboard. Call <see cref="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetOemKeyData(LaquaiLib.Util.WpfForms.VirtualKey,System.Globalization.CultureInfo)"/> for more information.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_5">
            <summary>
            Varies by keyboard. Call <see cref="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetOemKeyData(LaquaiLib.Util.WpfForms.VirtualKey,System.Globalization.CultureInfo)"/> for more information.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_6">
            <summary>
            Varies by keyboard. Call <see cref="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetOemKeyData(LaquaiLib.Util.WpfForms.VirtualKey,System.Globalization.CultureInfo)"/> for more information.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_7">
            <summary>
            Varies by keyboard. Call <see cref="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetOemKeyData(LaquaiLib.Util.WpfForms.VirtualKey,System.Globalization.CultureInfo)"/> for more information.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_8">
            <summary>
            Varies by keyboard. Call <see cref="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetOemKeyData(LaquaiLib.Util.WpfForms.VirtualKey,System.Globalization.CultureInfo)"/> for more information.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_102">
            <summary>
            Varies by keyboard. Call <see cref="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetOemKeyData(LaquaiLib.Util.WpfForms.VirtualKey,System.Globalization.CultureInfo)"/> for more information.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_PROCESSKEY">
            <summary>
            IME PROCESS key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_PACKET">
            <summary>
            Used to pass Unicode characters as if they were keystrokes. The VK_PACKET key is the low word of a 32-bit Virtual Key value used for non-keyboard input methods. For more information, see Remark in KEYBDINPUT, SendInput, WM_KEYDOWN, and WM_KEYUP
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_ATTN">
            <summary>
            Attn key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_CRSEL">
            <summary>
            CrSel key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_EXSEL">
            <summary>
            ExSel key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_EREOF">
            <summary>
            Erase EOF key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_PLAY">
            <summary>
            Play key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_ZOOM">
            <summary>
            Zoom key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_NONAME">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_PA1">
            <summary>
            PA1 key
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.VirtualKey.VK_OEM_CLEAR">
            <summary>
            Clear key
            </summary>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.VirtualKeyUtils">
            <summary>
            Provides utility methods for working with virtual key codes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.ToggleKeys">
            <summary>
            Gets an array of <see cref="T:LaquaiLib.Util.WpfForms.VirtualKey"/> values that represent toggle keys.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.NormalKeys">
            <summary>
            Gets an array of <see cref="T:LaquaiLib.Util.WpfForms.VirtualKey"/> values that represent all keys that are not a toggle key.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.Ctrl">
            <summary>
            Gets whether any control key is pressed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.LCtrl">
            <summary>
            Gets whether the left control key is pressed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.RCtrl">
            <summary>
            Gets whether the right control key is pressed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.Shift">
            <summary>
            Gets whether any shift key is pressed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.LShift">
            <summary>
            Gets whether the left shift key is pressed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.RShift">
            <summary>
            Gets whether the right shift key is pressed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.Alt">
            <summary>
            Gets whether any alt key is pressed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.LAlt">
            <summary>
            Gets whether the left alt key is pressed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.RAlt">
            <summary>
            Gets whether the right alt key is pressed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.AltGr">
            <summary>
            Gets whether the AltGr key is pressed. This is equivalent to <c><see cref="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.LCtrl"/> &amp;&amp; <see cref="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.RAlt"/></c>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.Win">
            <summary>
            Gets whether any Windows key is pressed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.LWin">
            <summary>
            Gets whether the left Windows key is pressed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.RWin">
            <summary>
            Gets whether the right Windows key is pressed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.CapsLock">
            <summary>
            Gets whether Caps Lock is toggled on.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.NumLock">
            <summary>
            Gets whether Num Lock is toggled on.
            </summary>
        </member>
        <member name="P:LaquaiLib.Util.WpfForms.VirtualKeyUtils.ScrollLock">
            <summary>
            Gets whether Scroll Lock is toggled on.
            </summary>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetOemKeyData(LaquaiLib.Util.WpfForms.VirtualKey,System.Globalization.CultureInfo)">
            <summary>
            Translates a virtual key code to a Unicode character.
            </summary>
            <param name="vk">The virtual key code to translate.</param>
            <param name="cultureInfo">The <see cref="T:System.Globalization.CultureInfo"/> instance to use for the translation. It specifies the keyboard layout to use, which influences the actual character of <c>VK_OEM_*</c> keys. If omitted, <see cref="P:System.Globalization.CultureInfo.CurrentCulture"/> is used.</param>
            <returns>The Unicode character that corresponds to the specified virtual key code, or <see langword="null"/> if the key does not correspond to a character or the translation has failed.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetPressedKeys">
            <summary>
            Returns an array of all <see cref="T:LaquaiLib.Util.WpfForms.VirtualKey"/>s that are currently pressed.
            The return value does not reflect the toggle state, but the current state of the key. To accurately determine toggle states, use <see cref="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetKeyStates"/>.
            </summary>
            <returns>The array of all <see cref="T:LaquaiLib.Util.WpfForms.VirtualKey"/>s that are currently pressed.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetKeyState(LaquaiLib.Util.WpfForms.VirtualKey)">
            <summary>
            Gets the state of the specified virtual key.
            The return value does not reflect the toggle state, but the current state of the key.
            </summary>
            <param name="vk">The virtual key to get the state of.</param>
            <returns><see langword="true"/> if the key is pressed, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetToggleState(LaquaiLib.Util.WpfForms.VirtualKey)">
            <summary>
            Gets the toggle state of the specified virtual key.
            </summary>
            <param name="vk">The virtual key to get the toggle state of.</param>
            <returns><see langword="true"/> if the key is toggled on, otherwise <see langword="false"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Util.WpfForms.VirtualKeyUtils.GetKeyStates">
            <summary>
            Returns an array all <see cref="T:LaquaiLib.Util.WpfForms.VirtualKey"/>s that are currently pressed or toggled on if the key is a toggle key.
            </summary>
            <returns>The array of all <see cref="T:LaquaiLib.Util.WpfForms.VirtualKey"/>s that are currently pressed or toggled on.</returns>
        </member>
        <member name="T:LaquaiLib.Util.WpfForms.WindowMessage">
            <summary>
            Provides the window message constants without requiring further references into Win32 APIs.
            Stolen shamelessly from <seealso href="https://github.com/dotnet/pinvoke/blob/main/src/User32/User32+WindowMessage.cs"/>.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NULL">
            <summary>
            The WM_NULL message performs no operation. An application sends the WM_NULL message if it wants to post a message that the recipient window will ignore.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CREATE">
            <summary>
            The WM_CREATE message is sent when an application requests that a window be created by calling the CreateWindowEx or CreateWindow function. (The message is sent before the function returns.) The window procedure of the new window receives this message after the window is created, but before the window becomes visible.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSHELL_WINDOWCREATED">
            <summary>
            A top-level, unowned window has been created. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DESTROY">
            <summary>
            The WM_DESTROY message is sent when a window is being destroyed. It is sent to the window procedure of the window being destroyed after the window is removed from the screen.
            This message is sent first to the window being destroyed and then to the child windows (if any) as they are destroyed. During the processing of the message, it can be assumed that all child windows still exist.
            /// </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSHELL_WINDOWDESTROYED">
            <summary>
            A top-level, unowned window is about to be destroyed. The window still exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MOVE">
            <summary>
            The WM_MOVE message is sent after a window has been moved.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSHELL_ACTIVATESHELLWINDOW">
            <summary>
            The shell should activate its main window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSHELL_WINDOWACTIVATED">
            <summary>
            The activation has changed to a different top-level, unowned window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SIZE">
            <summary>
            The WM_SIZE message is sent to a window after its size has changed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSHELL_GETMINRECT">
            <summary>
            A window is being minimized or maximized. The system needs the coordinates of the minimized rectangle for the window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_ACTIVATE">
            <summary>
            The WM_ACTIVATE message is sent to both the window being activated and the window being deactivated. If the windows use the same input queue, the message is sent synchronously, first to the window procedure of the top-level window being deactivated, then to the window procedure of the top-level window being activated. If the windows use different input queues, the message is sent asynchronously, so the window is activated immediately.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSHELL_REDRAW">
            <summary>
            The title of a window in the task bar has been redrawn.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SETFOCUS">
            <summary>
            The WM_SETFOCUS message is sent to a window after it has gained the keyboard focus.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSHELL_TASKMAN">
            <summary>
            The user has selected the task list. A shell application that provides a task list should return TRUE to prevent Windows from starting its task list.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_KILLFOCUS">
            <summary>
            The WM_KILLFOCUS message is sent to a window immediately before it loses the keyboard focus.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSHELL_LANGUAGE">
            <summary>
            Keyboard language was changed or a new keyboard layout was loaded.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_ENABLE">
            <summary>
            The WM_ENABLE message is sent when an application changes the enabled state of a window. It is sent to the window whose enabled state is changing. This message is sent before the EnableWindow function returns, but after the enabled state (WS_DISABLED style bit) of the window has changed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SETREDRAW">
            <summary>
            An application sends the WM_SETREDRAW message to a window to allow changes in that window to be redrawn or to prevent changes in that window from being redrawn.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSHELL_ACCESSIBILITYSTATE">
            <summary>
            The accessibility state has changed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SETTEXT">
            <summary>
            An application sends a WM_SETTEXT message to set the text of a window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSHELL_APPCOMMAND">
            <summary>
            The user completed an input event (for example, pressed an application command button on the mouse or an application command key on the keyboard), and the application did not handle the WM_APPCOMMAND message generated by that input.
            If the Shell procedure handles the WM_COMMAND message, it should not call CallNextHookEx. See the Return Value section for more information.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_GETTEXT">
            <summary>
            An application sends a WM_GETTEXT message to copy the text that corresponds to a window into a buffer provided by the caller.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSHELL_WINDOWREPLACED">
            <summary>
            A top-level window is being replaced. The window exists when the system calls this hook.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_GETTEXTLENGTH">
            <summary>
            An application sends a WM_GETTEXTLENGTH message to determine the length, in characters, of the text associated with a window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_PAINT">
            <summary>
            The WM_PAINT message is sent when the system or another application makes a request to paint a portion of an application's window. The message is sent when the UpdateWindow or RedrawWindow function is called, or by the DispatchMessage function when the application obtains a WM_PAINT message by using the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CLOSE">
            <summary>
            The WM_CLOSE message is sent as a signal that a window or an application should terminate.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_QUERYENDSESSION">
            <summary>
            The WM_QUERYENDSESSION message is sent when the user chooses to end the session or when an application calls one of the system shutdown functions. If any application returns zero, the session is not ended. The system stops sending WM_QUERYENDSESSION messages as soon as one application returns zero.
            After processing this message, the system sends the WM_ENDSESSION message with the wParam parameter set to the results of the WM_QUERYENDSESSION message.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_QUIT">
            <summary>
            The WM_QUIT message indicates a request to terminate an application and is generated when the application calls the PostQuitMessage function. It causes the GetMessage function to return zero.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_QUERYOPEN">
            <summary>
            The WM_QUERYOPEN message is sent to an icon when the user requests that the window be restored to its previous size and position.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_ERASEBKGND">
            <summary>
            The WM_ERASEBKGND message is sent when the window background must be erased (for example, when a window is resized). The message is sent to prepare an invalidated portion of a window for painting.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SYSCOLORCHANGE">
            <summary>
            This message is sent to all top-level windows when a change is made to a system color setting.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_ENDSESSION">
            <summary>
            The WM_ENDSESSION message is sent to an application after the system processes the results of the WM_QUERYENDSESSION message. The WM_ENDSESSION message informs the application whether the session is ending.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SHOWWINDOW">
            <summary>
            The WM_SHOWWINDOW message is sent to a window when the window is about to be hidden or shown.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_WININICHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SETTINGCHANGE">
            <summary>
            An application sends the WM_WININICHANGE message to all top-level windows after making a change to the WIN.INI file. The SystemParametersInfo function sends this message after an application uses the function to change a setting in WIN.INI.
            Note  The WM_WININICHANGE message is provided only for compatibility with earlier versions of the system. Applications should use the WM_SETTINGCHANGE message.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DEVMODECHANGE">
            <summary>
            The WM_DEVMODECHANGE message is sent to all top-level windows whenever the user changes device-mode settings.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_ACTIVATEAPP">
            <summary>
            The WM_ACTIVATEAPP message is sent when a window belonging to a different application than the active window is about to be activated. The message is sent to the application whose window is being activated and to the application whose window is being deactivated.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_FONTCHANGE">
            <summary>
            An application sends the WM_FONTCHANGE message to all top-level windows in the system after changing the pool of font resources.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_TIMECHANGE">
            <summary>
            A message that is sent whenever there is a change in the system time.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CANCELMODE">
            <summary>
            The WM_CANCELMODE message is sent to cancel certain modes, such as mouse capture. For example, the system sends this message to the active window when a dialog box or message box is displayed. Certain functions also send this message explicitly to the specified window regardless of whether it is the active window. For example, the EnableWindow function sends this message when disabling the specified window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SETCURSOR">
            <summary>
            The WM_SETCURSOR message is sent to a window if the mouse causes the cursor to move within a window and mouse input is not captured.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MOUSEACTIVATE">
            <summary>
            The WM_MOUSEACTIVATE message is sent when the cursor is in an inactive window and the user presses a mouse button. The parent window receives this message only if the child window passes it to the DefWindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CHILDACTIVATE">
            <summary>
            The WM_CHILDACTIVATE message is sent to a child window when the user clicks the window's title bar or when the window is activated, moved, or sized.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_QUEUESYNC">
            <summary>
            The WM_QUEUESYNC message is sent by a computer-based training (CBT) application to separate user-input messages from other messages sent through the WH_JOURNALPLAYBACK Hook procedure.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_GETMINMAXINFO">
            <summary>
            The WM_GETMINMAXINFO message is sent to a window when the size or position of the window is about to change. An application can use this message to override the window's default maximized size and position, or its default minimum or maximum tracking size.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_PAINTICON">
            <summary>
            Windows NT 3.51 and earlier: The WM_PAINTICON message is sent to a minimized window when the icon is to be painted. This message is not sent by newer versions of Microsoft Windows, except in unusual circumstances explained in the Remarks.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_ICONERASEBKGND">
            <summary>
            Windows NT 3.51 and earlier: The WM_ICONERASEBKGND message is sent to a minimized window when the background of the icon must be filled before painting the icon. A window receives this message only if a class icon is defined for the window; otherwise, WM_ERASEBKGND is sent. This message is not sent by newer versions of Windows.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NEXTDLGCTL">
            <summary>
            The WM_NEXTDLGCTL message is sent to a dialog box procedure to set the keyboard focus to a different control in the dialog box.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SPOOLERSTATUS">
            <summary>
            The WM_SPOOLERSTATUS message is sent from Print Manager whenever a job is added to or removed from the Print Manager queue.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DRAWITEM">
            <summary>
            The WM_DRAWITEM message is sent to the parent window of an owner-drawn button, combo box, list box, or menu when a visual aspect of the button, combo box, list box, or menu has changed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MEASUREITEM">
            <summary>
            The WM_MEASUREITEM message is sent to the owner window of a combo box, list box, list view control, or menu item when the control or menu is created.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DELETEITEM">
            <summary>
            Sent to the owner of a list box or combo box when the list box or combo box is destroyed or when items are removed by the LB_DELETESTRING, LB_RESETCONTENT, CB_DELETESTRING, or CB_RESETCONTENT message. The system sends a WM_DELETEITEM message for each deleted item. The system sends the WM_DELETEITEM message for any deleted list box or combo box item with nonzero item data.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_VKEYTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_KEYDOWN message.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CHARTOITEM">
            <summary>
            Sent by a list box with the LBS_WANTKEYBOARDINPUT style to its owner in response to a WM_CHAR message.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SETFONT">
            <summary>
            An application sends a WM_SETFONT message to specify the font that a control is to use when drawing text.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_GETFONT">
            <summary>
            An application sends a WM_GETFONT message to a control to retrieve the font with which the control is currently drawing its text.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SETHOTKEY">
            <summary>
            An application sends a WM_SETHOTKEY message to a window to associate a hot key with the window. When the user presses the hot key, the system activates the window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_GETHOTKEY">
            <summary>
            An application sends a WM_GETHOTKEY message to determine the hot key associated with a window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_QUERYDRAGICON">
            <summary>
            The WM_QUERYDRAGICON message is sent to a minimized (iconic) window. The window is about to be dragged by the user but does not have an icon defined for its class. An application can return a handle to an icon or cursor. The system displays this cursor or icon while the user drags the icon.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_COMPAREITEM">
            <summary>
            The system sends the WM_COMPAREITEM message to determine the relative position of a new item in the sorted list of an owner-drawn combo box or list box. Whenever the application adds a new item, the system sends this message to the owner of a combo box or list box created with the CBS_SORT or LBS_SORT style.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_GETOBJECT">
            <summary>
            Active Accessibility sends the WM_GETOBJECT message to obtain information about an accessible object contained in a server application.
            Applications never send this message directly. It is sent only by Active Accessibility in response to calls to AccessibleObjectFromPoint, AccessibleObjectFromEvent, or AccessibleObjectFromWindow. However, server applications handle this message.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_COMPACTING">
            <summary>
            The WM_COMPACTING message is sent to all top-level windows when the system detects more than 12.5 percent of system time over a 30- to 60-second interval is being spent compacting memory. This indicates that system memory is low.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_COMMNOTIFY">
            <summary>
            WM_COMMNOTIFY is Obsolete for Win32-Based Applications
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_WINDOWPOSCHANGING">
            <summary>
            The WM_WINDOWPOSCHANGING message is sent to a window whose size, position, or place in the Z order is about to change as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_WINDOWPOSCHANGED">
            <summary>
            The WM_WINDOWPOSCHANGED message is sent to a window whose size, position, or place in the Z order has changed as a result of a call to the SetWindowPos function or another window-management function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_POWER">
            <summary>
            Notifies applications that the system, typically a battery-powered personal computer, is about to enter a suspended mode.
            Use: POWERBROADCAST
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_COPYDATA">
            <summary>
            An application sends the WM_COPYDATA message to pass data to another application.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CANCELJOURNAL">
            <summary>
            The WM_CANCELJOURNAL message is posted to an application when a user cancels the application's journaling activities. The message is posted with a NULL window handle.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NOTIFY">
            <summary>
            Sent by a common control to its parent window when an event has occurred or the control requires some information.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_INPUTLANGCHANGEREQUEST">
            <summary>
            The WM_INPUTLANGCHANGEREQUEST message is posted to the window with the focus when the user chooses a new input language, either with the hotkey (specified in the Keyboard control panel application) or from the indicator on the system taskbar. An application can accept the change by passing the message to the DefWindowProc function or reject the change (and prevent it from taking place) by returning immediately.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_INPUTLANGCHANGE">
            <summary>
            The WM_INPUTLANGCHANGE message is sent to the topmost affected window after an application's input language has been changed. You should make any application-specific settings and pass the message to the DefWindowProc function, which passes the message to all first-level child windows. These child windows can pass the message to DefWindowProc to have it pass the message to their child windows, and so on.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_TCARD">
            <summary>
            Sent to an application that has initiated a training card with Microsoft Windows Help. The message informs the application when the user clicks an authorable button. An application initiates a training card by specifying the HELP_TCARD command in a call to the WinHelp function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HELP">
            <summary>
            Indicates that the user pressed the F1 key. If a menu is active when F1 is pressed, WM_HELP is sent to the window associated with the menu; otherwise, WM_HELP is sent to the window that has the keyboard focus. If no window has the keyboard focus, WM_HELP is sent to the currently active window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_USERCHANGED">
            <summary>
            The WM_USERCHANGED message is sent to all windows after the user has logged on or off. When the user logs on or off, the system updates the user-specific settings. The system sends this message immediately after updating the settings.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NOTIFYFORMAT">
            <summary>
            Determines if a window accepts ANSI or Unicode structures in the WM_NOTIFY notification message. WM_NOTIFYFORMAT messages are sent from a common control to its parent window and from the parent window to the common control.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CONTEXTMENU">
            <summary>
            The WM_CONTEXTMENU message notifies a window that the user clicked the right mouse button (right-clicked) in the window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_STYLECHANGING">
            <summary>
            The WM_STYLECHANGING message is sent to a window when the SetWindowLong function is about to change one or more of the window's styles.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_STYLECHANGED">
            <summary>
            The WM_STYLECHANGED message is sent to a window after the SetWindowLong function has changed one or more of the window's styles
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DISPLAYCHANGE">
            <summary>
            The WM_DISPLAYCHANGE message is sent to all windows when the display resolution has changed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_GETICON">
            <summary>
            The WM_GETICON message is sent to a window to retrieve a handle to the large or small icon associated with a window. The system displays the large icon in the ALT+TAB dialog, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SETICON">
            <summary>
            An application sends the WM_SETICON message to associate a new large or small icon with a window. The system displays the large icon in the ALT+TAB dialog box, and the small icon in the window caption.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCCREATE">
            <summary>
            The WM_NCCREATE message is sent prior to the WM_CREATE message when a window is first created.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCDESTROY">
            <summary>
            The WM_NCDESTROY message informs a window that its nonclient area is being destroyed. The DestroyWindow function sends the WM_NCDESTROY message to the window following the WM_DESTROY message. WM_DESTROY is used to free the allocated memory object associated with the window.
            The WM_NCDESTROY message is sent after the child windows have been destroyed. In contrast, WM_DESTROY is sent before the child windows are destroyed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCCALCSIZE">
            <summary>
            The WM_NCCALCSIZE message is sent when the size and position of a window's client area must be calculated. By processing this message, an application can control the content of the window's client area when the size or position of the window changes.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCHITTEST">
            <summary>
            The WM_NCHITTEST message is sent to a window when the cursor moves, or when a mouse button is pressed or released. If the mouse is not captured, the message is sent to the window beneath the cursor. Otherwise, the message is sent to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCPAINT">
            <summary>
            The WM_NCPAINT message is sent to a window when its frame must be painted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCACTIVATE">
            <summary>
            The WM_NCACTIVATE message is sent to a window when its nonclient area needs to be changed to indicate an active or inactive state.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_GETDLGCODE">
            <summary>
            The WM_GETDLGCODE message is sent to the window procedure associated with a control. By default, the system handles all keyboard input to the control; the system interprets certain types of keyboard input as dialog box navigation keys. To override this default behavior, the control can respond to the WM_GETDLGCODE message to indicate the types of input it wants to process itself.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SYNCPAINT">
            <summary>
            The WM_SYNCPAINT message is used to synchronize painting while avoiding linking independent GUI threads.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCMOUSEMOVE">
            <summary>
            The WM_NCMOUSEMOVE message is posted to a window when the cursor is moved within the nonclient area of the window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCLBUTTONDOWN">
            <summary>
            The WM_NCLBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCLBUTTONUP">
            <summary>
            The WM_NCLBUTTONUP message is posted when the user releases the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCLBUTTONDBLCLK">
            <summary>
            The WM_NCLBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCRBUTTONDOWN">
            <summary>
            The WM_NCRBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCRBUTTONUP">
            <summary>
            The WM_NCRBUTTONUP message is posted when the user releases the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCRBUTTONDBLCLK">
            <summary>
            The WM_NCRBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCMBUTTONDOWN">
            <summary>
            The WM_NCMBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCMBUTTONUP">
            <summary>
            The WM_NCMBUTTONUP message is posted when the user releases the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCMBUTTONDBLCLK">
            <summary>
            The WM_NCMBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is within the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCXBUTTONDOWN">
            <summary>
            The WM_NCXBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCXBUTTONUP">
            <summary>
            The WM_NCXBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCXBUTTONDBLCLK">
            <summary>
            The WM_NCXBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the nonclient area of a window. This message is posted to the window that contains the cursor. If a window has captured the mouse, this message is not posted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_BM_CLICK">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_INPUT_DEVICE_CHANGE">
            <summary>
            The WM_INPUT_DEVICE_CHANGE message is sent to the window that registered to receive raw input. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_INPUT">
            <summary>
            The WM_INPUT message is sent to the window that is getting raw input.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_KEYFIRST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_KEYDOWN">
            <summary>
            The WM_KEYDOWN message is posted to the window with the keyboard focus when a nonsystem key is pressed. A nonsystem key is a key that is pressed when the ALT key is not pressed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_KEYUP">
            <summary>
            The WM_KEYUP message is posted to the window with the keyboard focus when a nonsystem key is released. A nonsystem key is a key that is pressed when the ALT key is not pressed, or a keyboard key that is pressed when a window has the keyboard focus.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CHAR">
            <summary>
            The WM_CHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_CHAR message contains the character code of the key that was pressed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DEADCHAR">
            <summary>
            The WM_DEADCHAR message is posted to the window with the keyboard focus when a WM_KEYUP message is translated by the TranslateMessage function. WM_DEADCHAR specifies a character code generated by a dead key. A dead key is a key that generates a character, such as the umlaut (double-dot), that is combined with another character to form a composite character. For example, the umlaut-O character (Ö) is generated by typing the dead key for the umlaut character, and then typing the O key.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SYSKEYDOWN">
            <summary>
            The WM_SYSKEYDOWN message is posted to the window with the keyboard focus when the user presses the F10 key (which activates the menu bar) or holds down the ALT key and then presses another key. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYDOWN message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SYSKEYUP">
            <summary>
            The WM_SYSKEYUP message is posted to the window with the keyboard focus when the user releases a key that was pressed while the ALT key was held down. It also occurs when no window currently has the keyboard focus; in this case, the WM_SYSKEYUP message is sent to the active window. The window that receives the message can distinguish between these two contexts by checking the context code in the lParam parameter.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SYSCHAR">
            <summary>
            The WM_SYSCHAR message is posted to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. It specifies the character code of a system character key — that is, a character key that is pressed while the ALT key is down.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SYSDEADCHAR">
            <summary>
            The WM_SYSDEADCHAR message is sent to the window with the keyboard focus when a WM_SYSKEYDOWN message is translated by the TranslateMessage function. WM_SYSDEADCHAR specifies the character code of a system dead key — that is, a dead key that is pressed while holding down the ALT key.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_UNICHAR">
            <summary>
            The WM_UNICHAR message is posted to the window with the keyboard focus when a WM_KEYDOWN message is translated by the TranslateMessage function. The WM_UNICHAR message contains the character code of the key that was pressed.
            The WM_UNICHAR message is equivalent to WM_CHAR, but it uses Unicode Transformation Format (UTF)-32, whereas WM_CHAR uses UTF-16. It is designed to send or post Unicode characters to ANSI windows and it can handle Unicode Supplementary Plane characters.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_KEYLAST">
            <summary>
            This message filters for keyboard messages.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_STARTCOMPOSITION">
            <summary>
            Sent immediately before the IME generates the composition string as a result of a keystroke. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_ENDCOMPOSITION">
            <summary>
            Sent to an application when the IME ends composition. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_COMPOSITION">
            <summary>
            Sent to an application when the IME changes composition status as a result of a keystroke. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_KEYLAST">
            <inheritdoc/>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_INITDIALOG">
            <summary>
            The WM_INITDIALOG message is sent to the dialog box procedure immediately before a dialog box is displayed. Dialog box procedures typically use this message to initialize controls and carry out any other initialization tasks that affect the appearance of the dialog box.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_COMMAND">
            <summary>
            The WM_COMMAND message is sent when the user selects a command item from a menu, when a control sends a notification message to its parent window, or when an accelerator keystroke is translated.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SYSCOMMAND">
            <summary>
            A window receives this message when the user chooses a command from the Window menu, clicks the maximize button, minimize button, restore button, close button, or moves the form. You can stop the form from moving by filtering this out.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_TIMER">
            <summary>
            The WM_TIMER message is posted to the installing thread's message queue when a timer expires. The message is posted by the GetMessage or PeekMessage function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSCROLL">
            <summary>
            The WM_HSCROLL message is sent to a window when a scroll event occurs in the window's standard horizontal scroll bar. This message is also sent to the owner of a horizontal scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_VSCROLL">
            <summary>
            The WM_VSCROLL message is sent to a window when a scroll event occurs in the window's standard vertical scroll bar. This message is also sent to the owner of a vertical scroll bar control when a scroll event occurs in the control.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_INITMENU">
            <summary>
            The WM_INITMENU message is sent when a menu is about to become active. It occurs when the user clicks an item on the menu bar or presses a menu key. This allows the application to modify the menu before it is displayed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_INITMENUPOPUP">
            <summary>
            The WM_INITMENUPOPUP message is sent when a drop-down menu or submenu is about to become active. This allows an application to modify the menu before it is displayed, without changing the entire menu.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SYSTIMER">
            <summary>
            WM_SYSTIMER is a well-known yet still undocumented message. Windows uses WM_SYSTIMER for internal actions like scrolling.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MENUSELECT">
            <summary>
            The WM_MENUSELECT message is sent to a menu's owner window when the user selects a menu item.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MENUCHAR">
            <summary>
            The WM_MENUCHAR message is sent when a menu is active and the user presses a key that does not correspond to any mnemonic or accelerator key. This message is sent to the window that owns the menu.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_ENTERIDLE">
            <summary>
            The WM_ENTERIDLE message is sent to the owner window of a modal dialog box or menu that is entering an idle state. A modal dialog box or menu enters an idle state when no messages are waiting in its queue after it has processed one or more previous messages.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MENURBUTTONUP">
            <summary>
            The WM_MENURBUTTONUP message is sent when the user releases the right mouse button while the cursor is on a menu item.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MENUDRAG">
            <summary>
            The WM_MENUDRAG message is sent to the owner of a drag-and-drop menu when the user drags a menu item.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MENUGETOBJECT">
            <summary>
            The WM_MENUGETOBJECT message is sent to the owner of a drag-and-drop menu when the mouse cursor enters a menu item or moves from the center of the item to the top or bottom of the item.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_UNINITMENUPOPUP">
            <summary>
            The WM_UNINITMENUPOPUP message is sent when a drop-down menu or submenu has been destroyed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MENUCOMMAND">
            <summary>
            The WM_MENUCOMMAND message is sent when the user makes a selection from a menu.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CHANGEUISTATE">
            <summary>
            An application sends the WM_CHANGEUISTATE message to indicate that the user interface (UI) state should be changed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_UPDATEUISTATE">
            <summary>
            An application sends the WM_UPDATEUISTATE message to change the user interface (UI) state for the specified window and all its child windows.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_QUERYUISTATE">
            <summary>
            An application sends the WM_QUERYUISTATE message to retrieve the user interface (UI) state for a window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CTLCOLORMSGBOX">
            <summary>
            The WM_CTLCOLORMSGBOX message is sent to the owner window of a message box before Windows draws the message box. By responding to this message, the owner window can set the text and background colors of the message box by using the given display device context handle.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CTLCOLOREDIT">
            <summary>
            An edit control that is not read-only or disabled sends the WM_CTLCOLOREDIT message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the edit control.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CTLCOLORLISTBOX">
            <summary>
            Sent to the parent window of a list box before the system draws the list box. By responding to this message, the parent window can set the text and background colors of the list box by using the specified display device context handle.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CTLCOLORBTN">
            <summary>
            The WM_CTLCOLORBTN message is sent to the parent window of a button before drawing the button. The parent window can change the button's text and background colors. However, only owner-drawn buttons respond to the parent window processing this message.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CTLCOLORDLG">
            <summary>
            The WM_CTLCOLORDLG message is sent to a dialog box before the system draws the dialog box. By responding to this message, the dialog box can set its text and background colors using the specified display device context handle.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CTLCOLORSCROLLBAR">
            <summary>
            The WM_CTLCOLORSCROLLBAR message is sent to the parent window of a scroll bar control when the control is about to be drawn. By responding to this message, the parent window can use the display context handle to set the background color of the scroll bar control.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CTLCOLORSTATIC">
            <summary>
            A static control, or an edit control that is read-only or disabled, sends the WM_CTLCOLORSTATIC message to its parent window when the control is about to be drawn. By responding to this message, the parent window can use the specified device context handle to set the text and background colors of the static control.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MOUSEFIRST">
            <summary>
            Use WM_MOUSEFIRST to specify the first mouse message. Use the PeekMessage() Function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MOUSEMOVE">
            <summary>
            The WM_MOUSEMOVE message is posted to a window when the cursor moves. If the mouse is not captured, the message is posted to the window that contains the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_LBUTTONDOWN">
            <summary>
            The WM_LBUTTONDOWN message is posted when the user presses the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_LBUTTONUP">
            <summary>
            The WM_LBUTTONUP message is posted when the user releases the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_LBUTTONDBLCLK">
            <summary>
            The WM_LBUTTONDBLCLK message is posted when the user double-clicks the left mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_RBUTTONDOWN">
            <summary>
            The WM_RBUTTONDOWN message is posted when the user presses the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_RBUTTONUP">
            <summary>
            The WM_RBUTTONUP message is posted when the user releases the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_RBUTTONDBLCLK">
            <summary>
            The WM_RBUTTONDBLCLK message is posted when the user double-clicks the right mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MBUTTONDOWN">
            <summary>
            The WM_MBUTTONDOWN message is posted when the user presses the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MBUTTONUP">
            <summary>
            The WM_MBUTTONUP message is posted when the user releases the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MBUTTONDBLCLK">
            <summary>
            The WM_MBUTTONDBLCLK message is posted when the user double-clicks the middle mouse button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MOUSEWHEEL">
            <summary>
            The WM_MOUSEWHEEL message is sent to the focus window when the mouse wheel is rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_XBUTTONDOWN">
            <summary>
            The WM_XBUTTONDOWN message is posted when the user presses the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_XBUTTONUP">
            <summary>
            The WM_XBUTTONUP message is posted when the user releases the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_XBUTTONDBLCLK">
            <summary>
            The WM_XBUTTONDBLCLK message is posted when the user double-clicks the first or second X button while the cursor is in the client area of a window. If the mouse is not captured, the message is posted to the window beneath the cursor. Otherwise, the message is posted to the window that has captured the mouse.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MOUSEHWHEEL">
            <summary>
            The WM_MOUSEHWHEEL message is sent to the focus window when the mouse's horizontal scroll wheel is tilted or rotated. The DefWindowProc function propagates the message to the window's parent. There should be no internal forwarding of the message, since DefWindowProc propagates it up the parent chain until it finds a window that processes it.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MOUSELAST">
            <summary>
            Use WM_MOUSELAST to specify the last mouse message. Used with PeekMessage() Function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_PARENTNOTIFY">
            <summary>
            The WM_PARENTNOTIFY message is sent to the parent of a child window when the child window is created or destroyed, or when the user clicks a mouse button while the cursor is over the child window. When the child window is being created, the system sends WM_PARENTNOTIFY just before the CreateWindow or CreateWindowEx function that creates the window returns. When the child window is being destroyed, the system sends the message before any processing to destroy the window takes place.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_ENTERMENULOOP">
            <summary>
            The WM_ENTERMENULOOP message informs an application's main window procedure that a menu modal loop has been entered.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_EXITMENULOOP">
            <summary>
            The WM_EXITMENULOOP message informs an application's main window procedure that a menu modal loop has been exited.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NEXTMENU">
            <summary>
            The WM_NEXTMENU message is sent to an application when the right or left arrow key is used to switch between the menu bar and the system menu.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SIZING">
            <summary>
            The WM_SIZING message is sent to a window that the user is resizing. By processing this message, an application can monitor the size and position of the drag rectangle and, if needed, change its size or position.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CAPTURECHANGED">
            <summary>
            The WM_CAPTURECHANGED message is sent to the window that is losing the mouse capture.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MOVING">
            <summary>
            The WM_MOVING message is sent to a window that the user is moving. By processing this message, an application can monitor the position of the drag rectangle and, if needed, change its position.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_POWERBROADCAST">
            <summary>
            Notifies applications that a power-management event has occurred.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DEVICECHANGE">
            <summary>
            Notifies an application of a change to the hardware configuration of a device or the computer.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MDICREATE">
            <summary>
            An application sends the WM_MDICREATE message to a multiple-document interface (MDI) client window to create an MDI child window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MDIDESTROY">
            <summary>
            An application sends the WM_MDIDESTROY message to a multiple-document interface (MDI) client window to close an MDI child window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MDIACTIVATE">
            <summary>
            An application sends the WM_MDIACTIVATE message to a multiple-document interface (MDI) client window to instruct the client window to activate a different MDI child window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MDIRESTORE">
            <summary>
            An application sends the WM_MDIRESTORE message to a multiple-document interface (MDI) client window to restore an MDI child window from maximized or minimized size.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MDINEXT">
            <summary>
            An application sends the WM_MDINEXT message to a multiple-document interface (MDI) client window to activate the next or previous child window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MDIMAXIMIZE">
            <summary>
            An application sends the WM_MDIMAXIMIZE message to a multiple-document interface (MDI) client window to maximize an MDI child window. The system resizes the child window to make its client area fill the client window. The system places the child window's window menu icon in the rightmost position of the frame window's menu bar, and places the child window's restore icon in the leftmost position. The system also appends the title bar text of the child window to that of the frame window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MDITILE">
            <summary>
            An application sends the WM_MDITILE message to a multiple-document interface (MDI) client window to arrange all of its MDI child windows in a tile format.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MDICASCADE">
            <summary>
            An application sends the WM_MDICASCADE message to a multiple-document interface (MDI) client window to arrange all its child windows in a cascade format.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MDIICONARRANGE">
            <summary>
            An application sends the WM_MDIICONARRANGE message to a multiple-document interface (MDI) client window to arrange all minimized MDI child windows. It does not affect child windows that are not minimized.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MDIGETACTIVE">
            <summary>
            An application sends the WM_MDIGETACTIVE message to a multiple-document interface (MDI) client window to retrieve the handle to the active MDI child window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MDISETMENU">
            <summary>
            An application sends the WM_MDISETMENU message to a multiple-document interface (MDI) client window to replace the entire menu of an MDI frame window, to replace the window menu of the frame window, or both.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_ENTERSIZEMOVE">
            <summary>
            The WM_ENTERSIZEMOVE message is sent one time to a window after it enters the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            The system sends the WM_ENTERSIZEMOVE message regardless of whether the dragging of full windows is enabled.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_EXITSIZEMOVE">
            <summary>
            The WM_EXITSIZEMOVE message is sent one time to a window, after it has exited the moving or sizing modal loop. The window enters the moving or sizing modal loop when the user clicks the window's title bar or sizing border, or when the window passes the WM_SYSCOMMAND message to the DefWindowProc function and the wParam parameter of the message specifies the SC_MOVE or SC_SIZE value. The operation is complete when DefWindowProc returns.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DROPFILES">
            <summary>
            Sent when the user drops a file on the window of an application that has registered itself as a recipient of dropped files.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MDIREFRESHMENU">
            <summary>
            An application sends the WM_MDIREFRESHMENU message to a multiple-document interface (MDI) client window to refresh the window menu of the MDI frame window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_SETCONTEXT">
            <summary>
            Sent to an application when a window is activated. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_NOTIFY">
            <summary>
            Sent to an application to notify it of changes to the IME window. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_CONTROL">
            <summary>
            Sent by an application to direct the IME window to carry out the requested command. The application uses this message to control the IME window that it has created. To send this message, the application calls the SendMessage function with the following parameters.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_COMPOSITIONFULL">
            <summary>
            Sent to an application when the IME window finds no space to extend the area for the composition window. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_SELECT">
            <summary>
            Sent to an application when the operating system is about to change the current IME. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_CHAR">
            <summary>
            Sent to an application when the IME gets a character of the conversion result. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_REQUEST">
            <summary>
            Sent to an application to provide commands and request information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_KEYDOWN">
            <summary>
            Sent to an application by the IME to notify the application of a key press and to keep message order. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_IME_KEYUP">
            <summary>
            Sent to an application by the IME to notify the application of a key release and to keep message order. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCMOUSEHOVER">
            <summary>
            The WM_NCMOUSEHOVER message is posted to a window when the cursor hovers over the nonclient area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MOUSEHOVER">
            <summary>
            The WM_MOUSEHOVER message is posted to a window when the cursor hovers over the client area of the window for the period of time specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_NCMOUSELEAVE">
            <summary>
            The WM_NCMOUSELEAVE message is posted to a window when the cursor leaves the nonclient area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_MOUSELEAVE">
            <summary>
            The WM_MOUSELEAVE message is posted to a window when the cursor leaves the client area of the window specified in a prior call to TrackMouseEvent.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_WTSSESSION_CHANGE">
            <summary>
            The WM_WTSSESSION_CHANGE message notifies applications of changes in session state.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_TABLET_FIRST">
            <inheritdoc/>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_TABLET_LAST">
            <inheritdoc/>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DPICHANGED">
            <summary>
            The WM_DISPLAYCHANGE message is sent when the effective dots per inch (dpi) for a window has changed. The DPI is the scale factor for a window.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DPICHANGED_BEFOREPARENT">
            <summary>
            For Per Monitor v2 top-level windows, this message is sent to all HWNDs in the child HWDN tree of the window that is undergoing a DPI change. This message occurs before the top-level window receives <see cref="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DPICHANGED"/>, and traverses the child tree from the bottom up.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DPICHANGED_AFTERPARENT">
            <summary>
            For Per Monitor v2 top-level windows, this message is sent to all HWNDs in the child HWDN tree of the window that is undergoing a DPI change. This message occurs after the top-level window receives <see cref="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DPICHANGED"/>, and traverses the child tree from the top down.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_GETDPISCALEDSIZE">
            <summary>
            The WM_GETDPISCALEDSIZE message tells the operating system that the window will be sized to dimensions other than the default.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CUT">
            <summary>
            An application sends a WM_CUT message to an edit control or combo box to delete (cut) the current selection, if any, in the edit control and copy the deleted text to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_COPY">
            <summary>
            An application sends the WM_COPY message to an edit control or combo box to copy the current selection to the clipboard in CF_TEXT format.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_PASTE">
            <summary>
            An application sends a WM_PASTE message to an edit control or combo box to copy the current content of the clipboard to the edit control at the current caret position. Data is inserted only if the clipboard contains data in CF_TEXT format.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CLEAR">
            <summary>
            An application sends a WM_CLEAR message to an edit control or combo box to delete (clear) the current selection, if any, from the edit control.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_UNDO">
            <summary>
            An application sends a WM_UNDO message to an edit control to undo the last operation. When this message is sent to an edit control, the previously deleted text is restored or the previously added text is deleted.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_RENDERFORMAT">
            <summary>
            The WM_RENDERFORMAT message is sent to the clipboard owner if it has delayed rendering a specific clipboard format and if an application has requested data in that format. The clipboard owner must render data in the specified format and place it on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_RENDERALLFORMATS">
            <summary>
            The WM_RENDERALLFORMATS message is sent to the clipboard owner before it is destroyed, if the clipboard owner has delayed rendering one or more clipboard formats. For the content of the clipboard to remain available to other applications, the clipboard owner must render data in all the formats it is capable of generating, and place the data on the clipboard by calling the SetClipboardData function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DESTROYCLIPBOARD">
            <summary>
            The WM_DESTROYCLIPBOARD message is sent to the clipboard owner when a call to the EmptyClipboard function empties the clipboard.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DRAWCLIPBOARD">
            <summary>
            The WM_DRAWCLIPBOARD message is sent to the first window in the clipboard viewer chain when the content of the clipboard changes. This enables a clipboard viewer window to display the new content of the clipboard.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_PAINTCLIPBOARD">
            <summary>
            The WM_PAINTCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area needs repainting.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_VSCROLLCLIPBOARD">
            <summary>
            The WM_VSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's vertical scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_SIZECLIPBOARD">
            <summary>
            The WM_SIZECLIPBOARD message is sent to the clipboard owner by a clipboard viewer window when the clipboard contains data in the CF_OWNERDISPLAY format and the clipboard viewer's client area has changed size.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_ASKCBFORMATNAME">
            <summary>
            The WM_ASKCBFORMATNAME message is sent to the clipboard owner by a clipboard viewer window to request the name of a CF_OWNERDISPLAY clipboard format.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CHANGECBCHAIN">
            <summary>
            The WM_CHANGECBCHAIN message is sent to the first window in the clipboard viewer chain when a window is being removed from the chain.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HSCROLLCLIPBOARD">
            <summary>
            The WM_HSCROLLCLIPBOARD message is sent to the clipboard owner by a clipboard viewer window. This occurs when the clipboard contains data in the CF_OWNERDISPLAY format and an event occurs in the clipboard viewer's horizontal scroll bar. The owner should scroll the clipboard image and update the scroll bar values.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_QUERYNEWPALETTE">
            <summary>
            This message informs a window that it is about to receive the keyboard focus, giving the window the opportunity to realize its logical palette when it receives the focus.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_PALETTEISCHANGING">
            <summary>
            The WM_PALETTEISCHANGING message informs applications that an application is going to realize its logical palette.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_PALETTECHANGED">
            <summary>
            This message is sent by the OS to all top-level and overlapped windows after the window with the keyboard focus realizes its logical palette.
            This message enables windows that do not have the keyboard focus to realize their logical palettes and update their client areas.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HOTKEY">
            <summary>
            The WM_HOTKEY message is posted when the user presses a hot key registered by the RegisterHotKey function. The message is placed at the top of the message queue associated with the thread that registered the hot key.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_PRINT">
            <summary>
            The WM_PRINT message is sent to a window to request that it draw itself in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_PRINTCLIENT">
            <summary>
            The WM_PRINTCLIENT message is sent to a window to request that it draw its client area in the specified device context, most commonly in a printer device context.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_APPCOMMAND">
            <summary>
            The WM_APPCOMMAND message notifies a window that the user generated an application command event, for example, by clicking an application command button using the mouse or typing an application command key on the keyboard.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_THEMECHANGED">
            <summary>
            The WM_THEMECHANGED message is broadcast to every window following a theme change event. Examples of theme change events are the activation of a theme, the deactivation of a theme, or a transition from one theme to another.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CLIPBOARDUPDATE">
            <summary>
            Sent when the contents of the clipboard have changed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DWMCOMPOSITIONCHANGED">
            <summary>
            The system will send a window the WM_DWMCOMPOSITIONCHANGED message to indicate that the availability of desktop composition has changed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DWMNCRENDERINGCHANGED">
            <summary>
            WM_DWMNCRENDERINGCHANGED is called when the non-client area rendering status of a window has changed. Only windows that have set the flag DWM_BLURBEHIND.fTransitionOnMaximized to true will get this message.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DWMCOLORIZATIONCOLORCHANGED">
            <summary>
            Sent to all top-level windows when the colorization color has changed.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_DWMWINDOWMAXIMIZEDCHANGE">
            <summary>
            WM_DWMWINDOWMAXIMIZEDCHANGE will let you know when a DWM composed window is maximized. You also have to register for this message as well. You'd have other window go opaque when this message is sent.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_GETTITLEBARINFOEX">
            <summary>
            Sent to request extended title bar information. A window receives this message through its WindowProc function.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HANDHELDFIRST">
            <inheritdoc/>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_HANDHELDLAST">
            <inheritdoc/>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_AFXFIRST">
            <inheritdoc/>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_AFXLAST">
            <inheritdoc/>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_PENWINFIRST">
            <inheritdoc/>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_PENWINLAST">
            <inheritdoc/>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_USER">
            <summary>
            The WM_USER constant is used by applications to help define private messages for use by private window classes, usually of the form WM_USER+X, where X is an integer value.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CPL_LAUNCH">
            <summary>
            An application sends the WM_CPL_LAUNCH message to Windows Control Panel to request that a Control Panel application be started.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_CPL_LAUNCHED">
            <summary>
            The WM_CPL_LAUNCHED message is sent when a Control Panel application, started by the WM_CPL_LAUNCH message, has closed. The WM_CPL_LAUNCHED message is sent to the window identified by the wParam parameter of the WM_CPL_LAUNCH message that started the application.
            </summary>
        </member>
        <member name="F:LaquaiLib.Util.WpfForms.WindowMessage.WM_APP">
            <summary>
            The WM_APP constant is used by applications to help define private messages, usually of the form WM_APP+X, where X is an integer value.
            </summary>
        </member>
        <member name="T:LaquaiLib.Threading.AsyncTimer">
            <summary>
            Implements a timer that periodically invokes one or more callbacks asynchronously.
            Callbacks that take longer to return that the configured period will cause ticks to be combined.
            </summary>
            <remarks>
            This implementation uses <see cref="T:System.Threading.PeriodicTimer"/> for signaling and a <see cref="T:System.Threading.Tasks.Task"/> for efficient ticking. It is important the instance be disposed when no longer needed to prevent resource leaks.
            </remarks>
        </member>
        <member name="P:LaquaiLib.Threading.AsyncTimer.Period">
            <summary>
            Gets or sets the interval between invocations of the callback.
            </summary>
        </member>
        <member name="P:LaquaiLib.Threading.AsyncTimer.State">
            <summary>
            Gets or sets the state object passed to the callback on each invocation.
            </summary>
        </member>
        <member name="E:LaquaiLib.Threading.AsyncTimer.Callback">
            <summary>
            Allows registering or unregistering a callback that is invoked periodically.
            </summary>
        </member>
        <member name="M:LaquaiLib.Threading.AsyncTimer.#ctor(System.TimeSpan)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.AsyncTimer"/> with the specified interval.
            </summary>
            <param name="interval">The interval between invocations of the callback.</param>
        </member>
        <member name="M:LaquaiLib.Threading.AsyncTimer.#ctor(System.TimeSpan,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.AsyncTimer"/> with the specified interval and state.
            </summary>
            <param name="interval">The interval between invocations of the callback.</param>
            <param name="callback">The state object passed to the callback on each invocation.</param>
        </member>
        <member name="M:LaquaiLib.Threading.AsyncTimer.#ctor(System.TimeSpan,System.Object,System.ReadOnlySpan{System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task}})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.AsyncTimer"/> with the specified interval and state and registers the specified callbacks for invocation.
            </summary>
            <param name="interval">The interval between invocations of the callback.</param>
            <param name="state">The state object passed to the callback on each invocation.</param>
            <param name="callbacks">The callbacks to invoke periodically.</param>
        </member>
        <member name="M:LaquaiLib.Threading.AsyncTimer.Start(System.TimeSpan)">
            <summary>
            Creates and starts a new <see cref="T:LaquaiLib.Threading.AsyncTimer"/> with the specified interval.
            </summary>
            <param name="interval">The interval between invocations of the callback.</param>
        </member>
        <member name="M:LaquaiLib.Threading.AsyncTimer.Start(System.TimeSpan,System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task})">
            <summary>
            Creates and starts a new <see cref="T:LaquaiLib.Threading.AsyncTimer"/> with the specified interval and callback.
            </summary>
            <param name="interval">The interval between invocations of the callback.</param>
            <param name="callback">The state object passed to the callback on each invocation.</param>
        </member>
        <member name="M:LaquaiLib.Threading.AsyncTimer.Start(System.TimeSpan,System.Object,System.ReadOnlySpan{System.Func{System.Object,System.Threading.CancellationToken,System.Threading.Tasks.Task}})">
            <summary>
            Creates and starts a new <see cref="T:LaquaiLib.Threading.AsyncTimer"/> with the specified interval and state and registers the specified callbacks for invocation.
            </summary>
            <param name="interval">The interval between invocations of the callback.</param>
            <param name="state">The state object passed to the callback on each invocation.</param>
            <param name="callbacks">The callbacks to invoke periodically.</param>
        </member>
        <member name="M:LaquaiLib.Threading.AsyncTimer.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Threading.AsyncTimer.StartAsync">
            <summary>
            Starts invoking the callback(s) periodically.
            </summary>
        </member>
        <member name="M:LaquaiLib.Threading.AsyncTimer.StopAsync(System.Threading.CancellationToken)">
            <summary>
            Stops invoking the callback(s) periodically and signals cancellation any callbacks that are still running.
            The method blocks asynchronously until all callbacks complete or respond to cancellation, or <paramref name="cancellationToken"/> is canceled.
            </summary>
        </member>
        <member name="T:LaquaiLib.Threading.ExtendedDebugTaskExtensions">
            <summary>
            Provides factory methods for creating <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> instances.
            </summary>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTaskExtensions.AsDebuggable(System.Threading.Tasks.Task)">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that wraps the specified <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="task">The task to wrap.</param>
            <returns>The wrapped task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTaskExtensions.AsDebuggable``1(System.Threading.Tasks.Task{``0})">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask`1"/> that wraps the specified <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
            <typeparam name="TResult">The type of the result produced by the task.</typeparam>
            <param name="task">The task to wrap.</param>
            <returns>The wrapped task.</returns>
        </member>
        <member name="T:LaquaiLib.Threading.ExtendedDebugTask">
            <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task"/> to provide additional debugging information.
            </summary>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.#ctor(System.Threading.Tasks.Task)">
            <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task"/> to provide additional debugging information.
            </summary>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.#ctor(System.Action)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="action"/> when started.
            </summary>
            <param name="action">The action to associate with the task.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.#ctor(System.Action,System.Threading.CancellationToken)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="action"/> when started.
            </summary>
            <param name="action">The action to associate with the task.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.#ctor(System.Action,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="action"/> when started.
            </summary>
            <param name="action">The action to associate with the task.</param>
            <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to customize the task's behavior.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.#ctor(System.Action{System.Object},System.Object)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="action"/> when started.
            </summary>
            <param name="action">The action to associate with the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.#ctor(System.Action,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="action"/> when started.
            </summary>
            <param name="action">The action to associate with the task.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to customize the task's behavior.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="action"/> when started.
            </summary>
            <param name="action">The action to associate with the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.#ctor(System.Action{System.Object},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="action"/> when started.
            </summary>
            <param name="action">The action to associate with the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to customize the task's behavior.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.#ctor(System.Action{System.Object},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="action"/> when started.
            </summary>
            <param name="action">The action to associate with the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to customize the task's behavior.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.Run(System.Action)">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified action.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.Run(System.Action,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified action.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that cancels the task if it has not yet started.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified action.
            </summary>
            <param name="function">The action to execute.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified action.
            </summary>
            <param name="function">The action to execute.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that cancels the task if it has not yet started.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.Run``1(System.Func{``0})">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified function.
            </summary>
            <typeparam name="TResult">The return type of the task.</typeparam>
            <param name="function">The function to execute.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.Run``1(System.Func{``0},System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified function.
            </summary>
            <typeparam name="TResult">The return type of the task.</typeparam>
            <param name="function">The function to execute.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that cancels the task if it has not yet started.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.Run``1(System.Func{System.Threading.Tasks.Task{``0}})">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified function.
            </summary>
            <typeparam name="TResult">The return type of the task.</typeparam>
            <param name="function">The function to execute.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.Run``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified function.
            </summary>
            <typeparam name="TResult">The return type of the task.</typeparam>
            <param name="function">The function to execute.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that cancels the task if it has not yet started.</param>
            <returns>The started task.</returns>
        </member>
        <member name="P:LaquaiLib.Threading.ExtendedDebugTask.Task">
            <summary>
            Gets the current instance typed as <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.ConfigureAwait(System.Boolean)">
            <summary>
            Gets an awaitable object that allows for configured awaits on the wrapped <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="continueOnCapturedContext">Whether to attempt to marshal the continuation back to the original context captured.</param>
            <returns>An awaitable object.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.ConfigureAwait(System.Threading.Tasks.ConfigureAwaitOptions)">
            <summary>
            Gets an awaitable object that allows for configured awaits on the wrapped <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="options">Options for configuring the await.</param>
            <returns>An awaitable object.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask.GetAwaiter">
            <summary>
            Gets an awaiter for this task.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:LaquaiLib.Threading.ExtendedDebugTaskAwaiter">
            <summary>
            Enables waiting for the task to complete execution while capturing the stack trace at the await point.
            </summary>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTaskAwaiter.#ctor(System.Runtime.CompilerServices.TaskAwaiter,LaquaiLib.Threading.ExtendedDebugTask,System.Diagnostics.StackTrace)">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Threading.ExtendedDebugTaskAwaiter"/> struct.
            </summary>
            <param name="awaiter">The wrapped awaiter.</param>
            <param name="edt">The <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that this awaiter is for.</param>
            <param name="creationStack">The stack trace at the creation point of the task.</param>
        </member>
        <member name="T:LaquaiLib.Threading.ConfiguredExtendedDebugTaskAwaitable">
            <summary>
            Provides an awaitable object that allows for configured awaits on <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/>.
            </summary>
        </member>
        <member name="T:LaquaiLib.Threading.ConfiguredExtendedDebugTaskAwaitable.ConfiguredExtendedDebugTaskAwaiter">
            <summary>
            Enables waiting for the task to complete execution while capturing the stack trace at the await point.
            </summary>
        </member>
        <member name="M:LaquaiLib.Threading.ConfiguredExtendedDebugTaskAwaitable.ConfiguredExtendedDebugTaskAwaiter.#ctor(System.Runtime.CompilerServices.ConfiguredTaskAwaitable.ConfiguredTaskAwaiter,LaquaiLib.Threading.ExtendedDebugTask,System.Diagnostics.StackTrace)">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Threading.ExtendedDebugTaskAwaiter"/> struct.
            </summary>
            <param name="awaiter">The wrapped awaiter.</param>
            <param name="creationStack">The stack trace at the creation point of the task.</param>
        </member>
        <member name="T:LaquaiLib.Threading.ExtendedDebugTask`1">
            <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task`1"/> to provide additional debugging information.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task`1"/> to wrap.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.#ctor(System.Threading.Tasks.Task{`0})">
            <summary>
            Wraps a <see cref="T:System.Threading.Tasks.Task`1"/> to provide additional debugging information.
            </summary>
            <param name="task">The <see cref="T:System.Threading.Tasks.Task`1"/> to wrap.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.#ctor(System.Func{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="function"/> when started.
            </summary>
            <param name="function">The action to associate with the task.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.#ctor(System.Func{`0},System.Threading.CancellationToken)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="function"/> when started.
            </summary>
            <param name="function">The action to associate with the task.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.#ctor(System.Func{`0},System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="function"/> when started.
            </summary>
            <param name="function">The action to associate with the task.</param>
            <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to customize the task's behavior.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.#ctor(System.Func{System.Object,`0},System.Object)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="function"/> when started.
            </summary>
            <param name="function">The action to associate with the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.#ctor(System.Func{`0},System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="function"/> when started.
            </summary>
            <param name="function">The action to associate with the task.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to customize the task's behavior.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="function"/> when started.
            </summary>
            <param name="function">The action to associate with the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="function"/> when started.
            </summary>
            <param name="function">The action to associate with the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to customize the task's behavior.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.#ctor(System.Func{System.Object,`0},System.Object,System.Threading.CancellationToken,System.Threading.Tasks.TaskCreationOptions)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified <paramref name="function"/> when started.
            </summary>
            <param name="function">The action to associate with the task.</param>
            <param name="state">An object representing data to be used by the action.</param>
            <param name="cancellationToken">The <see cref="T:System.Threading.CancellationToken"/> that will be assigned to the new task.</param>
            <param name="creationOptions">The <see cref="T:System.Threading.Tasks.TaskCreationOptions"/> used to customize the task's behavior.</param>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.Run(System.Action)">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified action.
            </summary>
            <param name="action">The action to execute.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.Run(System.Action,System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified action.
            </summary>
            <param name="action">The action to execute.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that cancels the task if it has not yet started.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.Run(System.Func{System.Threading.Tasks.Task})">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified action.
            </summary>
            <param name="function">The action to execute.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.Run(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified action.
            </summary>
            <param name="function">The action to execute.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that cancels the task if it has not yet started.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.Run(System.Func{`0})">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified function.
            </summary>
            <param name="function">The function to execute.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.Run(System.Func{`0},System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified function.
            </summary>
            <param name="function">The function to execute.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that cancels the task if it has not yet started.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.Run(System.Func{System.Threading.Tasks.Task{`0}})">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified function.
            </summary>
            <param name="function">The function to execute.</param>
            <returns>The started task.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.Run(System.Func{System.Threading.Tasks.Task{`0}},System.Threading.CancellationToken)">
            <summary>
            Creates and starts a <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that executes the specified function.
            </summary>
            <param name="function">The function to execute.</param>
            <param name="cancellationToken">A <see cref="T:System.Threading.CancellationToken"/> that cancels the task if it has not yet started.</param>
            <returns>The started task.</returns>
        </member>
        <member name="P:LaquaiLib.Threading.ExtendedDebugTask`1.Task">
            <summary>
            Gets the current instance typed as <see cref="T:System.Threading.Tasks.Task`1"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.ConfigureAwait(System.Boolean)">
            <summary>
            Gets an awaitable object that allows for configured awaits on the wrapped <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="continueOnCapturedContext">Whether to attempt to marshal the continuation back to the original context captured.</param>
            <returns>An awaitable object.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.ConfigureAwait(System.Threading.Tasks.ConfigureAwaitOptions)">
            <summary>
            Gets an awaitable object that allows for configured awaits on the wrapped <see cref="T:System.Threading.Tasks.Task"/>.
            </summary>
            <param name="options">Options for configuring the await.</param>
            <returns>An awaitable object.</returns>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTask`1.GetAwaiter">
            <summary>
            Gets an awaiter for this task.
            </summary>
            <returns>The awaiter.</returns>
        </member>
        <member name="T:LaquaiLib.Threading.ExtendedDebugTaskAwaiter`1">
            <summary>
            Enables waiting for the task to complete execution while capturing the stack trace at the await point.
            </summary>
        </member>
        <member name="M:LaquaiLib.Threading.ExtendedDebugTaskAwaiter`1.#ctor(System.Runtime.CompilerServices.TaskAwaiter{`0},LaquaiLib.Threading.ExtendedDebugTask{`0},System.Diagnostics.StackTrace)">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Threading.ExtendedDebugTaskAwaiter"/> struct.
            </summary>
            <param name="awaiter">The wrapped awaiter.</param>
            <param name="creationStack">The stack trace at the creation point of the task.</param>
        </member>
        <member name="T:LaquaiLib.Threading.ConfiguredExtendedDebugTaskAwaitable`1">
            <summary>
            Provides an awaitable object that allows for configured awaits on <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/>.
            </summary>
        </member>
        <member name="T:LaquaiLib.Threading.ConfiguredExtendedDebugTaskAwaitable`1.ConfiguredExtendedDebugTaskAwaiter">
            <summary>
            Enables waiting for the task to complete execution while capturing the stack trace at the await point.
            </summary>
        </member>
        <member name="M:LaquaiLib.Threading.ConfiguredExtendedDebugTaskAwaitable`1.ConfiguredExtendedDebugTaskAwaiter.#ctor(System.Runtime.CompilerServices.ConfiguredTaskAwaitable{`0}.ConfiguredTaskAwaiter,LaquaiLib.Threading.ExtendedDebugTask{`0},System.Diagnostics.StackTrace)">
            <summary>
            Initializes a new instance of the <see cref="T:LaquaiLib.Threading.ExtendedDebugTaskAwaiter"/> struct.
            </summary>
            <param name="awaiter">The wrapped awaiter.</param>
            <param name="creationStack">The stack trace at the creation point of the task.</param>
        </member>
        <member name="T:LaquaiLib.Threading.ExtendedDebugTaskException">
            <summary>
            The exception that is thrown as a proxy to the original exception thrown by a <see cref="T:System.Threading.Tasks.Task"/> that is wrapped by an <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Threading.ExtendedDebugTaskException.CreationStack">
            <summary>
            Gets a <see cref="T:System.Diagnostics.StackTrace"/> that represents the call stack at the point where the <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> was created.
            </summary>
        </member>
        <member name="P:LaquaiLib.Threading.ExtendedDebugTaskException.AwaitStack">
            <summary>
            Gets a <see cref="T:System.Diagnostics.StackTrace"/> that represents the call stack at the point where the <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> was awaited (or <c>.GetResult()</c> was called on an awaiter for it).
            </summary>
        </member>
        <member name="P:LaquaiLib.Threading.ExtendedDebugTaskException.Task">
            <summary>
            Gets the <see cref="T:LaquaiLib.Threading.ExtendedDebugTask"/> that threw the exception.
            </summary>
        </member>
        <member name="T:LaquaiLib.Threading.ExtendedDebugTaskException`1">
            <summary>
            The exception that is thrown as a proxy to the original exception thrown by a <see cref="T:System.Threading.Tasks.Task`1"/> that is wrapped by an <see cref="T:LaquaiLib.Threading.ExtendedDebugTask`1"/>.
            </summary>
        </member>
        <member name="P:LaquaiLib.Threading.ExtendedDebugTaskException`1.CreationStack">
            <summary>
            Gets a <see cref="T:System.Diagnostics.StackTrace"/> that represents the call stack at the point where the <see cref="T:LaquaiLib.Threading.ExtendedDebugTask`1"/> was created.
            </summary>
        </member>
        <member name="P:LaquaiLib.Threading.ExtendedDebugTaskException`1.AwaitStack">
            <summary>
            Gets a <see cref="T:System.Diagnostics.StackTrace"/> that represents the call stack at the point where the <see cref="T:LaquaiLib.Threading.ExtendedDebugTask`1"/> was awaited (or <c>.GetResult()</c> was called on an awaiter for it).
            </summary>
        </member>
        <member name="P:LaquaiLib.Threading.ExtendedDebugTaskException`1.Task">
            <summary>
            Gets the <see cref="T:LaquaiLib.Threading.ExtendedDebugTask`1"/> that threw the exception.
            </summary>
        </member>
        <member name="T:LaquaiLib.UnsafeUtils.Extensions.NintExtensions">
            <summary>
            Provides Extension Methods for the <see cref="T:System.IntPtr"/> and <see cref="T:System.UIntPtr"/> types, which implicitly includes pointers.
            </summary>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.Extensions.NintExtensions.<>E__0.ToArray(System.Int32)">
            <summary>
            Constructs a <see cref="T:System.Byte"/> array from a region of memory starting at <paramref name="address"/> with the specified <paramref name="length"/>.
            </summary>
            <param name="address">The address of the first <see cref="T:System.Byte"/> to be included in the array.</param>
            <param name="length">The length of the array.</param>
            <returns>The constructed <see cref="T:System.Byte"/> array.</returns>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.Extensions.NintExtensions.<>E__0.CopyTo(System.Span{System.Byte})">
            <summary>
            Copies the contents of the memory region starting at <paramref name="address"/> to the specified <paramref name="span"/>.
            </summary>
            <param name="address">The address of the first <see cref="T:System.Byte"/> to be copied.</param>
            <param name="span">The <see cref="T:System.Byte"/> array to copy the memory region to. Its <see cref="P:System.Span`1.Length"/> dictates how many bytes will be copied.</param>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.Extensions.NintExtensions.<>E__0.CopyTo``1(System.Span{``0})">
            <summary>
            Copies the contents of the memory region starting at <paramref name="address"/> to the specified <paramref name="span"/>.
            </summary>
            <param name="address">The address of the first <typeparamref name="T"/> to be copied.</param>
            <param name="span">The <paramref name="T"/> array to copy the memory region to. Its <see cref="P:System.Span`1.Length"/> dictates how many bytes will be copied.</param>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.Extensions.NintExtensions.<>E__0.AsSpan``1(System.Int32)">
            <summary>
            Wraps the specified <paramref name="address"/> in a <see cref="T:System.Span`1"/> of <typeparamref name="T"/> with the specified <paramref name="length"/>.
            </summary>
            <param name="address">The address of the first <see cref="T:System.Byte"/> to be included in the <see cref="T:System.Span`1"/>.</param>
            <param name="length">The length of the <see cref="T:System.Span`1"/>.</param>
            <returns>The constructed <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.Extensions.NintExtensions.ToArray(System.IntPtr,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.UnsafeUtils.Extensions.NintExtensions.<>E__0.ToArray(System.Int32)"/>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.Extensions.NintExtensions.CopyTo(System.IntPtr,System.Span{System.Byte})">
            <inheritdoc cref="M:LaquaiLib.UnsafeUtils.Extensions.NintExtensions.<>E__0.CopyTo(System.Span{System.Byte})"/>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.Extensions.NintExtensions.CopyTo``1(System.IntPtr,System.Span{``0})">
            <inheritdoc cref="M:LaquaiLib.UnsafeUtils.Extensions.NintExtensions.<>E__0.CopyTo``1(System.Span{``0})"/>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.Extensions.NintExtensions.AsSpan``1(System.IntPtr,System.Int32)">
            <inheritdoc cref="M:LaquaiLib.UnsafeUtils.Extensions.NintExtensions.<>E__0.AsSpan``1(System.Int32)"/>
        </member>
        <member name="T:LaquaiLib.UnsafeUtils.MemoryManager">
            <summary>
            Provides methods and events for managing memory, working with the Garbage Collector (<see cref="T:System.GC"/>) and allocating unmanaged memory.
            </summary>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.MemoryManager.SetMemoryLimit(System.UInt64)">
            <summary>
            Sets a new memory limit for the application.
            </summary>
            <param name="limit">A 64-bit unsigned integer that represents the new memory limit in bytes.</param>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.MemoryManager.GetMemoryLimit">
            <summary>
            Gets the current memory limit for the application in bytes or <c>0</c> if no limit is set or the value could not be retrieved.
            </summary>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.MemoryManager.MAlloc(System.Int32,System.Boolean)">
            <summary>
            Allocates the specified number of bytes of unmanaged memory and returns a <see langword="void"/> pointer to the first byte.
            </summary>
            <param name="bytes">The number of bytes to allocate.</param>
            <param name="pressure">Whether to inform the GC about the allocated memory using <see cref="M:System.GC.AddMemoryPressure(System.Int64)"/>.</param>
            <returns>A <see langword="void"/> pointer to the first byte of the allocated memory.</returns>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.MemoryManager.CAlloc``1(System.Int32,System.Boolean)">
            <summary>
            Allocates a region of memory large enough to accommodate <paramref name="count"/> instances of type <typeparamref name="T"/> and returns a pointer to the first byte.
            </summary>
            <typeparam name="T">The <see langword="unmanaged"/> type of the instances to allocate memory for.</typeparam>
            <param name="count">The number of instances to allocate memory for.</param>
            <param name="pressure">Whether to inform the GC about the allocated memory using <see cref="M:System.GC.AddMemoryPressure(System.Int64)"/>.</param>
            <returns>A <typeparamref name="T"/>-typed pointer to the first byte of the allocated memory.</returns>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.MemoryManager.ReMAlloc(System.Void*,System.Int32,System.Int64)">
            <summary>
            Resizes a previously allocated region of memory to the specified number of bytes and returns a <see langword="void"/> pointer to the first byte.
            </summary>
            <param name="ptr">A pointer to the first byte of the previously allocated memory.</param>
            <param name="bytes">The new size of the memory region in bytes.</param>
            <param name="oldLength">The old length of the block of memory that is being resized. Depending on the new size, either <see cref="M:System.GC.AddMemoryPressure(System.Int64)"/> or <see cref="M:System.GC.RemoveMemoryPressure(System.Int64)"/> is called using this value. If omitted or <c>== 0</c>, no action is taken.</param>
            <returns>A <see langword="void"/> pointer to the first byte of the resized memory region.</returns>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.MemoryManager.ReCAlloc``1(``0*,System.Int32,System.Int64)">
            <summary>
            Resizes a previously allocated region of memory to the specified number of instances of type <typeparamref name="T"/> and returns a pointer to the first byte.
            </summary>
            <typeparam name="T">The <see langword="unmanaged"/> type of the instances to allocate memory for.</typeparam>
            <param name="ptr">A pointer to the first byte of the previously allocated memory.</param>
            <param name="count">The number of instances to allocate memory for.</param>
            <param name="oldCount">The number of instances the block of memory was previously assigned for. Depending on the new size, either <see cref="M:System.GC.AddMemoryPressure(System.Int64)"/> or <see cref="M:System.GC.RemoveMemoryPressure(System.Int64)"/> is called using this value. If omitted or <c>== 0</c>, no action is taken.</param>
            <returns>A <typeparamref name="T"/>-typed pointer to the first byte of the resized memory region.</returns>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.MemoryManager.Free(System.Void*,System.Int64)">
            <summary>
            Frees a previously allocated region of memory.
            </summary>
            <param name="ptr">A pointer to the first byte of the previously allocated memory.</param>
            <param name="pressure">The length of the block of memory that is being freed. If <c>&gt; 0</c>, <see cref="M:System.GC.RemoveMemoryPressure(System.Int64)"/> is called with this value.</param>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.MemoryManager.Next(System.Void*,System.Int32)">
            <summary>
            Returns a new <see langword="void"/> pointer that is offset from the specified pointer by the specified byte <paramref name="count"/>. That value may be negative.
            </summary>
            <param name="ptr">The pointer to offset.</param>
            <param name="count">The number of bytes to offset the pointer by.</param>
            <returns>A <see langword="void"/> pointer that is offset from <paramref name="ptr"/> by the specified <paramref name="count"/></returns>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.MemoryManager.Next``1(System.Void*,System.Int32)">
            <summary>
            Returns a new <see langword="void"/> pointer that is offset from the specified pointer by the size of <typeparamref name="T"/> <paramref name="count"/> times. That value may be negative.
            </summary>
            <typeparam name="T">The <see langword="unmanaged"/> type to obtain the size of to calculate the offset.</typeparam>
            <param name="ptr">The pointer to offset.</param>
            <param name="count">The number of times the size of <typeparamref name="T"/> is added to the pointer.</param>
            <returns>The <see langword="void"/> pointer that is offset from <paramref name="ptr"/> by the size of <typeparamref name="T"/> <paramref name="count"/> times.</returns>
        </member>
        <member name="M:LaquaiLib.UnsafeUtils.MemoryManager.Next``1(``0*,System.Int32)">
            <summary>
            Returns a new pointer to <typeparamref name="T"/> that is offset from the specified pointer by the size of <typeparamref name="T"/> <paramref name="count"/> times. That value may be negative.
            </summary>
            <typeparam name="T">The <see langword="unmanaged"/> type pointed to.</typeparam>
            <param name="ptr">The pointer to offset.</param>
            <param name="count">The number of times the size of <typeparamref name="T"/> is added to the pointer.</param>
            <returns>A pointer to <typeparamref name="T"/> that is offset from <paramref name="ptr"/> by the size of <typeparamref name="T"/> <paramref name="count"/> times.</returns>
        </member>
        <member name="T:LaquaiLib.Core.StringUtility">
            <summary>
            Contains utility methods for the <see cref="T:System.String"/> type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Core.StringUtility.CreateString(System.Int32,LaquaiLib.Core.SpanAction{System.Char})">
            <summary>
            Allocates a new <see langword="string"/> with the specified length, then invokes the specified <see cref="T:LaquaiLib.Core.SpanAction`1"/> to fill it.
            </summary>
            <param name="length">The length of the <see cref="T:System.String"/> to create.</param>
            <param name="spanAction">A <see cref="T:LaquaiLib.Core.SpanAction`1"/> that takes a <see cref="T:System.Span`1"/> of <see cref="T:System.Char"/>.</param>
            <returns>The created <see cref="T:System.String"/>.</returns>
            <remarks>
            <paramref name="spanAction"/> MUST fill the entire <see cref="T:System.Span`1"/> with valid <see cref="T:System.Char"/> values, otherwise uninitialized memory will be exposed through the <see cref="T:System.String"/>.
            </remarks>
        </member>
        <member name="M:LaquaiLib.Core.StringUtility.AllocString(System.Int32)">
            <summary>
            Allocates an uninitialized string from unmanaged memory.
            </summary>
            <param name="length">The length of the string to allocate.</param>
            <returns>A reference to the allocated string.</returns>
        </member>
        <member name="T:LaquaiLib.Core.SpanAction`1">
            <summary>
            Encapsulates a method that takes a <see cref="T:System.Span`1"/> of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the elements in the <see cref="T:System.Span`1"/>.</typeparam>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempAlloc">
            <summary>
            Represents a temporarily allocated region of unmanaged memory that is automatically freed when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.#ctor(System.Int32)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> with the given size as represented by a 32-bit integer.
            </summary>
            <param name="bytes">The amount of bytes to allocate.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.#ctor(System.Int32,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> with the given size as represented by a 32-bit integer, optionally clearing any previous data.
            </summary>
            <param name="bytes">The amount of bytes to allocate.</param>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> as a wrapper around existing allocated memory.
            </summary>
            <param name="address">The address to the memory region to wrap with this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/>.</param>
            <param name="size">The size of the memory region at <paramref name="address"/>.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.#ctor(System.IntPtr,System.Int32,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> as a wrapper around existing allocated memory.
            </summary>
            <param name="address">The address to the memory region to wrap with this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/>.</param>
            <param name="size">The size of the memory region at <paramref name="address"/>.</param>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> that can accomodate exactly one instance of the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1(System.Boolean)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> that can accomodate exactly one instance of the given <see cref="T:System.Type"/>, optionally clearing any previous data.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1(System.Int32)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> that can accomodate exactly <paramref name="count"/> instances of the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
            <param name="count">The amount of <typeparamref name="T"/> instances to allocate memory for.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1(System.Int32,System.Boolean)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> that can accomodate exactly <paramref name="count"/> instances of the given <see cref="T:System.Type"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to allocate memory for.</typeparam>
            <param name="count">The amount of <typeparamref name="T"/> instances to allocate memory for.</param>
            <param name="clear">A value indicating whether any previous data in the allocated memory region should be cleared.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Create``1(``0)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> for the
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> of the <paramref name="value"/> to allocate memory for.</typeparam>
            <param name="value">A value of type <typeparamref name="T"/> to allocate memory for. The existing value is copied to the newly allocated memory region.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Item(System.Index)">
            <summary>
            Retrieves a pointer to the byte at the given <paramref name="index"/> in the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
            <param name="index">An <see cref="T:System.Index"/> that represents the index of the byte to retrieve.</param>
            <returns>A pointer to the byte at the given <paramref name="index"/>.</returns>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Item(System.Range)">
            <summary>
            Constructs a <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> sliced to the specified <paramref name="range"/> in the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
            <param name="range">A <see cref="T:System.Range"/> that represents the range of bytes to retrieve.</param>
            <returns>The created <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> slice.</returns>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Item(System.Int32,System.Int32)">
            <summary>
            Constructs a <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> sliced to the specified range in the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
            <param name="start">The start index of the slice.</param>
            <param name="length">The length of the slice.</param>
            <returns>The created <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> slice.</returns>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Address">
            <summary>
            The address of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.GetPointer">
            <summary>
            Returns the address of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps as a pointer to an unspecified type.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.GetPointer``1">
            <summary>
            Returns the address of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps as a pointer to an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The unmanaged <see cref="T:System.Type"/> to cast the pointer to.</typeparam>
            <returns>The pointer as specified.</returns>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Size">
            <summary>
            The size of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps in bytes.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Bits">
            <summary>
            The size of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps in bits.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.Span">
            <summary>
            A <see cref="T:System.Span`1"/> of <see cref="T:System.Byte"/> that represents the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempAlloc.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Reallocate(System.Int32)">
            <summary>
            Resizes the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps.
            </summary>
            <param name="bytes">The new size of the memory region in bytes.</param>
            <returns>A value indicating whether the <see cref="P:LaquaiLib.Wrappers.TempAlloc.Address"/> of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps has changed. If <see langword="true"/>, reading from any previous addresses is considered undefined behavior.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.As``1">
            <summary>
            Attempts to cast the contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps to an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast the contents of the memory region to.</typeparam>
            <returns>The entire contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps as an instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.As``1(System.Int32,System.Int32)">
            <summary>
            Attempts to cast the content of a slice of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps to an instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The <see cref="T:System.Type"/> to cast the contents of the memory region to.</typeparam>
            <param name="offset">The offset at which to start the slice.</param>
            <param name="length">The length of the slice.</param>
            <returns>The contents of the slice of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps as an instance of <typeparamref name="T"/>.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Clear">
            <summary>
            Clears the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps (sets all bytes to zero).
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Replace(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Searches for the first occurrence of a given <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/> in the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps and replaces it with memory represented by another <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/>.
            </summary>
            <param name="search">The sequence of bytes to find in <see cref="P:LaquaiLib.Wrappers.TempAlloc.Span"/>.</param>
            <param name="replacement">The sequence of bytes to replace the first occurrence of <paramref name="search"/> with. The length of this sequence need not be equal to the length of the <paramref name="search"/> sequence.</param>
            <param name="shift">Whether to shift the bytes to the right of the replacement after it has been made.
            <para/><list type="bullet">
            <item/>If <c><paramref name="replacement"/>.Length &gt; <paramref name="search"/>.Length</c>, <list type="bullet">
                <item/>and <c><paramref name="shift"/></c>, the bytes that would be overwritten by the <paramref name="replacement"/> are shifted right to fully accomodate the replacement.
                <item/>and <c>!<paramref name="shift"/></c>, the <paramref name="replacement"/> bytes overwrite any bytes after <paramref name="search"/>.
            </list>
            <item/>If <c><paramref name="replacement"/>.Length &lt; <paramref name="search"/>.Length</c>, <list type="bullet">
                <item/>and <c><paramref name="shift"/></c>, the bytes remaining in the space of <paramref name="search"/> after the replacement is made are discarded and the bytes to the right of it are shifted left to fill the space. The size of the memory region is decreased by <c>(<paramref name="search"/>.Length - <paramref name="replacement"/>.Length)</c>.
                <item/>and <c>!<paramref name="shift"/></c>, the bytes remaining in the space of <paramref name="search"/> after the replacement is made are left untouched. The size of the memory region does not change.
            </list>
            </list>
            </param>
            <returns>A value that indicates whether a replacement was made.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.ReplaceAll(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{System.Byte},System.Boolean)">
            <summary>
            Searches for all occurrences of a given <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/> in the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps and replaces them with memory represented by another <see cref="T:System.ReadOnlySpan`1"/> of <see cref="T:System.Byte"/>.
            </summary>
            <param name="search">The sequence of bytes to find in <see cref="P:LaquaiLib.Wrappers.TempAlloc.Span"/>.</param>
            <param name="replacement">The sequence of bytes to replace the occurrences of <paramref name="search"/> with. The length of this sequence need not be equal to the length of the <paramref name="search"/> sequence.</param>
            <param name="shift">Whether to shift the bytes to the right of the replacement after it has been made.
            <para/><list type="bullet">
            <item/>If <c><paramref name="replacement"/>.Length &gt; <paramref name="search"/>.Length</c>, <list type="bullet">
                <item/>and <c><paramref name="shift"/></c>, the bytes that would be overwritten by the <paramref name="replacement"/> are shifted right to fully accomodate the replacement.
                <item/>and <c>!<paramref name="shift"/></c>, the <paramref name="replacement"/> bytes overwrite any bytes after <paramref name="search"/>.
            </list>
            <item/>If <c><paramref name="replacement"/>.Length &lt; <paramref name="search"/>.Length</c>, <list type="bullet">
                <item/>and <c><paramref name="shift"/></c>, the bytes remaining in the space of <paramref name="search"/> after the replacement is made are discarded and the bytes to the right of it are shifted left to fill the space. The size of the memory region is decreased by <c>(<paramref name="search"/>.Length - <paramref name="replacement"/>.Length)</c>.
                <item/>and <c>!<paramref name="shift"/></c>, the bytes remaining in the space of <paramref name="search"/> after the replacement is made are left untouched. The size of the memory region does not change.
            </list>
            </list>
            </param>
            <returns>The number of replacements made.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.ToHexString">
            <summary>
            Serializes the contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps to a <see cref="T:System.String"/> of hexadecimal characters, grouped into 4-byte words, grouped into 32-byte lines.
            </summary>
            <returns>The string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.ToBinaryString">
            <summary>
            Serializes the contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps to a <see cref="T:System.String"/> of binary characters, grouped into 32-bit words.
            </summary>
            <returns>The string as described.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.op_Implicit(LaquaiLib.Wrappers.TempAlloc)~System.IntPtr">
            <summary>
            Implicitly converts a <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> instance to an <see langword="nint"/> representing the address of the memory region it wraps.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.op_Implicit(LaquaiLib.Wrappers.TempAlloc)~System.UIntPtr">
            <summary>
            Implicitly converts a <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> instance to a <see langword="nuint"/> representing the address of the memory region it wraps.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.op_Implicit(LaquaiLib.Wrappers.TempAlloc)~System.Void*">
            <summary>
            Implicitly converts a <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> instance to a <see langword="void"/>* representing the address of the memory region it wraps.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempAlloc.DisposeSecure">
            <summary>
            In addition to performing application-defined tasks associated with freeing, releasing, or resetting unmanaged resources, clears the entire contents of the memory region this <see cref="T:LaquaiLib.Wrappers.TempAlloc"/> wraps (sets all bytes to zero).
            </summary>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempDirectory">
            <summary>
            Represents a temporary directory that is automatically deleted when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempDirectory.#ctor">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> with a fully random name.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempDirectory.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> as a wrapper around the specified directory. If the target directory does not exist, it is created. A deletion attempt is still made when the wrapping <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> is disposed.
            </summary>
            <param name="path">The path to the directory to wrap with this <see cref="T:LaquaiLib.Wrappers.TempDirectory"/>.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempDirectory.Path">
            <summary>
            The path to the file this <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempDirectory.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempDirectory"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempDirectory.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Wrappers.TempDirectory"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempDirectory.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempFile">
            <summary>
            Represents a temporary file that is automatically deleted when its wrapper object is disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.#ctor">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempFile"/> with the file name and extension being assigned by the OS. It is usually a <see cref="T:System.Guid"/> with the extension <c>.tmp</c>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.#ctor(System.String)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempFile"/> with the file name being assigned by the OS (it is usually a <see cref="T:System.Guid"/>), and changes its extension to the one specified.
            </summary>
            <param name="fileExtension">The file extension for this <see cref="T:LaquaiLib.Wrappers.TempFile"/>.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.#ctor(System.String,System.String)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempFile"/> as a wrapper around the specified file path. If the target file does not exist, it is created. A deletion attempt is still made when the wrapping <see cref="T:LaquaiLib.Wrappers.TempFile"/> is disposed.
            </summary>
            <param name="path">The path to the file to wrap with this <see cref="T:LaquaiLib.Wrappers.TempFile"/>.</param>
            <param name="fileExtension">The file extension for this <see cref="T:LaquaiLib.Wrappers.TempFile"/>. This is the extension <paramref name="path"/> is changed to before opening the file stream. If <see langword="null"/> or white space, the existing extension in <paramref name="path"/> is kept.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempFile.Path">
            <summary>
            The path to the file this <see cref="T:LaquaiLib.Wrappers.TempFile"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempFile.Stream">
            <summary>
            The <see cref="T:System.IO.FileStream"/> for the file this <see cref="T:LaquaiLib.Wrappers.TempFile"/> wraps.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempFile.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempFile"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.Finalize">
            <summary>
            Finalizes this <see cref="T:LaquaiLib.Wrappers.TempFile"/>.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempFile.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Wrappers.TempObject`1">
            <summary>
            Represents a temporary instance of type <typeparamref name="T"/> that is automatically cleared from memory when its wrapper object is disposed.
            </summary>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempObject`1.Value">
            <summary>
            The instance of <typeparamref name="T"/> wrapped by this <see cref="T:LaquaiLib.Wrappers.TempObject`1"/> instance.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempObject`1.#ctor(System.Object[])">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempObject`1"/> by using the specified <paramref name="parameters"/> to find and invoke a constructor for type <typeparamref name="T"/>.
            </summary>
            <param name="parameters">The parameters to use to find a constructor for <typeparamref name="T"/>. If <c>0</c>-length, the parameterless constructor is used.</param>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempObject`1.#ctor(`0)">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.TempObject`1"/> by using the specified <paramref name="value"/>.
            The calling scope should not hold its own references to <paramref name="value"/> except by accessing <see cref="P:LaquaiLib.Wrappers.TempObject`1.Value"/>.
            </summary>
            <param name="value">A reference to the instance of <typeparamref name="T"/> to wrap.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.TempObject`1.IsDisposed">
            <summary>
            Whether this <see cref="T:LaquaiLib.Wrappers.TempObject`1"/> has been disposed.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.TempObject`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:LaquaiLib.Wrappers.UsingWrapper">
            <summary>
            Provides factory methods for <see cref="T:LaquaiLib.Wrappers.UsingWrapper`1"/> instances.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.UsingWrapper.Use``1(``0)">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Wrappers.UsingWrapper`1"/> instance for the given <see cref="T:System.IDisposable"/>-implementing instance of <typeparamref name="T"/>.
            The registered dispose action just delegates to <see cref="M:System.IDisposable.Dispose"/> of the underlying instance.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <param name="instance">The instance to wrap.</param>
            <returns>The created <see cref="T:LaquaiLib.Wrappers.UsingWrapper`1"/> instance.</returns>
        </member>
        <member name="M:LaquaiLib.Wrappers.UsingWrapper.Use``1(``0,System.Action{``0})">
            <summary>
            Creates a new <see cref="T:LaquaiLib.Wrappers.UsingWrapper`1"/> instance for the given instance of <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
            <param name="instance">The instance to wrap.</param>
            <param name="dispose">The <see cref="T:System.Action`1"/> that is executed when the <see cref="T:LaquaiLib.Wrappers.UsingWrapper`1"/> is disposed. It is passed the wrapped instance.</param>
            <returns>The created <see cref="T:LaquaiLib.Wrappers.UsingWrapper`1"/> instance.</returns>
        </member>
        <member name="T:LaquaiLib.Wrappers.UsingWrapper`1">
            <summary>
            Wraps an instance of an object and, when disposed, executes dispose logic.
            Allows usage of any object in a <see langword="using"/> block or statement for syntactic sugar or to make sure the desired actions aren't forgotten.
            </summary>
            <typeparam name="T">The type of the object to wrap.</typeparam>
        </member>
        <member name="M:LaquaiLib.Wrappers.UsingWrapper`1.#ctor(`0,System.Action{`0})">
            <summary>
            Initializes a new <see cref="T:LaquaiLib.Wrappers.UsingWrapper`1"/> for the specified <paramref name="instance"/> of <typeparamref name="T"/>, optionally registering the <paramref name="dispose"/> action to the <see cref="E:System.AppDomain.ProcessExit"/> event.
            </summary>
            <param name="instance">The instance to wrap.</param>
            <param name="dispose">The <see cref="T:System.Action`1"/> that is executed when the <see cref="T:LaquaiLib.Wrappers.UsingWrapper`1"/> is disposed. It is passed the wrapped instance.</param>
        </member>
        <member name="P:LaquaiLib.Wrappers.UsingWrapper`1.Instance">
            <summary>
            A reference to the wrapped instance of <typeparamref name="T"/>.
            If the instance is disposed, an <see cref="T:System.ObjectDisposedException"/> is thrown.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.UsingWrapper`1.Dispose">
            <summary>
            Executes the registered dispose action on the wrapped instance.
            </summary>
        </member>
        <member name="M:LaquaiLib.Wrappers.UsingWrapper`1.op_Implicit(LaquaiLib.Wrappers.UsingWrapper{`0})~`0">
            <summary>
            Converts a <see cref="T:LaquaiLib.Wrappers.UsingWrapper`1"/> instance to the wrapped instance. The wrapper instance is lost if not kept track of separately
            </summary>
            <param name="wrapper">The <see cref="T:LaquaiLib.Wrappers.UsingWrapper`1"/> instance to convert.</param>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UnspeakableMemberNameRegex_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the UnspeakableMemberNameRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.UnspeakableMemberNameRegex_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UnspeakableMemberNameRegex_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UnspeakableMemberNameRegex_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UnspeakableMemberNameRegex_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.UnspeakableMemberNameRegex_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UnspeakableMemberNameRegex_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UnspeakableMemberNameRegex_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.UnspeakableMemberNameRegex_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.RomanNumeralRegex_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the RomanNumeralRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.RomanNumeralRegex_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.RomanNumeralRegex_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.RomanNumeralRegex_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.RomanNumeralRegex_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.RomanNumeralRegex_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.RomanNumeralRegex_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.RomanNumeralRegex_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.RomanNumeralRegex_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the EntryPointNotFoundExceptionDataRegex method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.EntryPointNotFoundExceptionDataRegex_2.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPop(System.Int32[],System.Int32@,System.Int32@,System.Int32@)">
            <summary>Pops 2 values from the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32)">
            <summary>Pushes 1 value onto the backtracking stack.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_indexOfString_9AECF8F40FCAE66893A90E32FA07EAB795AF3C1A6B65AF92E89697BAED9D8C93">
            <summary>Supports searching for the string "Unable to find an entry point named '".</summary>
        </member>
    </members>
</doc>
